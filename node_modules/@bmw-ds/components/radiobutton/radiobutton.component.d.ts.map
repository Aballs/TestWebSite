{"version":3,"file":"radiobutton.component.d.ts","sources":["radiobutton.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, QueryList, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\nexport interface RadiobuttonChangeEvent {\n    source: RadiobuttonComponent | null;\n    value: any;\n}\nexport declare class RadiobuttonGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n    private control;\n    private _changeDetectorRef;\n    id: string;\n    readonly _stateChangeSubject: Subject<void>;\n    private _disabled;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _required;\n    get required(): boolean;\n    set required(value: boolean);\n    private _selected;\n    private _name;\n    get name(): string;\n    set name(value: string);\n    private _value;\n    get value(): any;\n    set value(newValue: any);\n    groupValueChange: EventEmitter<RadiobuttonChangeEvent>;\n    radios: QueryList<RadiobuttonComponent>;\n    invalid: boolean;\n    isDirty: boolean;\n    isTouched: boolean;\n    onKeydown(event: KeyboardEvent): void;\n    constructor(control: NgControl, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    change(value: any): void;\n    private validate;\n    setDisabledState(isDisabled: boolean): void;\n    private _updateSelectedRadioFromValue;\n    private _checkSelectedRadioButton;\n    private _setNextNeighbourRadioButton;\n    private _setPreviousNeighbourRadioButton;\n    private _onChange;\n    private _onTouched;\n}\nexport declare class RadiobuttonComponent implements ControlValueAccessor, OnInit, OnDestroy {\n    radioGroup: RadiobuttonGroupComponent;\n    elementRef: ElementRef;\n    private _changeDetectorRef;\n    id: string;\n    private _parentChangeSubscription;\n    private _name;\n    get name(): string;\n    set name(value: string);\n    private _value;\n    get value(): any;\n    set value(value: any);\n    private _checked;\n    get checked(): boolean;\n    set checked(value: boolean);\n    private _disabled;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _required;\n    get required(): boolean;\n    set required(value: boolean);\n    private _focusable;\n    get focusable(): boolean;\n    set focusable(value: boolean);\n    valueChange: EventEmitter<RadiobuttonChangeEvent>;\n    private _invalid;\n    get invalid(): boolean;\n    set invalid(value: boolean);\n    constructor(radioGroup: RadiobuttonGroupComponent, elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    writeValue(value: any): void;\n    private onChangeCallback;\n    registerOnChange(onChange: any): void;\n    private onTouchedCallback;\n    registerOnTouched(onTouched: any): void;\n    touch(): void;\n    _onInputChange(event: Event): void;\n    _onInputClick(event: Event): void;\n}\n"]}