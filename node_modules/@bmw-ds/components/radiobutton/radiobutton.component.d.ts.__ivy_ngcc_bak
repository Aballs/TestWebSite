import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, QueryList, ElementRef } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
export interface RadiobuttonChangeEvent {
    source: RadiobuttonComponent | null;
    value: any;
}
export declare class RadiobuttonGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {
    private control;
    private _changeDetectorRef;
    id: string;
    readonly _stateChangeSubject: Subject<void>;
    private _disabled;
    get disabled(): boolean;
    set disabled(value: boolean);
    private _required;
    get required(): boolean;
    set required(value: boolean);
    private _selected;
    private _name;
    get name(): string;
    set name(value: string);
    private _value;
    get value(): any;
    set value(newValue: any);
    groupValueChange: EventEmitter<RadiobuttonChangeEvent>;
    radios: QueryList<RadiobuttonComponent>;
    invalid: boolean;
    isDirty: boolean;
    isTouched: boolean;
    onKeydown(event: KeyboardEvent): void;
    constructor(control: NgControl, _changeDetectorRef: ChangeDetectorRef);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    change(value: any): void;
    private validate;
    setDisabledState(isDisabled: boolean): void;
    private _updateSelectedRadioFromValue;
    private _checkSelectedRadioButton;
    private _setNextNeighbourRadioButton;
    private _setPreviousNeighbourRadioButton;
    private _onChange;
    private _onTouched;
}
export declare class RadiobuttonComponent implements ControlValueAccessor, OnInit, OnDestroy {
    radioGroup: RadiobuttonGroupComponent;
    elementRef: ElementRef;
    private _changeDetectorRef;
    id: string;
    private _parentChangeSubscription;
    private _name;
    get name(): string;
    set name(value: string);
    private _value;
    get value(): any;
    set value(value: any);
    private _checked;
    get checked(): boolean;
    set checked(value: boolean);
    private _disabled;
    get disabled(): boolean;
    set disabled(value: boolean);
    private _required;
    get required(): boolean;
    set required(value: boolean);
    private _focusable;
    get focusable(): boolean;
    set focusable(value: boolean);
    valueChange: EventEmitter<RadiobuttonChangeEvent>;
    private _invalid;
    get invalid(): boolean;
    set invalid(value: boolean);
    constructor(radioGroup: RadiobuttonGroupComponent, elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    private onChangeCallback;
    registerOnChange(onChange: any): void;
    private onTouchedCallback;
    registerOnTouched(onTouched: any): void;
    touch(): void;
    _onInputChange(event: Event): void;
    _onInputClick(event: Event): void;
}
