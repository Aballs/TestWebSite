import { AfterContentInit, EventEmitter, OnDestroy, OnInit, QueryList, ElementRef } from '@angular/core';
import { DropdownItemComponent } from './dropdown-item.component';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class DropdownComponent implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor {
    private _el;
    selectedItem: DropdownItemComponent;
    childDropdownMenuItems: QueryList<DropdownItemComponent>;
    disabled: boolean;
    required: boolean;
    valid: boolean;
    id: string;
    valueChange: EventEmitter<any>;
    isValid: boolean;
    opened: boolean;
    label: string;
    gridClasses: string[];
    private _value;
    private _hovered;
    private readonly _destroy;
    private _onChange;
    private _onTouched;
    get value(): any;
    set value(newValue: any);
    constructor(_el: ElementRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    onKeydown(event: any): void;
    onClickOutside($e: any): void;
    private _prepareItems;
    click(event: MouseEvent): void;
    blur(): void;
    toggle(state?: boolean): void;
    private _validate;
    private _select;
    private _hover;
    private _setGridClasses;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DropdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DropdownComponent, "bmw-dropdown", never, { "value": "value"; "id": "id"; "disabled": "disabled"; "required": "required"; "valid": "valid"; }, { "valueChange": "valueChange"; }, ["childDropdownMenuItems"], ["bmw-label", "label", "bmw-dropdown-item", "bmw-error-message"]>;
}

//# sourceMappingURL=dropdown.component.d.ts.map