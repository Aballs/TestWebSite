@import 'grid-concept-variables';

.mobile-viewport(@rules) {
  @media screen and (max-width: @grid__breakpoint__tablet) {
    @rules();
  }
}

.tablet-viewport(@rules) {
  @media screen and (max-width: @grid__breakpoint__desktop) and (min-width: @grid__breakpoint__tablet) {
    @rules();
  }
}

.desktop-viewport(@rules) {
  @media screen and (max-width: @grid__breakpoint__wide-desktop) and (min-width: @grid__breakpoint__desktop) {
    @rules();
  }
}

.wide-desktop-viewport(@rules) {
  @media screen and (min-width: @grid__breakpoint__wide-desktop) {
    @rules();
  }
}

.prepare-viewport(@viewport, @columns, @padding) {
  :root {
    --grid__number-of-columns: @columns;
    --grid__number-of-columns__string: %('%s', @columns);
    --grid__padding: @padding;
  }

  .bmw__grid {
    box-sizing: border-box;
    margin: 0 auto;
    padding: @padding;
  }

  .bmw__grid__inner {
    width: calc(100% + @padding * 2);
    display: flex;
    flex-flow: row wrap;
    align-items: stretch;
    margin: calc(@padding / 2 * -1);

    @supports (display: grid) {
      width: 100%;
      display: grid;
      margin: 0;
      grid-gap: @padding;
      grid-template-columns: repeat(@columns, minmax(0, 1fr));
    }
  }

  .bmw__grid__cell {
    box-sizing: border-box;
    width: calc((@columns__default__span / @columns) * 100% - @padding);
    margin: calc(@padding / 2 - 0.01px);

    @supports (display: grid) {
      width: auto;
      grid-column-end: span @columns__default__span;
      margin: 0;
    }
  }

  .generate-grid(@columns, @padding, @columns__max);
  .generate-grid-for-viewport(@viewport, @columns, @padding, @columns__max);
}

.generate-grid-for-viewport(@viewport, @columns, @padding, @n, @i: @n) when (@i > 0) {
  .bmw__grid__cell--span-@{i}-@{viewport} {
    width: calc(min(@i, @columns) / @columns * (100vw - @padding - @ie-fix-scrollbar-width) - @padding - 0.01px);

    @supports (display: grid) {
      width: 100%;
      grid-column-end: span min(@i, @columns);

      .bmw__grid__inner {
        grid-template-columns: repeat(min(@i, @columns), minmax(0, 1fr));
      }
    }

    .generate-grid-for-viewport-inner(@columns, @i, @n);
  }

  .generate-grid-for-viewport(@viewport, @columns, @padding, @n, (@i - 1));
}

.generate-grid-for-viewport-inner(@columns, @p, @n, @i: @n) when (@i >@p) {
  .bmw__grid__cell--span-@{i} {
    @supports (display: grid) {
      grid-column-end: span min(@p, @columns);
    }
  }

  .generate-grid-for-viewport-inner(@columns, @p, (@n - 1));
}

.generate-grid(@columns, @padding, @n, @i: @n) when (@i >0) {
  .bmw__grid__cell--span-@{i} {
    width: calc(min(@i, @columns) / @columns * (100vw - @padding - @ie-fix-scrollbar-width) - @padding - 0.01px);

    @supports (display: grid) {
      width: auto;
      grid-column-end: span min(@i, @columns);
    }

    .bmw__grid__inner,
    &.bmw__grid__inner {
      @supports (display: grid) {
        grid-template-columns: repeat(min(@i, @columns), minmax(0, 1fr));
      }
    }
  }

  .generate-grid-inner(@columns, @i, @n);
  .generate-grid(@columns, @padding, @n, (@i - 1));
}

.generate-grid-inner(@columns, @p, @n, @i: @n) when (@i > @p) {
  .bmw__grid__cell--span-@{p} {
    .bmw__grid__cell--span-@{i} {
      @supports (display: grid) {
        width: auto;
        grid-column-end: span min(@i, @p, @columns);
      }
    }
  }

  .generate-grid-inner(@columns, @p, @n, (@i - 1));
}

.generate-order(@n, @i: 1) when (@i =< @n) {
  .bmw__grid__cell--order-@{i} {
    order: @i;
  }

  .generate-order(@n, (@i + 1));
}
