import { AfterViewInit, ElementRef } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const enum LabelPosition {
    Right = "right",
    Left = "left"
}
export declare class SwitchComponent implements AfterViewInit, ControlValueAccessor {
    private control;
    elementRef: ElementRef;
    input: ElementRef;
    name: string;
    required: boolean;
    id: string;
    labelPosition: 'right' | 'left' | LabelPosition;
    disabled: boolean;
    checked: boolean;
    invalid: boolean;
    private isDirty;
    private isTouched;
    private onChangeCallback;
    private onTouchedCallback;
    constructor(control: NgControl, elementRef: ElementRef);
    writeValue(value: boolean): void;
    registerOnChange(fn: (_: boolean) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(disable: boolean): void;
    ngAfterViewInit(): void;
    onTouched(): void;
    toggle(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SwitchComponent, [{ optional: true; self: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<SwitchComponent, "bmw-switch", never, { "required": "required"; "disabled": "disabled"; "checked": "checked"; "id": "id"; "name": "name"; "labelPosition": "labelPosition"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=switch.component.d.ts.map