{"version":3,"file":"content-tab.component.d.ts","sources":["content-tab.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, AfterViewInit } from '@angular/core';\nimport { ContentTabContentComponent } from './content-tab-content.component';\nimport { ContentTabLabelComponent } from './content-tab-label.component';\nimport { Subject } from 'rxjs';\nexport interface SelectionChangeRequest {\n    currentSelection?: string;\n    requestedSelection: string;\n    allowSelectionChange$: Subject<boolean>;\n}\ndeclare const enum Direction {\n    Up = 0,\n    Right = 1,\n    Down = 2,\n    Left = 3\n}\nexport declare class ContentTabComponent implements OnInit, AfterViewInit, OnDestroy {\n    private elementRef;\n    labels: QueryList<ContentTabLabelComponent>;\n    tabContents: QueryList<ContentTabContentComponent>;\n    contentTabWrapper: ElementRef;\n    labelsWrapper: ElementRef;\n    justIcon: boolean;\n    withIcon: boolean;\n    id: string;\n    guardSelectionChange: boolean;\n    /**\n     * expanding content toggle input (default = false)\n     */\n    expandContent: boolean;\n    articles: any[];\n    selected: string;\n    hiddenLabels: any;\n    hiddenLabelsMenu: HTMLElement;\n    private allowSelectionChange$;\n    private unsubscribe$;\n    selectionChange: EventEmitter<string>;\n    requestSelectionChange: EventEmitter<SelectionChangeRequest>;\n    onHashChange(): void;\n    onKeyDown(event: KeyboardEvent): void;\n    constructor(elementRef: ElementRef);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    getArticles(): void;\n    prepareLabels(): void;\n    onClickLabel(event: Event, labelId: string): void;\n    updateLabelSelection(labelId: string): void;\n    requestLabelSelection(labelId: string): void;\n    setResizeTrigger(): void;\n    setSelected(selected: string): void;\n    hideLabelsIfNecessary(showAllFirst?: boolean): void;\n    hideTabsContentIfAllAreDisabled(): void;\n    showAllLabels(parentElement: any): void;\n    sort(parentElement: any): void;\n    /**\n     * Removes the last non-active label from view and adds it to the three-dots menu\n     * @returns boolean indicating if there are more non-active labels in view\n     */\n    hideLastNonActiveLabel(parentElement: any): boolean;\n    createHiddenLabelsMenuElement(): void;\n    toggleHiddenLabels(state?: boolean): void;\n    private getSelectedLabel;\n    selectNeighbourContentTab(contentTabLabel: EventTarget, direction: Direction): void;\n    private selectAndFocusContentTab;\n    private getNeighbourContentTabLabelIndex;\n    private getFocusedTabOptionID;\n    private isContentTabLabelHidden;\n    private focusMenuTabOption;\n    private setNextTabOptionAsFocused;\n    private setPreviousTabOptionAsFocused;\n}\nexport {};\n"]}