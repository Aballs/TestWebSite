import { ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, AfterViewInit } from '@angular/core';
import { ContentTabContentComponent } from './content-tab-content.component';
import { ContentTabLabelComponent } from './content-tab-label.component';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface SelectionChangeRequest {
    currentSelection?: string;
    requestedSelection: string;
    allowSelectionChange$: Subject<boolean>;
}
declare const enum Direction {
    Up = 0,
    Right = 1,
    Down = 2,
    Left = 3
}
export declare class ContentTabComponent implements OnInit, AfterViewInit, OnDestroy {
    private elementRef;
    labels: QueryList<ContentTabLabelComponent>;
    tabContents: QueryList<ContentTabContentComponent>;
    contentTabWrapper: ElementRef;
    labelsWrapper: ElementRef;
    justIcon: boolean;
    withIcon: boolean;
    id: string;
    guardSelectionChange: boolean;
    /**
     * expanding content toggle input (default = false)
     */
    expandContent: boolean;
    articles: any[];
    selected: string;
    hiddenLabels: any;
    hiddenLabelsMenu: HTMLElement;
    private allowSelectionChange$;
    private unsubscribe$;
    selectionChange: EventEmitter<string>;
    requestSelectionChange: EventEmitter<SelectionChangeRequest>;
    onHashChange(): void;
    onKeyDown(event: KeyboardEvent): void;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getArticles(): void;
    prepareLabels(): void;
    onClickLabel(event: Event, labelId: string): void;
    updateLabelSelection(labelId: string): void;
    requestLabelSelection(labelId: string): void;
    setResizeTrigger(): void;
    setSelected(selected: string): void;
    hideLabelsIfNecessary(showAllFirst?: boolean): void;
    hideTabsContentIfAllAreDisabled(): void;
    showAllLabels(parentElement: any): void;
    sort(parentElement: any): void;
    /**
     * Removes the last non-active label from view and adds it to the three-dots menu
     * @returns boolean indicating if there are more non-active labels in view
     */
    hideLastNonActiveLabel(parentElement: any): boolean;
    createHiddenLabelsMenuElement(): void;
    toggleHiddenLabels(state?: boolean): void;
    private getSelectedLabel;
    selectNeighbourContentTab(contentTabLabel: EventTarget, direction: Direction): void;
    private selectAndFocusContentTab;
    private getNeighbourContentTabLabelIndex;
    private getFocusedTabOptionID;
    private isContentTabLabelHidden;
    private focusMenuTabOption;
    private setNextTabOptionAsFocused;
    private setPreviousTabOptionAsFocused;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ContentTabComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ContentTabComponent, "bmw-content-tab", never, { "guardSelectionChange": "guardSelectionChange"; "expandContent": "expandContent"; "justIcon": "justIcon"; "withIcon": "withIcon"; "id": "id"; }, { "selectionChange": "selectionChange"; "requestSelectionChange": "requestSelectionChange"; }, ["labels", "tabContents"], ["bmw-content-tab-label", "bmw-content-tab-content"]>;
}
export {};

//# sourceMappingURL=content-tab.component.d.ts.map