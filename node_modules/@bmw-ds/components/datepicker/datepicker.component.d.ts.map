{"version":3,"file":"datepicker.component.d.ts","sources":["datepicker.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * DESY TEAM: regarding this files and components\n * This is literally copied from the prime-ng library with some minor changes\n * https://www.primefaces.org/primeng/\n * LICENSE: https://github.com/primefaces/primeng/blob/master/LICENSE.md\n */\nimport { ElementRef, OnDestroy, OnInit, EventEmitter, Renderer2, ChangeDetectorRef, TemplateRef, NgZone, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { InputfieldComponent } from '../inputfield/inputfield.component';\nexport declare const CALENDAR_VALUE_ACCESSOR: any;\nexport interface ILocaleSettings {\n    firstDayOfWeek?: number;\n    dayNames: string[];\n    dayNamesShort: string[];\n    dayNamesMin: string[];\n    monthNames: string[];\n    monthNamesShort: string[];\n    today: string;\n    clear: string;\n    dateFormat?: string;\n    weekHeader?: string;\n}\nexport declare class DatepickerComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit, ControlValueAccessor {\n    el: ElementRef;\n    renderer: Renderer2;\n    cd: ChangeDetectorRef;\n    private zone;\n    touched: boolean;\n    invalid: boolean;\n    defaultDate: Date;\n    inputId: string;\n    name: string;\n    placeholder: string;\n    ariaLabelledBy: string;\n    disabled: boolean;\n    dateFormat: string;\n    multipleSeparator: string;\n    rangeSeparator: string;\n    inline: boolean;\n    showOtherMonths: boolean;\n    selectOtherMonths: boolean;\n    showIcon: boolean;\n    icon: string;\n    appendTo: any;\n    readonly: boolean;\n    shortYearCutoff: any;\n    monthNavigator: boolean;\n    yearNavigator: boolean;\n    showTransitionOptions: string;\n    hideTransitionOptions: string;\n    stepHour: number;\n    stepMinute: number;\n    stepSecond: number;\n    required: boolean;\n    showOnFocus: boolean;\n    showWeek: boolean;\n    dataType: string;\n    selectionMode: string;\n    maxDateCount: number;\n    showButtonBar: boolean;\n    autoZIndex: boolean;\n    baseZIndex: number;\n    keepInvalid: boolean;\n    hideOnDateTimeSelect: boolean;\n    numberOfMonths: number;\n    onFocus: EventEmitter<any>;\n    onBlur: EventEmitter<any>;\n    onClose: EventEmitter<any>;\n    onSelect: EventEmitter<any>;\n    onInput: EventEmitter<any>;\n    onTodayClick: EventEmitter<any>;\n    onClearClick: EventEmitter<any>;\n    onMonthChange: EventEmitter<any>;\n    onYearChange: EventEmitter<any>;\n    onClickOutside: EventEmitter<any>;\n    onShow: EventEmitter<any>;\n    hourFormat: string;\n    timeOnly: boolean;\n    showSeconds: boolean;\n    timeSeparator: string;\n    view: string;\n    touchUI: boolean;\n    _locale: ILocaleSettings;\n    tabIndex: number;\n    tabindex: number;\n    inputField: InputfieldComponent;\n    inputfieldViewChild: ElementRef;\n    set content(content: ElementRef);\n    contentViewChild: ElementRef;\n    value: any;\n    dates: any[];\n    months: any[];\n    monthPickerValues: any[];\n    weekDays: string[];\n    currentMonth: number;\n    currentYear: number;\n    currentHour: number;\n    currentMinute: number;\n    currentSecond: number;\n    pm: boolean;\n    mask: HTMLDivElement;\n    maskClickListener: Function;\n    overlay: HTMLDivElement;\n    overlayVisible: boolean;\n    onModelChange: Function;\n    onModelTouched: Function;\n    calendarElement: any;\n    timePickerTimer: any;\n    documentClickListener: any;\n    ticksTo1970: number;\n    yearOptions: number[];\n    focus: boolean;\n    isKeydown: boolean;\n    filled: boolean;\n    inputFieldValue: string;\n    _minDate: Date;\n    _maxDate: Date;\n    _showTime: boolean;\n    _yearRange: string;\n    preventDocumentListener: boolean;\n    dateTemplate: TemplateRef<any>;\n    disabledDateTemplate: TemplateRef<any>;\n    _disabledDates: Array<Date>;\n    _disabledDays: Array<number>;\n    selectElement: any;\n    todayElement: any;\n    focusElement: any;\n    documentResizeListener: any;\n    navigationState: any;\n    isMonthNavigate: boolean;\n    get minDate(): Date;\n    set minDate(date: Date);\n    get maxDate(): Date;\n    set maxDate(date: Date);\n    get disabledDates(): Date[];\n    set disabledDates(disabledDates: Date[]);\n    get disabledDays(): number[];\n    set disabledDays(disabledDays: number[]);\n    get yearRange(): string;\n    set yearRange(yearRange: string);\n    get showTime(): boolean;\n    set showTime(showTime: boolean);\n    get locale(): ILocaleSettings;\n    set locale(newLocale: ILocaleSettings);\n    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, zone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    populateYearOptions(start: any, end: any): void;\n    createWeekDays(): void;\n    createMonthPickerValues(): void;\n    createMonths(month: number, year: number): void;\n    getWeekNumber(date: Date): number;\n    createMonth(month: number, year: number): {\n        month: number;\n        year: number;\n        dates: any[];\n        weekNumbers: any[];\n    };\n    initTime(date: Date): void;\n    navBackward(event: any): void;\n    navForward(event: any): void;\n    decrementYear(): void;\n    incrementYear(): void;\n    onDateSelect(event: any, dateMeta: any): void;\n    shouldSelectDate(dateMeta: any): boolean;\n    onMonthSelect(event: any, index: any): void;\n    updateInputfield(): void;\n    formatDateTime(date: any): any;\n    setCurrentHourPM(hours: number): void;\n    selectDate(dateMeta: any): void;\n    updateModel(value: any): void;\n    getFirstDayOfMonthIndex(month: number, year: number): number;\n    getDaysCountInMonth(month: number, year: number): number;\n    getDaysCountInPrevMonth(month: number, year: number): number;\n    getPreviousMonthAndYear(month: number, year: number): {\n        month: any;\n        year: any;\n    };\n    getNextMonthAndYear(month: number, year: number): {\n        month: any;\n        year: any;\n    };\n    getSundayIndex(): number;\n    isSelected(dateMeta: any): boolean;\n    isMonthSelected(month: number): boolean;\n    isDateEquals(value: any, dateMeta: any): boolean;\n    isDateBetween(start: any, end: any, dateMeta: any): boolean;\n    isSingleSelection(): boolean;\n    isRangeSelection(): boolean;\n    isMultipleSelection(): boolean;\n    isToday(today: any, day: any, month: any, year: any): boolean;\n    isSelectable(day: any, month: any, year: any, otherMonth: any): boolean;\n    isDateDisabled(day: number, month: number, year: number): boolean;\n    isDayDisabled(day: number, month: number, year: number): boolean;\n    onInputFocus(event: Event): void;\n    onInputClick(): void;\n    onInputBlur(event: Event): void;\n    onButtonClick(event: any, inputfield: any): void;\n    onPrevButtonClick(event: any): void;\n    onNextButtonClick(event: any): void;\n    onBMWButtonKeydown(event: any): void;\n    onContainerButtonKeydown(event: any): void;\n    onInputKeydown(event: any): void;\n    onDateCellKeydown(event: any, date: any, groupIndex: any): void;\n    onMonthCellKeydown(event: any, index: any): void;\n    navigateToMonth(prev: any, groupIndex: any): void;\n    updateFocus(): void;\n    initFocusableCell(): void;\n    trapFocus(event: any): void;\n    onMonthDropdownChange(m: string): void;\n    onYearDropdownChange(y: string): void;\n    convertTo24Hour: (hours: number, pm: boolean) => number;\n    validateTime(hour: number, minute: number, second: number, pm: boolean): boolean;\n    incrementHour(event: any): void;\n    onTimePickerElementMouseDown(event: Event, type: number, direction: number): void;\n    onTimePickerElementMouseUp(event: Event): void;\n    onTimePickerElementMouseOut(event: Event): void;\n    repeat(event: Event, interval: number, type: number, direction: number): void;\n    clearTimePickerTimer(): void;\n    decrementHour(event: any): void;\n    incrementMinute(event: any): void;\n    decrementMinute(event: any): void;\n    incrementSecond(event: any): void;\n    decrementSecond(event: any): void;\n    updateTime(): void;\n    toggleAMPM(event: any): void;\n    onUserInput(event: any): void;\n    isValidSelection(value: any): boolean;\n    parseValueFromString(text: string): Date | Date[];\n    parseDateTime(text: any): Date;\n    populateTime(value: any, timeString: any, ampm: any): void;\n    updateUI(): void;\n    showOverlay(): void;\n    hideOverlay(): void;\n    toggle(): void;\n    appendOverlay(): void;\n    restoreOverlayAppend(): void;\n    alignOverlay(): void;\n    enableModality(element: any): void;\n    disableModality(): void;\n    unbindMaskClickListener(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(val: boolean): void;\n    getDateFormat(): string;\n    formatDate(date: any, format: any): string;\n    formatTime(date: any): string;\n    parseTime(value: any): {\n        hour: number;\n        minute: number;\n        second: number;\n    };\n    parseDate(value: any, format: any): any;\n    daylightSavingAdjust(date: any): any;\n    updateFilledState(): void;\n    onTodayButtonClick(event: any): void;\n    onClearButtonClick(event: any): void;\n    bindDocumentClickListener(): void;\n    unbindDocumentClickListener(): void;\n    bindDocumentResizeListener(): void;\n    unbindDocumentResizeListener(): void;\n    isOutsideClicked(event: Event): boolean;\n    showError(): void;\n    isNavIconClicked(event: Event): boolean;\n    onWindowResize(): void;\n    onOverlayHide(): void;\n    ngOnDestroy(): void;\n}\n"]}