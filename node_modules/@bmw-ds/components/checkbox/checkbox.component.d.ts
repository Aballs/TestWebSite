import { AfterViewInit, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const enum CheckboxState {
    checked = "checked",
    indeterminate = "indeterminate",
    unchecked = "unchecked"
}
export declare class CheckboxComponent implements ControlValueAccessor, AfterViewInit, OnChanges {
    private control;
    elementRef: ElementRef;
    input: ElementRef;
    name: string;
    disabled: boolean;
    checked: CheckboxState;
    required: boolean;
    id: string;
    updateEvent: EventEmitter<CheckboxComponent>;
    invalid: boolean;
    private isDirty;
    private isTouched;
    private onChange;
    private onTouched;
    onKeyDown(event: KeyboardEvent): void;
    constructor(control: NgControl, elementRef: ElementRef);
    writeValue(value: CheckboxState | boolean): void;
    registerOnChange(fn: (_: boolean) => void): void;
    registerOnTouched(fn: () => void): void;
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    checkProperties(): void;
    readState(): void;
    private updateCheckState;
    stopPropagation(event: MouseEvent): void;
    setDisabledState(disabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<CheckboxComponent, [{ optional: true; self: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<CheckboxComponent, "bmw-checkbox", never, { "disabled": "disabled"; "checked": "checked"; "required": "required"; "id": "id"; "name": "name"; }, { "updateEvent": "updateEvent"; }, never, ["*"]>;
}

//# sourceMappingURL=checkbox.component.d.ts.map