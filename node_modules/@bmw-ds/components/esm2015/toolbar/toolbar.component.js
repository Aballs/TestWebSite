import { __decorate } from "tslib";
import { Component, ContentChildren, HostListener, ViewChild, HostBinding, Input, isDevMode } from '@angular/core';
import { IconButtonComponent } from '../icon-button/icon-button.component';
let ToolbarComponent = class ToolbarComponent {
    constructor() {
        this.visibleIcons = [];
        this.hiddenIcons = [];
        this.opened = false;
        if (isDevMode()) {
            console.warn('Warning - <bmw-toolbar> component is deprecated and will be removed in the near future');
        }
    }
    listenerFunction() {
        //wait at least 10mils between re-render
        clearTimeout(this.resizeTimer);
        this.resizeTimer = window.setTimeout(() => {
            this.onResize(true);
        }, 10);
    }
    ngAfterContentInit() {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
        this.icons.forEach((icon, index) => {
            this.visibleIcons.push({
                button: icon,
                index: index
            });
        });
        this.onResize();
    }
    iconClick(icon) {
        icon.clickEvent.emit(icon);
    }
    onResize(showAll) {
        if (showAll) {
            this.showAll();
        }
        //wait till DOM re-render
        setTimeout(() => {
            const _iconsWrapperHeight = parseInt(this.iconsWrapper.nativeElement.getBoundingClientRect().height, 10);
            const _componentHeight = parseInt(this.wrapper.nativeElement.getBoundingClientRect().height, 10);
            if (_componentHeight < _iconsWrapperHeight) {
                this.hide();
                //wait till DOM re-render
                setTimeout(() => {
                    this.onResize();
                });
            }
        });
    }
    hide() {
        const icon = this.visibleIcons.splice(-1, 1);
        this.hiddenIcons = [...icon, ...this.hiddenIcons];
    }
    showAll() {
        this.visibleIcons = [...this.visibleIcons, ...this.hiddenIcons];
        this.hiddenIcons = [];
    }
    toggleMenu() {
        this.opened = !this.opened;
    }
};
__decorate([
    ViewChild('wrapper')
], ToolbarComponent.prototype, "wrapper", void 0);
__decorate([
    ViewChild('iconsWrapper')
], ToolbarComponent.prototype, "iconsWrapper", void 0);
__decorate([
    ContentChildren(IconButtonComponent)
], ToolbarComponent.prototype, "icons", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], ToolbarComponent.prototype, "id", void 0);
__decorate([
    HostListener('window:resize')
], ToolbarComponent.prototype, "listenerFunction", null);
ToolbarComponent = __decorate([
    Component({
        selector: 'bmw-toolbar',
        template: "<div class=\"toolbar-wrapper\" #wrapper>\n  <div class=\"icons\" #iconsWrapper>\n    <bmw-icon-button\n      *ngFor=\"let icon of visibleIcons\"\n      [iconClass]=\"icon.button.iconClass\"\n      [disabled]=\"icon.button.disabled\"\n      [id]=\"icon.button.id\"\n      [ariaLabel]=\"icon.button.ariaLabel\"\n      (clickEvent)=\"iconClick(icon.button)\"\n    ></bmw-icon-button>\n  </div>\n\n  <div *ngIf=\"hiddenIcons.length > 0\" class=\"overflow\" [class.opened]=\"opened\" (click)=\"toggleMenu()\">\n    <div class=\"overflow-menu\" [class.opened]=\"opened\">\n      <bmw-icon-button\n        *ngFor=\"let icon of hiddenIcons\"\n        [iconClass]=\"icon.button.iconClass\"\n        [disabled]=\"icon.button.disabled\"\n        [id]=\"icon.button.id\"\n        [ariaLabel]=\"icon.button.ariaLabel\"\n        (clickEvent)=\"iconClick(icon.button)\"\n      ></bmw-icon-button>\n    </div>\n  </div>\n</div>\n",
        styles: ["::ng-deep .reversed .toolbar-wrapper{background-color:var(--toolbar__reversed__background-color)!important}.toolbar-wrapper{height:calc(var(--toolbar__default__overflow-icon__width) + 2 * var(--toolbar__default__padding));width:100%;padding:var(--toolbar__default__padding);padding-bottom:calc(var(--toolbar__default__padding) - 1px);padding-right:var(--toolbar__default__padding-right);position:relative;box-sizing:border-box;border-bottom:1px solid var(--toolbar__default__border-bottom-color);background-color:var(--toolbar__default__background-color)}.toolbar-wrapper .icons{display:flex;flex-flow:wrap;width:100%}.toolbar-wrapper .icons bmw-icon-button{padding-right:var(--toolbar__icon__padding-right)}.toolbar-wrapper .overflow{position:absolute;top:var(--toolbar__default__padding);right:var(--toolbar__icon__padding-right);cursor:pointer}.toolbar-wrapper .overflow:after{font-family:iwp;content:'\\ea22';color:var(--toolbar__three-dots__color);font-size:var(--toolbar__default__overflow-icon__width)}.toolbar-wrapper .overflow.opened{background-color:var(--toolbar__three-dots__hover__background-color)}.toolbar-wrapper .overflow .overflow-menu{display:none;position:absolute;top:100%;right:0;background-color:var(--toolbar__overflow-menu__defualt__background-color)}.toolbar-wrapper .overflow .overflow-menu.opened{display:block}.toolbar-wrapper .overflow .overflow-menu ::ng-deep bmw-icon-button{display:inline-block;border:1px solid var(--toolbar__overflow-menu__icon-button__border-color);border-bottom:none}.toolbar-wrapper .overflow .overflow-menu ::ng-deep bmw-icon-button button{padding:calc(var(--icon-button__medium__padding) - 1px);padding-bottom:var(--icon-button__medium__padding)}.toolbar-wrapper .overflow .overflow-menu ::ng-deep bmw-icon-button:last-child{border-bottom:1px solid var(--toolbar__overflow-menu__icon-button__border-color)}.toolbar-wrapper .overflow .overflow-menu ::ng-deep bmw-icon-button:last-child button{padding-bottom:calc(var(--icon-button__medium__padding) - 1px)}"]
    })
], ToolbarComponent);
export { ToolbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYm13LWRzL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJ0b29sYmFyL3Rvb2xiYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULGVBQWUsRUFFZixZQUFZLEVBQ1osU0FBUyxFQUVULFdBQVcsRUFDWCxLQUFLLEVBQ0wsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBT3ZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBTTNFLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBdUIzQjtRQWJBLGlCQUFZLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxnQkFBVyxHQUEyQixFQUFFLENBQUM7UUFDekMsV0FBTSxHQUFHLEtBQUssQ0FBQztRQVliLElBQUksU0FBUyxFQUFFLEVBQUU7WUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLHdGQUF3RixDQUFDLENBQUM7U0FDeEc7SUFDSCxDQUFDO0lBWkQsZ0JBQWdCO1FBQ2Qsd0NBQXdDO1FBQ3hDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUN4QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNULENBQUM7SUFRRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2lCQUNwQixRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUNaLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztnQkFDckIsTUFBTSxFQUFFLElBQUk7Z0JBQ1osS0FBSyxFQUFFLEtBQUs7YUFDYixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBaUI7UUFDeEIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7UUFDRCx5QkFBeUI7UUFDekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE1BQU0sbUJBQW1CLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2pHLElBQUksZ0JBQWdCLEdBQUcsbUJBQW1CLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWix5QkFBeUI7Z0JBQ3pCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNsQixDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0NBQ0YsQ0FBQTtBQTdFQztJQURDLFNBQVMsQ0FBQyxTQUFTLENBQUM7aURBQ0Q7QUFFcEI7SUFEQyxTQUFTLENBQUMsY0FBYyxDQUFDO3NEQUNEO0FBRXpCO0lBREMsZUFBZSxDQUFDLG1CQUFtQixDQUFDOytDQUNDO0FBR3RDO0lBRkMsV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUN0QixLQUFLLEVBQUU7NENBQ0c7QUFNWDtJQURDLFlBQVksQ0FBQyxlQUFlLENBQUM7d0RBTzdCO0FBckJVLGdCQUFnQjtJQUw1QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsYUFBYTtRQUN2Qiw2NUJBQXVDOztLQUV4QyxDQUFDO0dBQ1csZ0JBQWdCLENBK0U1QjtTQS9FWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgUXVlcnlMaXN0LFxuICBIb3N0TGlzdGVuZXIsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBpc0Rldk1vZGVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmludGVyZmFjZSBJbm5lckJ1dHRvbkNvbXBvbmVudCB7XG4gIGJ1dHRvbjogSWNvbkJ1dHRvbkNvbXBvbmVudDtcbiAgaW5kZXg6IG51bWJlcjtcbn1cblxuaW1wb3J0IHsgSWNvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4uL2ljb24tYnV0dG9uL2ljb24tYnV0dG9uLmNvbXBvbmVudCc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdibXctdG9vbGJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90b29sYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdG9vbGJhci5jb21wb25lbnQubGVzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRvb2xiYXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgQFZpZXdDaGlsZCgnd3JhcHBlcicpXG4gIHdyYXBwZXI6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ2ljb25zV3JhcHBlcicpXG4gIGljb25zV3JhcHBlcjogRWxlbWVudFJlZjtcbiAgQENvbnRlbnRDaGlsZHJlbihJY29uQnV0dG9uQ29tcG9uZW50KVxuICBpY29uczogUXVlcnlMaXN0PEljb25CdXR0b25Db21wb25lbnQ+O1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICBASW5wdXQoKVxuICBpZDogc3RyaW5nO1xuICB2aXNpYmxlSWNvbnM6IElubmVyQnV0dG9uQ29tcG9uZW50W10gPSBbXTtcbiAgaGlkZGVuSWNvbnM6IElubmVyQnV0dG9uQ29tcG9uZW50W10gPSBbXTtcbiAgb3BlbmVkID0gZmFsc2U7XG4gIHJlc2l6ZVRpbWVyOiBudW1iZXI7XG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnKVxuICBsaXN0ZW5lckZ1bmN0aW9uKCk6IHZvaWQge1xuICAgIC8vd2FpdCBhdCBsZWFzdCAxMG1pbHMgYmV0d2VlbiByZS1yZW5kZXJcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XG4gICAgdGhpcy5yZXNpemVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMub25SZXNpemUodHJ1ZSk7XG4gICAgfSwgMTApO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKGlzRGV2TW9kZSgpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmcgLSA8Ym13LXRvb2xiYXI+IGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJyk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICghdGhpcy5pZClcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcblxuICAgIHRoaXMuaWNvbnMuZm9yRWFjaCgoaWNvbiwgaW5kZXgpID0+IHtcbiAgICAgIHRoaXMudmlzaWJsZUljb25zLnB1c2goe1xuICAgICAgICBidXR0b246IGljb24sXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuICB9XG5cbiAgaWNvbkNsaWNrKGljb246IEljb25CdXR0b25Db21wb25lbnQpIHtcbiAgICBpY29uLmNsaWNrRXZlbnQuZW1pdChpY29uKTtcbiAgfVxuXG4gIG9uUmVzaXplKHNob3dBbGw/OiBib29sZWFuKSB7XG4gICAgaWYgKHNob3dBbGwpIHtcbiAgICAgIHRoaXMuc2hvd0FsbCgpO1xuICAgIH1cbiAgICAvL3dhaXQgdGlsbCBET00gcmUtcmVuZGVyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBfaWNvbnNXcmFwcGVySGVpZ2h0ID0gcGFyc2VJbnQodGhpcy5pY29uc1dyYXBwZXIubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQsIDEwKTtcbiAgICAgIGNvbnN0IF9jb21wb25lbnRIZWlnaHQgPSBwYXJzZUludCh0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQsIDEwKTtcbiAgICAgIGlmIChfY29tcG9uZW50SGVpZ2h0IDwgX2ljb25zV3JhcHBlckhlaWdodCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgLy93YWl0IHRpbGwgRE9NIHJlLXJlbmRlclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLm9uUmVzaXplKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBjb25zdCBpY29uID0gdGhpcy52aXNpYmxlSWNvbnMuc3BsaWNlKC0xLCAxKTtcbiAgICB0aGlzLmhpZGRlbkljb25zID0gWy4uLmljb24sIC4uLnRoaXMuaGlkZGVuSWNvbnNdO1xuICB9XG5cbiAgc2hvd0FsbCgpOiB2b2lkIHtcbiAgICB0aGlzLnZpc2libGVJY29ucyA9IFsuLi50aGlzLnZpc2libGVJY29ucywgLi4udGhpcy5oaWRkZW5JY29uc107XG4gICAgdGhpcy5oaWRkZW5JY29ucyA9IFtdO1xuICB9XG5cbiAgdG9nZ2xlTWVudSgpIHtcbiAgICB0aGlzLm9wZW5lZCA9ICF0aGlzLm9wZW5lZDtcbiAgfVxufVxuIl19