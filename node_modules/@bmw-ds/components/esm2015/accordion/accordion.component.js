import { __decorate } from "tslib";
import { AfterContentChecked, AfterContentInit, Component, ContentChildren, EventEmitter, HostBinding, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, HostListener, ElementRef } from '@angular/core';
import { PanelComponent } from '../panel/panel.component';
let AccordionComponent = class AccordionComponent {
    constructor(elem) {
        this.elem = elem;
        this.activePanelId = null;
        this.activePanelIdChange = new EventEmitter();
        this.subscriptions = [];
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                const targetedPanel = Array.prototype.slice
                    .call(this.elem.nativeElement.querySelectorAll('.panel'))
                    .find((panel) => panel === event.target);
                if (targetedPanel) {
                    this.setActivePanel(this.panels.find(panel => panel.labelsDiv.nativeElement === targetedPanel).id, targetedPanel.classList.contains('opened'));
                }
                event.stopImmediatePropagation();
                break;
        }
    }
    ngOnInit() {
        if (typeof this.id === 'undefined') {
            this.id = this.createId();
        }
    }
    ngOnChanges() {
        if (!this.panels)
            return;
        this.setActivePanel(this.activePanelId);
    }
    ngAfterContentInit() {
        this.panels.changes.subscribe(this.setupPanels.bind(this));
        this.setupPanels();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
    }
    setupPanels() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = this.panels.map((panel) => {
            return panel.toggleEvent.subscribe(event => {
                this.setActivePanel(panel.id, event.opened);
            });
        });
        if (this.activePanelId) {
            return this.setActivePanel(this.activePanelId);
        }
    }
    setActivePanel(activePanelId, opened = true) {
        this.panels.forEach((panel) => {
            if (panel.id !== activePanelId && this.canTogglePanel(panel)) {
                panel.opened = false;
            }
            if (panel.id === activePanelId) {
                panel.opened = opened;
                this.activePanelId = opened ? activePanelId : null;
                this.activePanelIdChange.emit(this.activePanelId);
            }
        });
    }
    canTogglePanel(panel) {
        return !panel.disabled && !panel.nonCollapsible;
    }
    createId() {
        return Math.random()
            .toString(36)
            .substring(2);
    }
};
AccordionComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    ContentChildren(PanelComponent)
], AccordionComponent.prototype, "panels", void 0);
__decorate([
    Input()
], AccordionComponent.prototype, "activePanelId", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], AccordionComponent.prototype, "id", void 0);
__decorate([
    Output()
], AccordionComponent.prototype, "activePanelIdChange", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], AccordionComponent.prototype, "onKeydown", null);
AccordionComponent = __decorate([
    Component({
        selector: 'bmw-accordion',
        template: "<ng-content></ng-content>\n",
        styles: [":host{display:block}:host ::ng-deep bmw-panel{margin-bottom:var(--spacing-bmw-xs)}"]
    })
], AccordionComponent);
export { AccordionComponent };
//# sourceMappingURL=data:application/json;base64,