import { __decorate } from "tslib";
import { ToggleButtonComponent } from './../../toggle-button/toggle-button.component';
import { Component, Output, Input, EventEmitter, ViewChild, TemplateRef, ElementRef, OnInit, ChangeDetectorRef } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
let SegmentedButtonItemComponent = class SegmentedButtonItemComponent {
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        this.buttonClicked = new EventEmitter();
        this.focused = false;
        this.isInDropdown = false;
        this.itemWidth = 'auto';
        this.native = this.el.nativeElement;
    }
    ngOnInit() {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
        if (!this.value)
            this.value = this.id;
        const controlObject = {};
        controlObject[this.id] = new FormControl(this.checked);
        this.reactiveForm = new FormGroup(controlObject);
    }
    toggleItemVisibility(state) {
        if (typeof state === 'undefined') {
            this.isHidden = !this.isHidden;
        }
        else {
            this.isHidden = state;
        }
    }
    setChecked(state) {
        setTimeout(() => {
            if (this.disabled)
                return;
            if (typeof state === 'undefined') {
                this.checked = !this.checked;
            }
            else {
                this.checked = state;
            }
            this.reactiveForm.controls[this.id].setValue(this.checked);
        });
    }
    setTop(top) {
        this.fromTop = `calc(${top * 100}% - ${top}px)`;
    }
    setWidth(width) {
        this.itemWidth = `${width}px`;
    }
    moveToDropdown() {
        this.isInDropdown = true;
    }
    removeFromDropdown() {
        this.itemWidth = 'auto';
        this.isInDropdown = false;
    }
    resetVisibility() {
        this.removeFromDropdown();
        this.toggleItemVisibility(false);
    }
    onClick(event) {
        if (this.disabled)
            return;
        this.buttonClicked.emit(this);
    }
};
SegmentedButtonItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    ViewChild('template', { read: TemplateRef })
], SegmentedButtonItemComponent.prototype, "sample", void 0);
__decorate([
    ViewChild(ToggleButtonComponent)
], SegmentedButtonItemComponent.prototype, "button", void 0);
__decorate([
    Input()
], SegmentedButtonItemComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], SegmentedButtonItemComponent.prototype, "checked", void 0);
__decorate([
    Input()
], SegmentedButtonItemComponent.prototype, "value", void 0);
__decorate([
    Input()
], SegmentedButtonItemComponent.prototype, "id", void 0);
__decorate([
    Output()
], SegmentedButtonItemComponent.prototype, "buttonClicked", void 0);
SegmentedButtonItemComponent = __decorate([
    Component({
        selector: 'bmw-segmented-button-item',
        template: "<ng-template #template>\n  <div\n    class=\"button-wrapper\"\n    [ngClass]=\"{\n      overflowed: isInDropdown,\n      hidden: isHidden\n    }\"\n    [style.top]=\"fromTop\"\n    [style.width]=\"itemWidth\"\n    [class.focused]=\"focused\"\n  >\n    <form [formGroup]=\"reactiveForm\">\n      <bmw-toggle-button\n        [disabled]=\"disabled\"\n        [checked]=\"checked && !disabled\"\n        (updateEvent)=\"onClick($event)\"\n        [form]=\"reactiveForm\"\n        [name]=\"id\"\n        [tabIndex]=\"isInDropdown ? -1 : 0\"\n      >\n        <ng-content></ng-content>\n      </bmw-toggle-button>\n    </form>\n  </div>\n</ng-template>\n",
        styles: [".button-wrapper{flex:1 0 auto;max-width:100%;margin-right:-1px}.overflowed{position:absolute;top:100%;right:0;margin-right:0;z-index:var(--segmented-button__item__z-index)}.overflowed.hidden{display:none}.overflowed.focused{z-index:calc(var(--toggle-button__default__z-index) + 1)}.overflowed.focused bmw-toggle-button ::ng-deep label{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}.overflowed.focused bmw-toggle-button ::ng-deep label.button--primary{outline:solid 1px;outline-color:var(--color-bmw-basic5);outline-offset:-3px}bmw-toggle-button ::ng-deep label{width:100%;height:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
    })
], SegmentedButtonItemComponent);
export { SegmentedButtonItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudGVkLWJ1dHRvbi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNlZ21lbnRlZC1idXR0b24vc2VnbWVudGVkLWJ1dHRvbi1pdGVtL3NlZ21lbnRlZC1idXR0b24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3RGLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxZQUFZLEVBQ1osU0FBUyxFQUNULFdBQVcsRUFDWCxVQUFVLEVBQ1YsTUFBTSxFQUNOLGlCQUFpQixFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT3hELElBQWEsNEJBQTRCLEdBQXpDLE1BQWEsNEJBQTRCO0lBOEJ2QyxZQUFvQixFQUFjLEVBQVUsRUFBcUI7UUFBN0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBVmpFLGtCQUFhLEdBQStDLElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0UsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUVyQixjQUFTLEdBQUcsTUFBTSxDQUFDO1FBTWpCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7aUJBQ3BCLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQ1osU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUV0QyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDekIsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsb0JBQW9CLENBQUMsS0FBZTtRQUNsQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtZQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWU7UUFDeEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDLFFBQVE7Z0JBQUUsT0FBTztZQUMxQixJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDOUI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7YUFDdEI7WUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBVztRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUNsRCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEtBQUssSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQVU7UUFDaEIsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGLENBQUE7O1lBL0R5QixVQUFVO1lBQWMsaUJBQWlCOztBQTVCakU7SUFEQyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDOzREQUNwQjtBQUd6QjtJQURDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQzs0REFDSDtBQUc5QjtJQURDLEtBQUssRUFBRTs4REFDVTtBQUdsQjtJQURDLEtBQUssRUFBRTs2REFDUztBQUdqQjtJQURDLEtBQUssRUFBRTsyREFDTTtBQUdkO0lBREMsS0FBSyxFQUFFO3dEQUNHO0FBR1g7SUFEQyxNQUFNLEVBQUU7bUVBQ3NFO0FBcEJwRSw0QkFBNEI7SUFMeEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDJCQUEyQjtRQUNyQyxvcEJBQXFEOztLQUV0RCxDQUFDO0dBQ1csNEJBQTRCLENBNkZ4QztTQTdGWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb2dnbGVCdXR0b25Db21wb25lbnQgfSBmcm9tICcuLy4uLy4uL3RvZ2dsZS1idXR0b24vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPdXRwdXQsXG4gIElucHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdDaGlsZCxcbiAgVGVtcGxhdGVSZWYsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdibXctc2VnbWVudGVkLWJ1dHRvbi1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlZ21lbnRlZC1idXR0b24taXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NlZ21lbnRlZC1idXR0b24taXRlbS5jb21wb25lbnQubGVzcyddXG59KVxuZXhwb3J0IGNsYXNzIFNlZ21lbnRlZEJ1dHRvbkl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgc2FtcGxlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBWaWV3Q2hpbGQoVG9nZ2xlQnV0dG9uQ29tcG9uZW50KVxuICBidXR0b246IFRvZ2dsZUJ1dHRvbkNvbXBvbmVudDtcblxuICBASW5wdXQoKVxuICBkaXNhYmxlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBjaGVja2VkOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIHZhbHVlOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgaWQ6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgYnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPFNlZ21lbnRlZEJ1dHRvbkl0ZW1Db21wb25lbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGZvY3VzZWQgPSBmYWxzZTtcbiAgaXNJbkRyb3Bkb3duID0gZmFsc2U7XG4gIGZyb21Ub3A6IHN0cmluZztcbiAgaXRlbVdpZHRoID0gJ2F1dG8nO1xuICBpc0hpZGRlbjogYm9vbGVhbjtcbiAgbmF0aXZlOiBIVE1MRWxlbWVudDtcbiAgcmVhY3RpdmVGb3JtOiBGb3JtR3JvdXA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB0aGlzLm5hdGl2ZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pZClcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcblxuICAgIGlmICghdGhpcy52YWx1ZSkgdGhpcy52YWx1ZSA9IHRoaXMuaWQ7XG5cbiAgICBjb25zdCBjb250cm9sT2JqZWN0ID0ge307XG4gICAgY29udHJvbE9iamVjdFt0aGlzLmlkXSA9IG5ldyBGb3JtQ29udHJvbCh0aGlzLmNoZWNrZWQpO1xuICAgIHRoaXMucmVhY3RpdmVGb3JtID0gbmV3IEZvcm1Hcm91cChjb250cm9sT2JqZWN0KTtcbiAgfVxuXG4gIHRvZ2dsZUl0ZW1WaXNpYmlsaXR5KHN0YXRlPzogYm9vbGVhbikge1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmlzSGlkZGVuID0gIXRoaXMuaXNIaWRkZW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNIaWRkZW4gPSBzdGF0ZTtcbiAgICB9XG4gIH1cblxuICBzZXRDaGVja2VkKHN0YXRlPzogYm9vbGVhbikge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSBzdGF0ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVhY3RpdmVGb3JtLmNvbnRyb2xzW3RoaXMuaWRdLnNldFZhbHVlKHRoaXMuY2hlY2tlZCk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRUb3AodG9wOiBudW1iZXIpIHtcbiAgICB0aGlzLmZyb21Ub3AgPSBgY2FsYygke3RvcCAqIDEwMH0lIC0gJHt0b3B9cHgpYDtcbiAgfVxuXG4gIHNldFdpZHRoKHdpZHRoOiBudW1iZXIpIHtcbiAgICB0aGlzLml0ZW1XaWR0aCA9IGAke3dpZHRofXB4YDtcbiAgfVxuXG4gIG1vdmVUb0Ryb3Bkb3duKCkge1xuICAgIHRoaXMuaXNJbkRyb3Bkb3duID0gdHJ1ZTtcbiAgfVxuXG4gIHJlbW92ZUZyb21Ecm9wZG93bigpIHtcbiAgICB0aGlzLml0ZW1XaWR0aCA9ICdhdXRvJztcbiAgICB0aGlzLmlzSW5Ecm9wZG93biA9IGZhbHNlO1xuICB9XG5cbiAgcmVzZXRWaXNpYmlsaXR5KCkge1xuICAgIHRoaXMucmVtb3ZlRnJvbURyb3Bkb3duKCk7XG4gICAgdGhpcy50b2dnbGVJdGVtVmlzaWJpbGl0eShmYWxzZSk7XG4gIH1cblxuICBvbkNsaWNrKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMuYnV0dG9uQ2xpY2tlZC5lbWl0KHRoaXMpO1xuICB9XG59XG4iXX0=