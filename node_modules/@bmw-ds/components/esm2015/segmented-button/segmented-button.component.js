var SegmentedButtonComponent_1;
import { __decorate } from "tslib";
import { AfterViewInit, Component, ContentChildren, ViewChild, OnInit, QueryList, ViewContainerRef, ChangeDetectorRef, EventEmitter, Output, ElementRef, ViewRef, TemplateRef, HostListener, forwardRef, Input, EmbeddedViewRef, OnDestroy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { SegmentedButtonItemComponent } from './segmented-button-item/segmented-button-item.component';
let SegmentedButtonComponent = SegmentedButtonComponent_1 = class SegmentedButtonComponent {
    constructor(cd, elementRef) {
        this.cd = cd;
        this.elementRef = elementRef;
        this.onDestroy$ = new Subject();
        this.uncheckable = true;
        this.updateEvent = new EventEmitter();
        this.isMenuClosed = true;
        this.buttonItemClickSubscriptions = [];
        this.visibleElements = [];
        this.hiddenElements = [];
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    onResize() {
        if (this.previousWidth >= this.elementRef.nativeElement.getBoundingClientRect().width) {
            //shrinking
            this._hideElement();
        }
        else {
            //expanding
            this._showElement();
        }
        this.previousWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                if (!this.isMenuClosed) {
                    this.setNextItemAsFocused();
                }
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                if (!this.isMenuClosed) {
                    this.setPreviousItemAsFocused();
                }
                event.preventDefault();
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
                if (!this.isMenuClosed) {
                    const focusedItem = this.hiddenElements.find(el => el.item.focused === true);
                    if (!focusedItem.item.disabled) {
                        this.selectButton(focusedItem.item);
                        focusedItem.item.focused = false;
                        this.childItemsComponent
                            .toArray()
                            .find(element => element.value === this.value)
                            .button.focus();
                    }
                }
                event.preventDefault();
                break;
            case 'Space':
            case 32:
                if (event.target === this.elementRef.nativeElement.querySelector('.extension-menu')) {
                    this.toggleMenu();
                    event.preventDefault();
                }
                break;
            case 'Tab':
            case 9:
                if (!this.isMenuClosed) {
                    this.toggleMenu();
                }
                break;
        }
    }
    ngOnInit() {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
        if (!this.name)
            this.name = 'segmented-' + this.id;
        this.previousWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
    }
    ngAfterViewInit() {
        if (!this.visibleItemsContainer)
            return;
        this.createView();
        this.childItemsComponent.changes.subscribe((buttonItems) => {
            this.destroyView();
            this.createView();
            if (buttonItems.last.checked) {
                this.clearOtherChildren(buttonItems.last);
                this._onChange(buttonItems.last.value);
                this.updateEvent.emit(this);
            }
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    createView() {
        this.visibleElements = this.childItemsComponent.toArray().map((element, index) => {
            element.resetVisibility();
            const view = this.visibleItemsContainer.createEmbeddedView(element.sample);
            this.buttonItemClickSubscriptions.push(element.buttonClicked.subscribe(() => {
                this.selectButton(element);
                if (!this.isMenuClosed) {
                    this.toggleMenu();
                }
            }));
            if (element.checked) {
                this.value = element.value;
            }
            if (this.disabled) {
                element.disabled = this.disabled;
            }
            return {
                view: view,
                order: index,
                item: element
            };
        });
        this.dots = this.visibleItemsContainer.createEmbeddedView(this.dropdownButton);
        this.cd.detectChanges();
        if (this._isOverflow) {
            this.showDots = true;
            this._hideElement();
        }
    }
    destroyView() {
        this.buttonItemClickSubscriptions.forEach(buttonClickSubscription => {
            buttonClickSubscription.unsubscribe();
        });
        this.visibleItemsContainer.clear();
        this.hiddenElements = [];
    }
    resetFocusedItem() {
        this.hiddenElements.forEach(el => (el.item.focused = false));
    }
    setPreviousItemAsFocused() {
        if (!this.isMenuClosed &&
            this.hiddenElements.length > 0 &&
            this.hiddenElements.filter(el => !el.item.disabled).length > 0) {
            let focusedItemIndex = this.hiddenElements.findIndex(el => el.item.focused === true);
            this.resetFocusedItem();
            if (focusedItemIndex !== -1 && focusedItemIndex !== 0) {
                focusedItemIndex = focusedItemIndex - 1;
            }
            else {
                focusedItemIndex = this.hiddenElements.length - 1;
            }
            this.hiddenElements[focusedItemIndex].item.focused = true;
            if (this.hiddenElements[focusedItemIndex].item.disabled) {
                this.setPreviousItemAsFocused();
            }
        }
    }
    setNextItemAsFocused() {
        if (!this.isMenuClosed &&
            this.hiddenElements.length > 0 &&
            this.hiddenElements.filter(el => !el.item.disabled).length > 0) {
            let focusedItemIndex = this.hiddenElements.findIndex(el => el.item.focused === true);
            this.resetFocusedItem();
            if (focusedItemIndex !== -1 && focusedItemIndex !== this.hiddenElements.length - 1) {
                focusedItemIndex = focusedItemIndex + 1;
            }
            else {
                focusedItemIndex = 0;
            }
            this.hiddenElements[focusedItemIndex].item.focused = true;
            if (this.hiddenElements[focusedItemIndex].item.disabled) {
                this.setNextItemAsFocused();
            }
        }
    }
    showSelected(value) {
        const checkedEl = this.hiddenElements.find(el => {
            return el.item.value === value;
        });
        if (checkedEl) {
            checkedEl.item.removeFromDropdown();
            checkedEl.item.toggleItemVisibility(this.isMenuClosed);
            this.hiddenElements = this.hiddenElements.filter(el => el.item.value !== this.value);
            this.visibleElements.push(checkedEl);
            this.sortArrays();
            this.positionOverflowedItems();
            this.cd.detectChanges();
            this._hideElement();
        }
    }
    _showElement() {
        if (this.hiddenElements.length) {
            const el = this.hiddenElements[0];
            el.item.removeFromDropdown();
            el.item.toggleItemVisibility(this.isMenuClosed);
            this.hiddenElements.splice(0, 1);
            this.visibleElements.push(el);
            this.sortArrays();
            el.view.detectChanges();
            if (this._isOverflow) {
                this._hideElement();
            }
            else {
                this._showElement();
            }
        }
        else {
            this.showDots = false;
        }
    }
    _hideElement() {
        if (!this._isOverflow || this.visibleElements.length < 2) {
            return;
        }
        let index = this.visibleElements.length - 1;
        if (this.visibleElements[index].item.value === this.value) {
            index = index - 1;
        }
        const el = this.visibleElements[index];
        el.item.moveToDropdown();
        el.item.toggleItemVisibility(this.isMenuClosed);
        this.visibleElements.splice(index, 1);
        this.hiddenElements.unshift(el);
        this.sortArrays();
        this.positionOverflowedItems();
        this.cd.detectChanges();
        this._hideElement();
    }
    sortArrays() {
        this.hiddenElements.sort((a, b) => a.order - b.order);
        this.visibleElements.sort((a, b) => a.order - b.order);
    }
    selectButton(buttonItem) {
        let isValueChanged = false;
        if (this.uncheckable) {
            this.value = !buttonItem.checked ? buttonItem.value : null;
            isValueChanged = true;
        }
        else {
            if (this.value !== buttonItem.value) {
                this.value = buttonItem.value;
                isValueChanged = true;
            }
        }
        if (isValueChanged) {
            this._toggleCheckedChildren(buttonItem);
            this.showSelected(this.value);
            this._onChange(this.value);
        }
        else {
            buttonItem.button.checked = true;
        }
    }
    toggleMenu(state) {
        if (!this.disabled) {
            state !== undefined ? (this.isMenuClosed = state) : (this.isMenuClosed = !this.isMenuClosed);
            this.hiddenElements.forEach(el => {
                el.item.toggleItemVisibility(this.isMenuClosed);
                el.view.detectChanges();
            });
        }
    }
    getMaxElWidthInDropdown() {
        if (this.hiddenElements.length) {
            this.toggleMenu(false);
            this.maxElWidthInDropdown = this.hiddenElements[0].view.rootNodes[0].getBoundingClientRect().width;
            this.hiddenElements.forEach(el => {
                const elWidth = el.view.rootNodes[0].getBoundingClientRect().width;
                if (elWidth > this.maxElWidthInDropdown) {
                    this.maxElWidthInDropdown = elWidth;
                }
            });
            this.toggleMenu(true);
        }
    }
    positionOverflowedItems() {
        this.getMaxElWidthInDropdown();
        this.hiddenElements.forEach((el, index) => {
            el.item.setTop(index + 1);
            el.item.setWidth(this.maxElWidthInDropdown);
        });
        this.cd.detectChanges();
    }
    get _isOverflow() {
        this._segmentButtonHeight = this.segmentButton.nativeElement.getBoundingClientRect().height.toFixed(0);
        this._componentHeight = this.labelWrapper.nativeElement.getBoundingClientRect().height.toFixed(0);
        if (this._segmentButtonHeight !== this._componentHeight) {
            this.showDots = true;
            return true;
        }
        return false;
    }
    _toggleCheckedChildren(item) {
        if (this.childItemsComponent) {
            this.childItemsComponent.toArray().forEach(element => {
                if (element === item) {
                    element.setChecked(this.uncheckable ? !element.checked : true);
                    this.updateEvent.emit(this);
                }
                else {
                    element.setChecked(false);
                }
            });
        }
    }
    clearOtherChildren(item) {
        if (this.childItemsComponent) {
            this.childItemsComponent.toArray().forEach(element => {
                if (element !== item) {
                    element.setChecked(false);
                }
            });
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    writeValue(value) {
        setTimeout(() => {
            const initialItem = this.childItemsComponent.toArray().find(element => element.value === this.value);
            const itemToSelect = this.childItemsComponent.toArray().find(element => element.value === value);
            this.value = value;
            if (initialItem) {
                initialItem.checked = false;
            }
            if (itemToSelect) {
                itemToSelect.checked = true;
            }
        });
    }
    setDisabledState() {
        this.childItemsComponent.forEach(el => {
            el.disabled = true;
        });
    }
};
SegmentedButtonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
__decorate([
    ViewChild('labelWrapper')
], SegmentedButtonComponent.prototype, "labelWrapper", void 0);
__decorate([
    ViewChild('segmentButton')
], SegmentedButtonComponent.prototype, "segmentButton", void 0);
__decorate([
    ViewChild('dropdownButton', { read: TemplateRef })
], SegmentedButtonComponent.prototype, "dropdownButton", void 0);
__decorate([
    ViewChild('visibleItemsContainer', { read: ViewContainerRef })
], SegmentedButtonComponent.prototype, "visibleItemsContainer", void 0);
__decorate([
    ContentChildren(SegmentedButtonItemComponent)
], SegmentedButtonComponent.prototype, "childItemsComponent", void 0);
__decorate([
    Input()
], SegmentedButtonComponent.prototype, "id", void 0);
__decorate([
    Input()
], SegmentedButtonComponent.prototype, "name", void 0);
__decorate([
    Input()
], SegmentedButtonComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], SegmentedButtonComponent.prototype, "uncheckable", void 0);
__decorate([
    Output()
], SegmentedButtonComponent.prototype, "updateEvent", void 0);
__decorate([
    HostListener('window:resize')
], SegmentedButtonComponent.prototype, "onResize", null);
__decorate([
    HostListener('keydown', ['$event'])
], SegmentedButtonComponent.prototype, "onKeydown", null);
SegmentedButtonComponent = SegmentedButtonComponent_1 = __decorate([
    Component({
        selector: 'bmw-segmented-button',
        template: "<div #labelWrapper class=\"label-wrapper\">\n  <div #segmentButton class=\"segmented-button\">\n    <ng-container #visibleItemsContainer> </ng-container>\n  </div>\n</div>\n\n<ng-template #dropdownButton>\n  <div\n    #extensionMenu\n    class=\"extension-menu\"\n    [class.disabled]=\"disabled\"\n    [class.selected]=\"!isMenuClosed\"\n    (click)=\"toggleMenu()\"\n    [class.show]=\"showDots\"\n    tabindex=\"0\"\n  ></div>\n</ng-template>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => SegmentedButtonComponent_1),
                multi: true
            }
        ],
        styles: [".label-wrapper{height:2rem}.show{display:block!important}.segmented-button{display:inline-flex;min-height:2rem;padding-right:var(--segmanted-button__wrapper__padding-right);min-width:var(--segmented-button__item__min-width);flex-wrap:wrap;position:relative}.segmented-button .extension-menu{position:absolute;right:0;display:none;white-space:nowrap;margin-left:-1px;background-color:var(--toggle-button__default__background-color);cursor:pointer;border:solid 1px var(--toggle-button__secondary__border__color)}.segmented-button ::ng-deep bmw-segmented-button-item:nth-child(2):last-child label span span{display:block;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.segmented-button .extension-menu.disabled{opacity:.7;border:solid 1px var(--color-bmw-basic3-shade2);background-color:var(--color-bmw-basic1-shade3)}.segmented-button .extension-menu.disabled:hover{cursor:no-drop;border:solid 1px var(--color-bmw-basic3-shade2);background-color:var(--color-bmw-basic1-shade3)}.segmented-button .extension-menu.selected{border:solid 1px var(--color-bmw-basic3-shade2);background-color:var(--color-bmw-basic1-shade2)}.segmented-button .extension-menu:after{display:inline-block;font-size:var(--segmented-button__dots__font-size);line-height:var(--segmented-button__dots__font-size);padding:var(--segmented-button__dots__padding-vertical) var(--card-tabs__label__icon__padding);font-family:iwp;color:var(--card-tabs__labels__default__color);content:'\\ea22'}.segmented-button .extension-menu:hover{border:solid 1px var(--color-bmw-basic1-shade2);background-color:var(--color-bmw-basic1-shade2)}.segmented-button .extension-menu:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}.segmented-button .extension-menu .dropdown{position:absolute;top:calc(100% + 2px);right:-1px;display:none}.segmented-button .extension-menu .dropdown ::ng-deep bmw-segmented-button-item{z-index:-1;margin-left:0;margin-top:-1px;white-space:nowrap;display:block}@media screen and (max-width:37.49rem){.label-wrapper{height:2.5rem}}"]
    })
], SegmentedButtonComponent);
export { SegmentedButtonComponent };
//# sourceMappingURL=data:application/json;base64,