import { __decorate } from "tslib";
import { Component, OnInit, Input, Output, EventEmitter, HostBinding, OnChanges, HostListener, ElementRef } from '@angular/core';
const SUPPORTED_TYPES = ['info', 'success', 'warning', 'error'];
let InlineMessageComponent = class InlineMessageComponent {
    constructor(_el) {
        this._el = _el;
        this._type = '';
        this._messages = [];
        this._showCloseButton = true;
        this.closeEvent = new EventEmitter();
        this.closed = false;
    }
    get type() {
        return this._type;
    }
    get messages() {
        return this._messages;
    }
    get showCloseButton() {
        return this._showCloseButton;
    }
    set type(value) {
        if (SUPPORTED_TYPES.indexOf(value) === -1) {
            console.warn(`Invalid or unsupported type: ${value}`);
            this._type = 'info';
        }
        else {
            this._type = value;
        }
    }
    set messages(value) {
        if (typeof value === 'string') {
            this._messages = [value];
        }
        else {
            this._messages = value;
        }
    }
    set showCloseButton(value) {
        if (value === false) {
            this._showCloseButton = value;
        }
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                if (event.target === this._el.nativeElement.querySelector('.close')) {
                    this.close();
                    event.preventDefault();
                }
                break;
        }
    }
    ngOnInit() {
        this.checkProperties();
    }
    ngOnChanges() {
        this.checkProperties();
    }
    checkProperties() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    }
    close() {
        this.closeEvent.emit();
        this.closed = true;
    }
};
InlineMessageComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], InlineMessageComponent.prototype, "type", null);
__decorate([
    Input()
], InlineMessageComponent.prototype, "messages", null);
__decorate([
    Input()
], InlineMessageComponent.prototype, "showCloseButton", null);
__decorate([
    Input()
], InlineMessageComponent.prototype, "groupHeadline", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], InlineMessageComponent.prototype, "id", void 0);
__decorate([
    Output()
], InlineMessageComponent.prototype, "closeEvent", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], InlineMessageComponent.prototype, "onKeydown", null);
InlineMessageComponent = __decorate([
    Component({
        selector: 'bmw-inline-message',
        template: "<div *ngIf=\"!closed\">\n  <div class=\"background\" [ngClass]=\"[type]\">\n    <div class=\"content bmw-component-text \" role=\"alert\" [class.disable-close]=\"!showCloseButton\">\n      <i class=\"iwp-icon- icon\"></i>\n      <p *ngIf=\"messages.length === 0\">\n        <ng-content></ng-content>\n      </p>\n      <p *ngIf=\"messages.length === 1\">\n        {{ messages[0] }}\n      </p>\n      <div *ngIf=\"messages.length > 1\">\n        <p class=\"multimessage__type\">{{ groupHeadline || type }} ({{ messages.length }})</p>\n        <ul>\n          <li *ngFor=\"let message of messages\">{{ message }}</li>\n        </ul>\n      </div>\n      <ng-container *ngIf=\"showCloseButton\">\n        <i class=\"iwp-icon- close\" (click)=\"close()\" tabindex=\"0\" aria-label=\"Close notification\"></i>\n      </ng-container>\n    </div>\n  </div>\n</div>\n",
        styles: ["div.background{border:2px solid var(--inline-message__default__border-color);background-color:#fff;box-sizing:border-box;position:relative}div.background div.content{position:relative;height:100%;background-color:var(--inline-message__default__background-color)}div.background div.content p{padding:calc(var(--inline-message__default__padding) - 2px);padding-left:calc(2 * var(--inline-message__icon__padding) - 2px + var(--inline-message__icon__font-size));margin:0;overflow:hidden;text-overflow:ellipsis}div.background div.content:not(.disable-close) p{padding-right:calc(2 * var(--inline-message__icon__padding) - 2px + var(--inline-message__close__font-size))}div.background div.content i.icon{position:absolute;top:calc(var(--inline-message__default__padding) + var(--typography__component-text__line-height)/ 2 - var(--inline-message__icon__font-size)/ 2 - 2px);left:calc(var(--inline-message__icon__padding) - 2px);font-size:var(--inline-message__icon__font-size);line-height:var(--inline-message__icon__font-size)}div.background div.content i.icon::before{content:'\\e802';color:var(--inline-message__default__border-color)}div.background div.content i.close::after{position:absolute;content:'\\e93e';font-size:var(--inline-message__close__font-size);padding:calc(var(--inline-message__close__padding) - 2px);top:0;right:0;cursor:pointer}div.background div.content i.close:focus::after{outline:solid 1px;outline-color:var(--color-bmw-highlight)}div.background div.content .multimessage__type{text-transform:capitalize;font-weight:700}div.background div.content ul{margin:0;padding-left:calc(2 * var(--inline-message__icon__padding) - 2px + var(--inline-message__icon__font-size));padding-bottom:calc(var(--inline-message__default__padding) - 2px);padding-right:calc(var(--inline-message__default__padding) - 2px);list-style-position:inside}div.background div.content ul li{overflow:hidden;text-overflow:ellipsis}div.background.success{border-color:var(--inline-message__success__border-color)}div.background.success div.content{background-color:var(--inline-message__success__background-color)}div.background.success .content i.icon::before{content:'\\e9d8';color:var(--inline-message__success__border-color)}div.background.warning{border-color:var(--inline-message__warning__border-color)}div.background.warning div.content{background-color:var(--inline-message__warning__background-color)}div.background.warning .content i.icon::before{content:'\\e803';color:var(--inline-message__warning__border-color)}div.background.error{border-color:var(--inline-message__error__border-color)}div.background.error div.content{background-color:var(--inline-message__error__background-color)}div.background.error .content i.icon::before{content:'\\e801';color:var(--inline-message__error__border-color)}"]
    })
], InlineMessageComponent);
export { InlineMessageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiaW5saW5lLW1lc3NhZ2UvaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQU9oRSxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQXNEakMsWUFBb0IsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFyRHpCLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBK0NsQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUVyQyxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBRXVCLENBQUM7SUFqRHZDLElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDL0IsQ0FBQztJQUdELElBQUksSUFBSSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7U0FDckI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUdELElBQUksUUFBUSxDQUFDLEtBQXdCO1FBQ25DLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBR0QsSUFBSSxlQUFlLENBQUMsS0FBYztRQUNoQyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztTQUMvQjtJQUNILENBQUM7SUFnQkQsU0FBUyxDQUFDLEtBQW9CO1FBQzVCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUN4QyxRQUFRLEdBQUcsRUFBRTtZQUNYLEtBQUssT0FBTyxDQUFDO1lBQ2IsS0FBSyxhQUFhLENBQUM7WUFDbkIsS0FBSyxFQUFFLENBQUM7WUFDUixLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssRUFBRTtnQkFDTCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUNuRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUN4QjtnQkFDRCxNQUFNO1NBQ1Q7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2lCQUNwQixRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUNaLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFDRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0NBQ0YsQ0FBQTs7WUF0QzBCLFVBQVU7O0FBcENuQztJQURDLEtBQUssRUFBRTtrREFRUDtBQUdEO0lBREMsS0FBSyxFQUFFO3NEQU9QO0FBR0Q7SUFEQyxLQUFLLEVBQUU7NkRBS1A7QUFFUTtJQUFSLEtBQUssRUFBRTs2REFBdUI7QUFJL0I7SUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ3RCLEtBQUssRUFBRTtrREFDRztBQUdYO0lBREMsTUFBTSxFQUFFOzBEQUM0QjtBQU9yQztJQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt1REFlbkM7QUF2RVUsc0JBQXNCO0lBTGxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsdzJCQUE4Qzs7S0FFL0MsQ0FBQztHQUNXLHNCQUFzQixDQTRGbEM7U0E1Rlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkluaXQsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIE9uQ2hhbmdlcyxcbiAgSG9zdExpc3RlbmVyLFxuICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBTVVBQT1JURURfVFlQRVMgPSBbJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJ107XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Jtdy1pbmxpbmUtbWVzc2FnZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbmxpbmUtbWVzc2FnZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lubGluZS1tZXNzYWdlLmNvbXBvbmVudC5sZXNzJ11cbn0pXG5leHBvcnQgY2xhc3MgSW5saW5lTWVzc2FnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgcHJvdGVjdGVkIF90eXBlID0gJyc7XG4gIHByb3RlY3RlZCBfbWVzc2FnZXMgPSBbXTtcbiAgcHJvdGVjdGVkIF9zaG93Q2xvc2VCdXR0b24gPSB0cnVlO1xuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgZ2V0IG1lc3NhZ2VzKCkge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcztcbiAgfVxuXG4gIGdldCBzaG93Q2xvc2VCdXR0b24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dDbG9zZUJ1dHRvbjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAoU1VQUE9SVEVEX1RZUEVTLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIHR5cGU6ICR7dmFsdWV9YCk7XG4gICAgICB0aGlzLl90eXBlID0gJ2luZm8nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl90eXBlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IG1lc3NhZ2VzKHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9tZXNzYWdlcyA9IFt2YWx1ZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX21lc3NhZ2VzID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHNob3dDbG9zZUJ1dHRvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuX3Nob3dDbG9zZUJ1dHRvbiA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIGdyb3VwSGVhZGxpbmU6IHN0cmluZztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICBASW5wdXQoKVxuICBpZDogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKVxuICBjbG9zZUV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY2xvc2VkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmNvZGUgfHwgZXZlbnQua2V5Q29kZTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgY2FzZSAnTnVtcGFkRW50ZXInOlxuICAgICAgY2FzZSAxMzpcbiAgICAgIGNhc2UgJ1NwYWNlJzpcbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNsb3NlJykpIHtcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNoZWNrUHJvcGVydGllcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5jaGVja1Byb3BlcnRpZXMoKTtcbiAgfVxuXG4gIGNoZWNrUHJvcGVydGllcygpIHtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcbiAgICB9XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5jbG9zZUV2ZW50LmVtaXQoKTtcbiAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gIH1cbn1cbiJdfQ==