var BmwInputDirective_1;
import { __decorate, __param } from "tslib";
import { InputfieldComponent } from './inputfield.component';
import { BaseInput } from './base-input';
import { Directive, HostBinding, Input, ElementRef, AfterViewInit, Output, EventEmitter, Host, Optional } from '@angular/core';
const SUPPORTED_TYPES = ['text', 'file', 'number', 'password'];
let BmwInputDirective = BmwInputDirective_1 = class BmwInputDirective {
    constructor(_el, _inputField) {
        this._el = _el;
        this._inputField = _inputField;
        this.classBmwInput = true;
        this._type = 'text';
        this.disableToggle = new EventEmitter();
    }
    // when we bind to attr.disabled we need to set it to 'disabled'
    // or remove it with null because disabled="false" is not the right way
    // to enable the input again, especially the :disabled pseudo selector in css
    // would still be in effect
    get isDisabled() {
        return this.disabled ? 'disabled' : null;
    }
    set disabled(value) {
        this._disabled = value;
        this.disableToggle.emit(value);
    }
    get disabled() {
        return this._inputField && this._inputField.disabled ? true : this._disabled;
    }
    set withIcon(value) {
        if (value) {
            this._el.nativeElement.classList.add('with-icon');
        }
        else {
            this._el.nativeElement.classList.remove('with-icon');
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        if (SUPPORTED_TYPES.indexOf(value) === -1) {
            throw new Error(`Invalid or unsupported type: ${value}`);
        }
        this._type = value;
    }
    ngAfterViewInit() {
        const list = Array.from(this._el.nativeElement.classList);
        this.placeholder = this._el.nativeElement.placeholder;
        Promise.resolve().then(() => {
            this.classes = list
                .map((item) => {
                if (item.match(/bmw__grid__cell.*/)) {
                    return item;
                }
                return null;
            })
                .filter(item => item);
        });
    }
};
BmwInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: InputfieldComponent, decorators: [{ type: Optional }, { type: Host }] }
];
__decorate([
    HostBinding('class.bmw-input')
], BmwInputDirective.prototype, "classBmwInput", void 0);
__decorate([
    HostBinding('attr.disabled')
], BmwInputDirective.prototype, "isDisabled", null);
__decorate([
    Input()
], BmwInputDirective.prototype, "disabled", null);
__decorate([
    HostBinding('tabindex')
], BmwInputDirective.prototype, "tabIndex", void 0);
__decorate([
    Output()
], BmwInputDirective.prototype, "disableToggle", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], BmwInputDirective.prototype, "id", null);
__decorate([
    Input()
], BmwInputDirective.prototype, "type", null);
BmwInputDirective = BmwInputDirective_1 = __decorate([
    Directive({
        selector: 'input[bmwInput], textarea[bmwInput]',
        providers: [
            {
                provide: BaseInput,
                useExisting: BmwInputDirective_1
            }
        ]
    }),
    __param(1, Optional()), __param(1, Host())
], BmwInputDirective);
export { BmwInputDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm13LWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImlucHV0ZmllbGQvYm13LWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLFVBQVUsRUFDVixhQUFhLEVBQ2IsTUFBTSxFQUNOLFlBQVksRUFDWixJQUFJLEVBQ0osUUFBUSxFQUNULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE1BQU0sZUFBZSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFXL0QsSUFBYSxpQkFBaUIseUJBQTlCLE1BQWEsaUJBQWlCO0lBSTVCLFlBQW9CLEdBQWUsRUFBOEIsV0FBZ0M7UUFBN0UsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUE4QixnQkFBVyxHQUFYLFdBQVcsQ0FBcUI7UUFHakcsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUF3QlgsVUFBSyxHQUFHLE1BQU0sQ0FBQztRQWV6QixrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUExQ3dELENBQUM7SUFLckcsZ0VBQWdFO0lBQ2hFLHVFQUF1RTtJQUN2RSw2RUFBNkU7SUFDN0UsMkJBQTJCO0lBRTNCLElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDM0MsQ0FBQztJQUdELElBQUksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENB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bmVudCB9IGZyb20gJy4vaW5wdXRmaWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmFzZUlucHV0IH0gZnJvbSAnLi9iYXNlLWlucHV0JztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBFbGVtZW50UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdCxcbiAgT3B0aW9uYWxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IFNVUFBPUlRFRF9UWVBFUyA9IFsndGV4dCcsICdmaWxlJywgJ251bWJlcicsICdwYXNzd29yZCddO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtibXdJbnB1dF0sIHRleHRhcmVhW2Jtd0lucHV0XScsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEJhc2VJbnB1dCxcbiAgICAgIHVzZUV4aXN0aW5nOiBCbXdJbnB1dERpcmVjdGl2ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBCbXdJbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEJhc2VJbnB1dCB7XG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuO1xuICBwdWJsaWMgY2xhc3Nlczogc3RyaW5nW107XG4gIHB1YmxpYyBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZiwgQE9wdGlvbmFsKCkgQEhvc3QoKSBwcml2YXRlIF9pbnB1dEZpZWxkOiBJbnB1dGZpZWxkQ29tcG9uZW50KSB7fVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYm13LWlucHV0JylcbiAgY2xhc3NCbXdJbnB1dCA9IHRydWU7XG5cbiAgLy8gd2hlbiB3ZSBiaW5kIHRvIGF0dHIuZGlzYWJsZWQgd2UgbmVlZCB0byBzZXQgaXQgdG8gJ2Rpc2FibGVkJ1xuICAvLyBvciByZW1vdmUgaXQgd2l0aCBudWxsIGJlY2F1c2UgZGlzYWJsZWQ9XCJmYWxzZVwiIGlzIG5vdCB0aGUgcmlnaHQgd2F5XG4gIC8vIHRvIGVuYWJsZSB0aGUgaW5wdXQgYWdhaW4sIGVzcGVjaWFsbHkgdGhlIDpkaXNhYmxlZCBwc2V1ZG8gc2VsZWN0b3IgaW4gY3NzXG4gIC8vIHdvdWxkIHN0aWxsIGJlIGluIGVmZmVjdFxuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGlzYWJsZWQnKVxuICBnZXQgaXNEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiBudWxsO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICB0aGlzLmRpc2FibGVUb2dnbGUuZW1pdCh2YWx1ZSk7XG4gIH1cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dEZpZWxkICYmIHRoaXMuX2lucHV0RmllbGQuZGlzYWJsZWQgPyB0cnVlIDogdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ3RhYmluZGV4JylcbiAgdGFiSW5kZXg6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgX2lkOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfdHlwZSA9ICd0ZXh0JztcblxuICBzZXQgd2l0aEljb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnd2l0aC1pY29uJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnd2l0aC1pY29uJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIEBPdXRwdXQoKVxuICBkaXNhYmxlVG9nZ2xlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gIEBJbnB1dCgpXG4gIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHR5cGUodmFsdWU6IHN0cmluZykge1xuICAgIGlmIChTVVBQT1JURURfVFlQRVMuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3IgdW5zdXBwb3J0ZWQgdHlwZTogJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgdGhpcy5fdHlwZSA9IHZhbHVlO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IGxpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlcjtcblxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jbGFzc2VzID0gbGlzdFxuICAgICAgICAubWFwKChpdGVtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAoaXRlbS5tYXRjaCgvYm13X19ncmlkX19jZWxsLiovKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==