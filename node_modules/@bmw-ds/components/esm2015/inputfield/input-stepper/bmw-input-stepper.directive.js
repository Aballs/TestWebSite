import { __decorate } from "tslib";
import { Directive, ElementRef, AfterViewInit, Renderer2, OnDestroy, HostListener, HostBinding } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
let BmwInputStepperDirective = class BmwInputStepperDirective {
    constructor(_el, _renderer) {
        this._el = _el;
        this._renderer = _renderer;
        this.destroy$ = new Subject();
    }
    onKeyDown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                this.stepDown();
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                this.stepUp();
                event.preventDefault();
                break;
        }
    }
    ngAfterViewInit() {
        const parent = this._renderer.parentNode(this._el.nativeElement);
        this.increaseBtn = this._createButton('increase');
        this.increaseListener = this._renderer.listen(this.increaseBtn, 'click', this.stepUp.bind(this));
        const keydownOnIncreaseButton$ = fromEvent(this.increaseBtn, 'keydown').pipe(takeUntil(this.destroy$));
        this.decreaseBtn = this._createButton('decrease');
        this.decreaseListener = this._renderer.listen(this.decreaseBtn, 'click', this.stepDown.bind(this));
        const keydownOnDecreaseButton$ = fromEvent(this.decreaseBtn, 'keydown').pipe(takeUntil(this.destroy$));
        keydownOnIncreaseButton$.subscribe((event) => {
            if (event.code === 'Enter' || event.keyCode === 13) {
                this.stepUp();
                event.preventDefault();
            }
        });
        keydownOnDecreaseButton$.subscribe((event) => {
            if (event.code === 'Enter' || event.keyCode === 13) {
                this.stepDown();
                event.preventDefault();
            }
        });
        const container = this._createContainer();
        this._renderer.appendChild(container, this.increaseBtn);
        this._renderer.appendChild(container, this.decreaseBtn);
        this._renderer.appendChild(parent, container);
    }
    _createContainer() {
        const container = this._renderer.createElement('div');
        this._renderer.addClass(container, 'stepper-controls');
        return container;
    }
    _createButton(btnName) {
        const spanElement = this._renderer.createElement('span');
        this._renderer.addClass(spanElement, 'stepper-button');
        this._renderer.setAttribute(spanElement, 'tabindex', this._el.nativeElement.disabled ? '-1' : '0');
        this._renderer.addClass(spanElement, btnName);
        return spanElement;
    }
    ngOnDestroy() {
        this.increaseListener();
        this.decreaseListener();
    }
    stepUp() {
        if (!this._el.nativeElement.disabled) {
            this._el.nativeElement.stepUp();
            this._el.nativeElement.dispatchEvent(new Event('input', { bubbles: true }));
        }
    }
    stepDown() {
        if (!this._el.nativeElement.disabled) {
            this._el.nativeElement.stepDown();
            this._el.nativeElement.dispatchEvent(new Event('input', { bubbles: true }));
        }
    }
    destroy() {
        this.destroy$.next();
    }
};
BmwInputStepperDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    HostListener('keydown', ['$event'])
], BmwInputStepperDirective.prototype, "onKeyDown", null);
BmwInputStepperDirective = __decorate([
    Directive({
        selector: 'input[bmwInputStepper]'
    })
], BmwInputStepperDirective);
export { BmwInputStepperDirective };
//# sourceMappingURL=data:application/json;base64,