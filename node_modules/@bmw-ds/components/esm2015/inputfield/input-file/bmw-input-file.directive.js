import { __decorate, __param } from "tslib";
import { Directive, Renderer2, ElementRef, AfterViewInit, HostListener, OnChanges, Input, Injector, SimpleChanges, Optional } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NgControl, FormControl } from '@angular/forms';
let BmwInputFileDirective = class BmwInputFileDirective {
    constructor(injector, _renderer, _el, control) {
        this.injector = injector;
        this._renderer = _renderer;
        this._el = _el;
        this.control = control;
        this.destroy$ = new Subject();
        this.btnLabel = 'Browse';
    }
    onMouseOver() {
        this._renderer.addClass(this.browseBtn, 'active');
    }
    onMouseLeave() {
        this._renderer.removeClass(this.browseBtn, 'active');
    }
    onChange() {
        if (this._el.nativeElement.files.length) {
            const fileName = this._el.nativeElement.files[0].name;
            this._renderer.setAttribute(this.visibleInput, 'value', fileName);
        }
        else {
            this._renderer.setAttribute(this.visibleInput, 'value', '');
        }
        this.checkForRequired();
    }
    checkForRequired() {
        setTimeout(() => {
            const classList = this._el.nativeElement.classList;
            if (this._el.nativeElement.required && classList.contains('ng-invalid') && classList.contains('ng-touched')) {
                this.visibleInput.classList.add('ng-invalid');
                this.visibleInput.classList.add('ng-touched');
            }
            else {
                this.visibleInput.classList.remove('ng-invalid');
                this.visibleInput.classList.remove('ng-touched');
            }
        }, 0);
    }
    _getInputGridClass(el) {
        return el.classList.value.split(' ').find(className => className.includes('bmw__grid__cell'));
    }
    ngOnChanges(changes) {
        if (this.visibleInput && this.browseBtn) {
            this.checkForRequired();
            if (changes.btnLabel) {
                this.updateButtonLabel();
            }
        }
    }
    ngAfterViewInit() {
        if (!this._el.nativeElement.nextElementSibling)
            return;
        const gridClass = this._getInputGridClass(this._el.nativeElement);
        this._renderer.addClass(this._el.nativeElement.nextElementSibling, gridClass);
        this.browseBtn = this._el.nativeElement.nextElementSibling.querySelector('button');
        this.visibleInput = this._el.nativeElement.nextElementSibling.querySelector('input');
        if (this._el.nativeElement.attributes['aria-label']) {
            this.visibleInput.setAttribute('aria-label', this._el.nativeElement.attributes['aria-label'].value);
        }
        const clickOnButton$ = fromEvent(this.browseBtn, 'click').pipe(takeUntil(this.destroy$));
        const clickOnInput$ = fromEvent(this.visibleInput, 'click').pipe(takeUntil(this.destroy$));
        const keydownOnInput$ = fromEvent(this.visibleInput, 'keydown').pipe(takeUntil(this.destroy$));
        const ngControl = this.injector.get(NgControl, null);
        if (ngControl) {
            this.inputControl = ngControl.control;
        }
        clickOnButton$.subscribe(() => {
            var _a;
            this._el.nativeElement.click();
            (_a = this.inputControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
        });
        clickOnInput$.subscribe(() => {
            var _a;
            this._el.nativeElement.click();
            (_a = this.inputControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
        });
        keydownOnInput$.subscribe((event) => {
            var _a;
            if (event.code === 'Space' || event.keyCode === 32) {
                this._el.nativeElement.click();
                (_a = this.inputControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
            }
        });
        if (this.control) {
            this.control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
                if (!value) {
                    this.onChange();
                }
            });
        }
        this.checkForRequired();
        this.updateButtonLabel();
    }
    updateButtonLabel() {
        this.browseBtn.querySelector('div').innerText = this.btnLabel;
    }
    destroy() {
        this.destroy$.next();
    }
};
BmwInputFileDirective.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgControl, decorators: [{ type: Optional }] }
];
__decorate([
    Input()
], BmwInputFileDirective.prototype, "btnLabel", void 0);
__decorate([
    HostListener('mouseover')
], BmwInputFileDirective.prototype, "onMouseOver", null);
__decorate([
    HostListener('mouseleave')
], BmwInputFileDirective.prototype, "onMouseLeave", null);
__decorate([
    HostListener('change')
], BmwInputFileDirective.prototype, "onChange", null);
BmwInputFileDirective = __decorate([
    Directive({
        selector: 'input[bmwInputFile]'
    }),
    __param(3, Optional())
], BmwInputFileDirective);
export { BmwInputFileDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm13LWlucHV0LWZpbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiaW5wdXRmaWVsZC9pbnB1dC1maWxlL2Jtdy1pbnB1dC1maWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLGFBQWEsRUFDYixZQUFZLEVBQ1osU0FBUyxFQUNULEtBQUssRUFDTCxRQUFRLEVBQ1IsYUFBYSxFQUNiLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUt4RCxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQStCaEMsWUFDVSxRQUFrQixFQUNsQixTQUFvQixFQUNwQixHQUFlLEVBQ0gsT0FBa0I7UUFIOUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDSCxZQUFPLEdBQVAsT0FBTyxDQUFXO1FBN0JoQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUU5QixhQUFRLEdBQUcsUUFBUSxDQUFDO0lBNEIxQixDQUFDO0lBekJKLFdBQVc7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFHRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2RCxD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LHFCQUFxQjtJQUhqQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO0tBQ2hDLENBQUM7SUFvQ0csV0FBQSxRQUFRLEVBQUUsQ0FBQTtHQW5DRixxQkFBcUIsQ0F5SGpDO1NBekhZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgUmVuZGVyZXIyLFxuICBFbGVtZW50UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBIb3N0TGlzdGVuZXIsXG4gIE9uQ2hhbmdlcyxcbiAgSW5wdXQsXG4gIEluamVjdG9yLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZyb21FdmVudCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTmdDb250cm9sLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbYm13SW5wdXRGaWxlXSdcbn0pXG5leHBvcnQgY2xhc3MgQm13SW5wdXRGaWxlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcbiAgYnJvd3NlQnRuOiBIVE1MRWxlbWVudDtcbiAgdmlzaWJsZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIHByaXZhdGUgaW5wdXRDb250cm9sOiBGb3JtQ29udHJvbDtcblxuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBASW5wdXQoKSBidG5MYWJlbCA9ICdCcm93c2UnO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlb3ZlcicpXG4gIG9uTW91c2VPdmVyKCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHRoaXMuYnJvd3NlQnRuLCAnYWN0aXZlJyk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJylcbiAgb25Nb3VzZUxlYXZlKCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuYnJvd3NlQnRuLCAnYWN0aXZlJyk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjaGFuZ2UnKVxuICBvbkNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5fZWwubmF0aXZlRWxlbWVudC5maWxlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5maWxlc1swXS5uYW1lO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMudmlzaWJsZUlucHV0LCAndmFsdWUnLCBmaWxlTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLnZpc2libGVJbnB1dCwgJ3ZhbHVlJywgJycpO1xuICAgIH1cbiAgICB0aGlzLmNoZWNrRm9yUmVxdWlyZWQoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWYsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250cm9sOiBOZ0NvbnRyb2xcbiAgKSB7fVxuXG4gIGNoZWNrRm9yUmVxdWlyZWQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBjbGFzc0xpc3QgPSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdDtcbiAgICAgIGlmICh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnJlcXVpcmVkICYmIGNsYXNzTGlzdC5jb250YWlucygnbmctaW52YWxpZCcpICYmIGNsYXNzTGlzdC5jb250YWlucygnbmctdG91Y2hlZCcpKSB7XG4gICAgICAgIHRoaXMudmlzaWJsZUlucHV0LmNsYXNzTGlzdC5hZGQoJ25nLWludmFsaWQnKTtcbiAgICAgICAgdGhpcy52aXNpYmxlSW5wdXQuY2xhc3NMaXN0LmFkZCgnbmctdG91Y2hlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52aXNpYmxlSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnbmctaW52YWxpZCcpO1xuICAgICAgICB0aGlzLnZpc2libGVJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCduZy10b3VjaGVkJyk7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH1cblxuICBfZ2V0SW5wdXRHcmlkQ2xhc3MoZWw6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gZWwuY2xhc3NMaXN0LnZhbHVlLnNwbGl0KCcgJykuZmluZChjbGFzc05hbWUgPT4gY2xhc3NOYW1lLmluY2x1ZGVzKCdibXdfX2dyaWRfX2NlbGwnKSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmlzaWJsZUlucHV0ICYmIHRoaXMuYnJvd3NlQnRuKSB7XG4gICAgICB0aGlzLmNoZWNrRm9yUmVxdWlyZWQoKTtcblxuICAgICAgaWYgKGNoYW5nZXMuYnRuTGFiZWwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVCdXR0b25MYWJlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm47XG4gICAgY29uc3QgZ3JpZENsYXNzID0gdGhpcy5fZ2V0SW5wdXRHcmlkQ2xhc3ModGhpcy5fZWwubmF0aXZlRWxlbWVudCk7XG4gICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5fZWwubmF0aXZlRWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcsIGdyaWRDbGFzcyk7XG4gICAgdGhpcy5icm93c2VCdG4gPSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcbiAgICB0aGlzLnZpc2libGVJbnB1dCA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG5cbiAgICBpZiAodGhpcy5fZWwubmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzWydhcmlhLWxhYmVsJ10pIHtcbiAgICAgIHRoaXMudmlzaWJsZUlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlc1snYXJpYS1sYWJlbCddLnZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjbGlja09uQnV0dG9uJCA9IGZyb21FdmVudCh0aGlzLmJyb3dzZUJ0biwgJ2NsaWNrJykucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpO1xuICAgIGNvbnN0IGNsaWNrT25JbnB1dCQgPSBmcm9tRXZlbnQodGhpcy52aXNpYmxlSW5wdXQsICdjbGljaycpLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKTtcbiAgICBjb25zdCBrZXlkb3duT25JbnB1dCQgPSBmcm9tRXZlbnQodGhpcy52aXNpYmxlSW5wdXQsICdrZXlkb3duJykucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpO1xuXG4gICAgY29uc3QgbmdDb250cm9sOiBOZ0NvbnRyb2wgPSB0aGlzLmluamVjdG9yLmdldChOZ0NvbnRyb2wsIG51bGwpO1xuICAgIGlmIChuZ0NvbnRyb2wpIHtcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sID0gbmdDb250cm9sLmNvbnRyb2wgYXMgRm9ybUNvbnRyb2w7XG4gICAgfVxuXG4gICAgY2xpY2tPbkJ1dHRvbiQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xpY2soKTtcbiAgICAgIHRoaXMuaW5wdXRDb250cm9sPy5tYXJrQXNUb3VjaGVkKCk7XG4gICAgfSk7XG5cbiAgICBjbGlja09uSW5wdXQkLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsaWNrKCk7XG4gICAgICB0aGlzLmlucHV0Q29udHJvbD8ubWFya0FzVG91Y2hlZCgpO1xuICAgIH0pO1xuXG4gICAga2V5ZG93bk9uSW5wdXQkLnN1YnNjcmliZSgoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5jb2RlID09PSAnU3BhY2UnIHx8IGV2ZW50LmtleUNvZGUgPT09IDMyKSB7XG4gICAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgdGhpcy5pbnB1dENvbnRyb2w/Lm1hcmtBc1RvdWNoZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHRoaXMuY29udHJvbC52YWx1ZUNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tGb3JSZXF1aXJlZCgpO1xuICAgIHRoaXMudXBkYXRlQnV0dG9uTGFiZWwoKTtcbiAgfVxuXG4gIHVwZGF0ZUJ1dHRvbkxhYmVsKCkge1xuICAgIHRoaXMuYnJvd3NlQnRuLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpLmlubmVyVGV4dCA9IHRoaXMuYnRuTGFiZWw7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICB9XG59XG4iXX0=