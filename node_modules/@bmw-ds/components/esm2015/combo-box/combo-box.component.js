import { __decorate, __param } from "tslib";
import { AfterContentInit, Component, ContentChildren, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, ViewChild, AfterViewInit, Self, Optional, ChangeDetectorRef, SimpleChanges } from '@angular/core';
import { ComboBoxDropdownItemComponent } from './combo-box-dropdown-item.component';
import { ComboBoxInputComponent } from './combo-box-input.component';
import { LabelComponent } from '../label/label.component';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { fromEvent, merge, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
let ComboBoxComponent = class ComboBoxComponent {
    constructor(control, elementRef, cdRef) {
        this.control = control;
        this.elementRef = elementRef;
        this.cdRef = cdRef;
        this.noResultsPlaceholder = 'No results found';
        this.disabled = false;
        this.tabIndex = 0;
        this.required = false;
        this.clearable = true;
        this.hostTabIndex = '-1';
        this.filteredItems = [];
        this._items = [];
        this.selectedItems = [];
        this.opened = false;
        this.showInvalidState = false;
        this.comboFocused = false;
        this._type = "SINGLE" /* SINGLE */;
        this._inputFocused = false;
        this._isTouched = false;
        this.multiComboBoxText = 'Selected';
        this.scrollOffset = 0;
        this.onDestroy$ = new Subject();
        this.changeEvent = new EventEmitter();
        this.open = new EventEmitter();
        /**
         * Text to be used in multi combo boxes that use text instead of tags.
         * It can be a string or a callback function that takes the array of selected items and returns the text in a custom format.
         * In case of providing a string, it replaces the text of the default format: 'Selected (0)'.
         */
        this.selectedOptionsText = items => 'Selected (' + items.length + ')';
        this._onChange = () => { };
        this._onTouched = () => { };
        this._defaultFilter = (searchQuery, allComboBoxItems) => allComboBoxItems.filter(({ label }) => (label === null || label === void 0 ? void 0 : label.toString().toLocaleLowerCase().includes(this.input.value.toLocaleLowerCase())) ? true
            : false);
        if (this.control)
            this.control.valueAccessor = this;
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        this.changeValue(newValue, { emitEvent: true });
    }
    get useMulti() {
        return this._type === "MULTI" /* MULTI */;
    }
    set type(comboBoxType) {
        // coerce inputType
        if (this._type !== comboBoxType) {
            this._type = comboBoxType;
        }
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                if (this.opened) {
                    this.setNextItemAsFocused();
                    this.cdRef.detectChanges();
                    this.showInvalidState = false;
                }
                else {
                    this.toggle();
                }
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                if (this.opened) {
                    this.setPreviousItemAsFocused();
                    this.cdRef.detectChanges();
                    this.showInvalidState = false;
                }
                else {
                    this.toggle();
                }
                event.preventDefault();
                break;
            case 'Backspace':
            case 8:
            case 'Delete':
            case 46:
                if (this.useMulti && this.selectedItems.length > 0 && !this.comboFocused) {
                    const focusedTag = this.selectedItems.find(item => item.focused === true);
                    if (focusedTag) {
                        this.toggleMultiModeItem(focusedTag);
                        this.inputBox.nativeElement.querySelector('input').focus();
                    }
                }
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
                if (event.target === this.inputBox.nativeElement.querySelector('.clear.iwp-icon-gen_close')) {
                    this.clear();
                }
                else if (this.opened && this.filteredItems.length > 0) {
                    const isOnlyItemLeft = this.filteredItems.length === 1;
                    let itemToSelect;
                    if (isOnlyItemLeft) {
                        itemToSelect = this.filteredItems[0];
                    }
                    else {
                        itemToSelect = this.filteredItems.find(item => item.focused === true);
                    }
                    if (itemToSelect && !itemToSelect.disabled) {
                        if (!this.useMulti) {
                            this.selectItem(this.items.find(item => item.value === itemToSelect.value));
                            this.resetFocusedItem();
                            this.inputBox.nativeElement.querySelector('input').blur();
                        }
                        else {
                            this.toggleMultiModeItem(itemToSelect, { removeFocusAfterSelection: false });
                            if (isOnlyItemLeft) {
                                this.input.value = '';
                                this.cleanFilter();
                            }
                        }
                    }
                }
                event.stopPropagation();
                event.preventDefault();
                break;
            case 'Space':
            case 32:
                if (!this.opened || !this.input.value) {
                    this.toggle();
                    event.returnValue = false;
                    this.inputBox.nativeElement.querySelector('input').focus();
                }
                break;
            case 'Escape':
            case 27:
            case 'Tab':
            case 9:
                if (this.opened) {
                    this.toggle(false);
                }
                this.updateViewInputAfterDropdownClosed();
                if (!this.filteredItems.find(item => item.focused === true)) {
                    this.comboFocused = false;
                }
                break;
        }
    }
    onFocusout({ target }) {
        if (target === this.inputBox.nativeElement.querySelector('input') && !this.opened) {
            this.updateViewInputAfterDropdownClosed();
        }
    }
    ngOnInit() {
        var _a;
        this._listenToInputFocus();
        (_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(takeUntil(this.onDestroy$)).subscribe(e => {
            this._validate();
        });
        this.elementRef.nativeElement.focus = () => {
            this.focusInput();
            this.toggle(true);
        };
        this.updateMultiComboBoxText();
    }
    ngAfterContentInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
        this.filter();
        this._validate();
        this.items.changes.pipe(takeUntil(this.onDestroy$)).subscribe(() => {
            this.mapItems();
            this.updateViewInput();
            this.cleanFilter();
        });
        this.refreshItemsState();
        if (this._label) {
            this._label.inputId = this.id;
        }
        this._setGridClasses();
    }
    ngAfterViewInit() {
        if (this._value) {
            // Initial value was set, update selected items
            this.updateViewInput();
            this.cleanFilter();
            this.cdRef.detectChanges();
        }
    }
    mapItems() {
        this._items = this.items.map(item => {
            return {
                value: item.value,
                label: item.label,
                disabled: item.disabled,
                focused: item.focused,
                selected: item.selected,
                id: item.id
            };
        });
    }
    ngOnChanges(changes) {
        if (changes.selectedOptionsText) {
            this.updateMultiComboBoxText();
        }
        this.filter();
        this._validate();
    }
    ngOnDestroy() {
        this.cdRef.detach();
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    focusTag(selectedItem) {
        selectedItem.focused = true;
    }
    focusoutTag(selectedItem) {
        selectedItem.focused = false;
    }
    selectTag(selectedItem) {
        if (selectedItem) {
            // remove selection from all tags
            this.selectedItems = this.selectedItems.map(item => {
                item.focused = false;
                return item;
            });
            this.updateMultiComboBoxText();
        }
    }
    toggle(state) {
        if (!this.disabled) {
            const initialOpenedState = this.opened;
            if (typeof state !== 'undefined') {
                this.opened = state;
            }
            else {
                this.opened = !this.opened;
            }
            if (this.opened !== initialOpenedState) {
                if (this.opened) {
                    this.outsideCallback = this.onClickOutside.bind(this);
                    document.addEventListener('mouseup', this.outsideCallback);
                    document.addEventListener('touchend', this.outsideCallback);
                    this.inputBox.nativeElement.querySelector('input').focus();
                    this.open.emit();
                }
                else {
                    this.resetFocusedItem();
                    document.removeEventListener('mouseup', this.outsideCallback);
                    document.removeEventListener('touchend', this.outsideCallback);
                    this.comboFocused = this._inputFocused;
                }
            }
        }
    }
    onClickOutside({ target }) {
        var _a;
        if (!this.elementRef.nativeElement.querySelector('.combo-box-container').contains(target) &&
            !((_a = target.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('bmw-combo-box'))) {
            this.toggle(false);
            this.updateViewInputAfterDropdownClosed();
        }
    }
    refreshItemsState() {
        this.mapItems();
        this.filteredItems = [...this._items];
    }
    resetFocusedItem() {
        this.filteredItems.forEach(item => (item.focused = false));
    }
    setPreviousItemAsFocused() {
        if (this.opened && this.filteredItems.length > 0 && this.filteredItems.some(item => !item.disabled)) {
            let focusedItemIndex = this.filteredItems.findIndex(item => item.focused === true);
            this.resetFocusedItem();
            if (focusedItemIndex !== -1 && focusedItemIndex !== 0) {
                focusedItemIndex = focusedItemIndex - 1;
            }
            else {
                focusedItemIndex = this.filteredItems.length - 1;
            }
            this.filteredItems[focusedItemIndex].focused = true;
            if (this.filteredItems[focusedItemIndex].disabled) {
                this.setPreviousItemAsFocused();
            }
        }
    }
    setNextItemAsFocused() {
        if (this.opened && this.filteredItems.length > 0 && this.filteredItems.filter(item => !item.disabled).length > 0) {
            let focusedItemIndex = this.filteredItems.findIndex(item => item.focused === true);
            this.resetFocusedItem();
            if (focusedItemIndex !== -1 && focusedItemIndex !== this.filteredItems.length - 1) {
                focusedItemIndex = focusedItemIndex + 1;
            }
            else {
                focusedItemIndex = 0;
            }
            this.filteredItems[focusedItemIndex].focused = true;
            if (this.filteredItems[focusedItemIndex].disabled) {
                this.setNextItemAsFocused();
            }
        }
    }
    toggleMultiModeItem(item, options) {
        item.selected = !item.selected;
        this.updateSelectedItems(item);
        if (!options || options.removeFocusAfterSelection) {
            const currentlyFocusedIndex = this.filteredItems.findIndex(searchedItem => !!searchedItem.focused);
            if (currentlyFocusedIndex > 0) {
                this.filteredItems[currentlyFocusedIndex].focused = false;
            }
        }
        const itemInDropdownList = this.filteredItems.find(dropdownItem => dropdownItem.value === item.value);
        itemInDropdownList.selected = item.selected;
        this.findFocusedTag();
        this.emitSelectedItemsChange();
        this._validate();
    }
    updateSelectedItems(item) {
        if (item.selected) {
            this.selectedItems.push(item);
        }
        else {
            this.selectedItems = this.selectedItems.filter(function (element) {
                return element.value !== item.value;
            });
        }
        this.updateMultiComboBoxText();
    }
    updateViewInput() {
        var _a;
        if (Array.isArray(this._value) || this.useMulti) {
            this._items = this._items.map(item => {
                var _a;
                item.selected = (_a = this._value) === null || _a === void 0 ? void 0 : _a.includes(item.value);
                return item;
            });
            this.selectedItems = this._items.filter(item => item.selected);
            this.updateMultiComboBoxText();
        }
        else {
            if (this._value === null) {
                this.resetDropdownItems();
            }
            const selectedItem = this.findItemByValue(this._value);
            if (this.input) {
                this.input.value = (_a = selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.label) !== null && _a !== void 0 ? _a : '';
            }
        }
    }
    updateMultiComboBoxText() {
        if (this.useMulti) {
            if (typeof this.selectedOptionsText === 'function') {
                this.multiComboBoxText = this.selectedOptionsText(this.selectedItems);
            }
            else {
                this.multiComboBoxText = this.selectedOptionsText + ' (' + this.selectedItems.length + ')';
            }
        }
    }
    focusFirstFilteredItem() {
        if (this.input && this.opened && this.filteredItems.length > 0 && this.filteredItems.some(item => !item.disabled)) {
            const enabledItems = this.filteredItems.filter(item => !item.disabled);
            enabledItems[0].focused = true;
            this.cdRef.detectChanges();
            this.inputBox.nativeElement.querySelector('input').focus();
            this.showInvalidState = false;
        }
    }
    updateViewInputAfterDropdownClosed() {
        this.resetFocusedItem();
        if (!this.useMulti && this._value) {
            this.updateViewInput();
        }
        else {
            this.input.value = '';
        }
        this.cleanFilter();
        this._validate();
    }
    resetDropdownItems() {
        this.filteredItems = [...this._items];
        this.selectedItems = [];
        this.updateMultiComboBoxText();
        this._items = this._items.map(item => {
            item.selected = false;
            return item;
        });
    }
    emitSelectedItemsChange() {
        const _selectedItems = this._items.filter(item => item.selected).map(item => item.value);
        this.value = _selectedItems;
        this.changeEvent.emit(_selectedItems);
        this._onChange(_selectedItems);
        this._onTouched();
    }
    filter() {
        var _a, _b, _c;
        this.resetFocusedItem();
        if (!this._items) {
            this.filteredItems = [];
            return;
        }
        const filter = (_a = this.customFilter) !== null && _a !== void 0 ? _a : this._defaultFilter;
        this.filteredItems = filter((_c = (_b = this.input) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.toString(), this._items);
    }
    filterAndOpenDropdown() {
        this.filter();
        this.toggle(true);
        this.focusFirstFilteredItem();
    }
    cleanFilter() {
        if (!this._items) {
            this.filteredItems = [];
        }
        else {
            this.filteredItems = this._items;
        }
    }
    selectItem(item) {
        if (this.useMulti) {
            this.toggleMultiModeItem(item);
        }
        else {
            this.value = item.value;
            this.filteredItems = [...this._items];
            this.toggle(false);
            this.changeEvent.emit(item.value);
            this._onTouched();
            this._validate();
        }
    }
    findItemByValue(value) {
        if (!this.items)
            return null;
        return this.items.filter(item => {
            return item.value === value || JSON.stringify(item.value) === JSON.stringify(value);
        })[0];
    }
    clear() {
        this._value = null;
        this.input.value = null;
        this.changeEvent.emit(null);
        this._onChange(null);
        this._onTouched();
        this._validate();
    }
    isFormReset() {
        let reset = false;
        if (this.control) {
            const { pristine } = this.control;
            reset = this._value === null && pristine !== false;
        }
        return reset;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    writeValue(value) {
        this.changeValue(value, { emitEvent: false });
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    changeValue(newValue, options) {
        this._value = newValue;
        this.updateViewInput();
        if (Array.isArray(newValue)) {
            this.findFocusedTag();
        }
        if (options.emitEvent && !this.isFormReset()) {
            this._onChange(newValue);
        }
        this._validate();
    }
    _validate() {
        if (this.control) {
            const { touched, invalid } = this.control;
            this.showInvalidState = invalid && touched;
        }
        else {
            if (this.useMulti) {
                this.showInvalidState =
                    this._isTouched && this.required === true && this._items.filter(item => item.selected).length === 0;
            }
            else {
                this.showInvalidState = this._isTouched && this.required === true && !this._value;
            }
        }
    }
    _listenToInputFocus() {
        if (!this.inputBox)
            return;
        const inputElement = this.inputBox.nativeElement.querySelector('input');
        const focusEvent = fromEvent(inputElement, 'focus').pipe(map(() => 'focus'));
        const blurEvent = fromEvent(inputElement, 'blur').pipe(map(() => 'blur'));
        merge(focusEvent, blurEvent)
            .pipe(takeUntil(this.onDestroy$), map(eventName => (eventName === 'focus' ? true : false)))
            .subscribe(inputFocus => {
            this.comboFocused = inputFocus;
        });
    }
    focusInput() {
        if (!this.disabled) {
            this._inputFocused = true;
            this.comboFocused = true;
        }
    }
    focusoutInput() {
        this._inputFocused = false;
        this.comboFocused = this.opened;
    }
    _setGridClasses() {
        const listOfClasses = Array.from(this.elementRef.nativeElement.classList);
        this.gridClasses = listOfClasses.filter((item) => item.match(/bmw__grid__cell.*/));
        if (this.gridClasses.length > 0) {
            const wrapperClassList = this.elementRef.nativeElement.querySelector('div.combo-box-container').classList;
            wrapperClassList.value.split(' ').forEach((className) => {
                if (className.match(/bmw__grid__cell.*/)) {
                    wrapperClassList.remove(className);
                }
            });
            this.gridClasses.forEach((className) => {
                this.elementRef.nativeElement.querySelector('div.combo-box-container').classList.add(className);
                this.elementRef.nativeElement.classList.remove(className);
            });
        }
    }
    findFocusedTag() {
        setTimeout(() => {
            const focused = this.elementRef.nativeElement.querySelector('bmw-tag div.focused');
            if (!focused) {
                this.scrollOffset = 0;
                return;
            }
            const diff = focused.parentElement.getBoundingClientRect().x -
                focused.parentElement.parentElement.parentElement.getBoundingClientRect().x -
                this.scrollOffset;
            if (diff < 0) {
                this.scrollOffset = -diff;
            }
            else {
                this.scrollOffset = 0;
            }
        });
    }
    click() {
        this.toggle();
    }
    inputTouched() {
        this._isTouched = true;
        this._onTouched();
    }
};
ComboBoxComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], ComboBoxComponent.prototype, "placeholder", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "noResultsPlaceholder", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "tabIndex", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "required", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "clearable", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "customFilter", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "textInsteadOfTags", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], ComboBoxComponent.prototype, "id", void 0);
__decorate([
    HostBinding('attr.tabindex')
], ComboBoxComponent.prototype, "hostTabIndex", void 0);
__decorate([
    ContentChildren(ComboBoxDropdownItemComponent)
], ComboBoxComponent.prototype, "items", void 0);
__decorate([
    ContentChild(LabelComponent, { static: true })
], ComboBoxComponent.prototype, "_label", void 0);
__decorate([
    ViewChild(ComboBoxInputComponent)
], ComboBoxComponent.prototype, "input", void 0);
__decorate([
    ViewChild('inputBox')
], ComboBoxComponent.prototype, "inputBox", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "value", null);
__decorate([
    Input()
], ComboBoxComponent.prototype, "type", null);
__decorate([
    Output()
], ComboBoxComponent.prototype, "changeEvent", void 0);
__decorate([
    Output()
], ComboBoxComponent.prototype, "open", void 0);
__decorate([
    Input()
], ComboBoxComponent.prototype, "selectedOptionsText", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], ComboBoxComponent.prototype, "onKeydown", null);
__decorate([
    HostListener('focusout', ['$event'])
], ComboBoxComponent.prototype, "onFocusout", null);
ComboBoxComponent = __decorate([
    Component({
        selector: 'bmw-combo-box',
        template: "<div\n  class=\"combo-box-wrapper bmw__margin-bottom__xs\"\n  [ngClass]=\"{ bmw__grid__inner: gridClasses?.length }\"\n  [class.disabled]=\"disabled\"\n  [attr.aria-disabled]=\"disabled\"\n>\n  <ng-content select=\"bmw-label\"></ng-content>\n  <div class=\"combo-box-container\">\n    <div\n      class=\"combo-box\"\n      [class.disabled]=\"disabled\"\n      [class.invalid]=\"showInvalidState\"\n      [class.focused]=\"comboFocused\"\n    >\n      <div\n        class=\"select bmw-component-text outer-container\"\n        [class.open]=\"opened\"\n        [class.multi-combo-box]=\"useMulti\"\n        (click)=\"click()\"\n        #inputBox\n      >\n        <div class=\"combo-box-outer-wrapper inner-container\">\n          <div class=\"combo-box-inner-wrapper moving-container\">\n            <div\n              *ngIf=\"useMulti\"\n              class=\"multi-combo-box-tags\"\n              [ngClass]=\"{ 'multi-combo-box-tags--hidden': textInsteadOfTags }\"\n              [ngStyle]=\"{ left: scrollOffset.toString() + 'px' }\"\n            >\n              <ng-container *ngFor=\"let item of selectedItems\">\n                <bmw-tag\n                  *ngIf=\"item.selected\"\n                  [focused]=\"item.focused\"\n                  [label]=\"item.label\"\n                  [disabled]=\"item.disabled\"\n                  (click)=\"selectTag(item)\"\n                  (removeEvent)=\"toggleMultiModeItem(item)\"\n                  (focus)=\"focusTag(item)\"\n                  (focusout)=\"focusoutTag(item)\"\n                  [tabindex]=\"disabled ? -1 : tabIndex\"\n                ></bmw-tag>\n              </ng-container>\n            </div>\n            <div class=\"multi-combo-box-text-container\">\n              <span\n                *ngIf=\"useMulti\"\n                class=\"bmw-component-text multi-combo-box-text\"\n                [ngClass]=\"{ 'multi-combo-box-text--show': textInsteadOfTags }\"\n                [title]=\"multiComboBoxText\"\n              >\n                {{ multiComboBoxText }}\n              </span>\n            </div>\n            <input\n              [id]=\"'input-in-' + id\"\n              bmwComboBoxInput\n              [placeholder]=\"selectedItems.length === 0 ? placeholder || '' : ''\"\n              (inputEvent)=\"filterAndOpenDropdown()\"\n              [class.filled]=\"value\"\n              [class.invalid]=\"showInvalidState\"\n              [attr.aria-label]=\"'input-for-' + id\"\n              (focus)=\"focusInput()\"\n              (focusout)=\"focusoutInput()\"\n              (blur)=\"inputTouched()\"\n              [disabled]=\"disabled\"\n              [tabindex]=\"disabled ? -1 : tabIndex\"\n              [required]=\"required\"\n            />\n            <i\n              *ngIf=\"!useMulti && value && clearable\"\n              class=\"clear iwp-icon-gen_close\"\n              (click)=\"clear()\"\n              [tabindex]=\"disabled ? -1 : tabIndex\"\n            ></i>\n          </div>\n        </div>\n        <i class=\"arrow\" [class.iwp-icon-gen_arrow_down]=\"!opened\" [class.iwp-icon-gen_arrow_up]=\"opened\"></i>\n      </div>\n      <div [class.open]=\"opened\" class=\"dropdown-menu\">\n        <ng-container *ngIf=\"!useMulti\">\n          <bmw-combo-box-dropdown-item\n            *ngFor=\"let item of filteredItems\"\n            [value]=\"item.value\"\n            [label]=\"item.label\"\n            [disabled]=\"item.disabled\"\n            [focused]=\"item.focused\"\n            [id]=\"item.id\"\n            [selected]=\"item.value === value\"\n            (clickEvent)=\"selectItem(item)\"\n          >\n          </bmw-combo-box-dropdown-item>\n        </ng-container>\n        <ng-container *ngIf=\"useMulti\">\n          <bmw-combo-box-dropdown-checkbox-item\n            *ngFor=\"let item of filteredItems\"\n            [value]=\"item.value\"\n            [label]=\"item.label\"\n            [disabled]=\"item.disabled\"\n            [focused]=\"item.focused\"\n            [id]=\"item.id\"\n            [selected]=\"item.selected\"\n            (selectedChange)=\"toggleMultiModeItem(item)\"\n          >\n          </bmw-combo-box-dropdown-checkbox-item>\n        </ng-container>\n        <ng-container *ngIf=\"filteredItems.length === 0\">\n          <bmw-combo-box-dropdown-item [value]=\"noResultsPlaceholder\" [label]=\"noResultsPlaceholder\" [disabled]=\"true\">\n          </bmw-combo-box-dropdown-item>\n        </ng-container>\n      </div>\n    </div>\n    <ng-content select=\"bmw-error-message\"></ng-content>\n  </div>\n</div>\n",
        styles: [".combo-box{position:relative;cursor:pointer}input{height:var(--inputfield__default__height);text-overflow:ellipsis}.label{color:var(--combo-box__label__color)}.arrow{position:absolute;top:0;right:0;padding:var(--combo-box__default__padding);padding-bottom:0;padding-top:0;line-height:var(--inputfield__default__height);z-index:var(--combo-box__arrow__z-index)}.arrow:focus{outline:0}.clear{position:absolute;top:0;right:calc(var(--typography__component-text__font-size) + 2 * var(--combo-box__default__padding));padding:var(--combo-box__default__padding);padding-bottom:0;padding-top:0;line-height:var(--inputfield__default__height)}.clear:focus{outline:0}.clear:focus:before{outline:solid 1px;outline-color:var(--color-bmw-highlight)}bmw-tag{margin-right:var(--combo-box__tag__margin-right)}bmw-tag:focus{outline:0}.combo-box-wrapper,.label{grid-row-gap:0}.combo-box-wrapper.disabled,.label.disabled{pointer-events:none}.combo-box-wrapper.disabled .combo-box-select,.combo-box-wrapper.disabled .multi-combo-box,.label.disabled .combo-box-select,.label.disabled .multi-combo-box{border-bottom-color:var(--combo-box__disabled__color)}.combo-box-wrapper.disabled ::ng-deep label,.label.disabled ::ng-deep label{cursor:no-drop;color:var(--inputfield__disabled__color)}.combo-box-wrapper.disabled input,.label.disabled input{color:var(--combo-box__disabled__color);border-bottom-color:var(--combo-box__disabled__color)}.combo-box-wrapper.disabled input::-moz-placeholder,.label.disabled input::-moz-placeholder{color:var(--combo-box__disabled__color)}.combo-box-wrapper.disabled input:-ms-input-placeholder,.label.disabled input:-ms-input-placeholder{color:var(--combo-box__disabled__color)}.combo-box-wrapper.disabled input::placeholder,.label.disabled input::placeholder{color:var(--combo-box__disabled__color)}.combo-box-wrapper.disabled .arrow,.combo-box-wrapper.disabled .clear,.label.disabled .arrow,.label.disabled .clear{color:var(--combo-box__disabled__color)}:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused){background-color:var(--combo-box__error__background-color)}:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) .combo-box-select,:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) .multi-combo-box{border-bottom-color:var(--combo-box__error__color)}:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) input,:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) label{border-bottom-color:var(--combo-box__error__color);background-color:transparent}:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) input::-moz-placeholder,:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) label::-moz-placeholder{color:var(--combo-box__placeholder__color)}:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) input:-ms-input-placeholder,:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) label:-ms-input-placeholder{color:var(--combo-box__placeholder__color)}:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) input::placeholder,:host.ng-invalid.ng-touched .combo-box:not(.disabled):not(.focused) label::placeholder{color:var(--combo-box__placeholder__color)}:host:focus{outline:0}.combo-box.invalid:not(.disabled){background-color:var(--combo-box__error__background-color)!important}.combo-box.invalid:not(.disabled) .combo-box-select,.combo-box.invalid:not(.disabled) .multi-combo-box{border-bottom-color:var(--combo-box__error__color)}.combo-box.invalid:not(.disabled) input,.combo-box.invalid:not(.disabled) label{border-bottom-color:var(--combo-box__error__color);background-color:transparent!important}.combo-box.invalid:not(.disabled) input::-moz-placeholder,.combo-box.invalid:not(.disabled) label::-moz-placeholder{color:var(--combo-box__placeholder__color)}.combo-box.invalid:not(.disabled) input:-ms-input-placeholder,.combo-box.invalid:not(.disabled) label:-ms-input-placeholder{color:var(--combo-box__placeholder__color)}.combo-box.invalid:not(.disabled) input::placeholder,.combo-box.invalid:not(.disabled) label::placeholder{color:var(--combo-box__placeholder__color)}.combo-box.focused{outline:solid 1px!important;outline-color:var(--combo-box__inputfield__focused__outline-color)!important;outline-offset:-1px}div.dropdown-menu{display:none;position:absolute;z-index:var(--combo-box__popup__z-index);overflow-y:auto;width:calc(100% - 2px);max-height:calc(5.66 * (var(--dropdown__default__line-height) + 2 * var(--combo-box__default__padding)));border:solid 1px var(--combo-box__dropdown-menu__border-color);border-top:none}div.dropdown-menu.open{display:block}.combo-box-wrapper.disabled{cursor:no-drop}.combo-box,.combo-box input{background-color:var(--combo-box__default__background-color)}::ng-deep .reversed .combo-box{background-color:var(--combo-box__reversed__background-color)!important}::ng-deep .reversed .combo-box input{background-color:var(--combo-box__reversed__background-color)!important}.multi-combo-box{display:flex;border-bottom:1px solid var(--combo-box__inputfield__default__border-bottom-color)}.multi-combo-box input{border:none}.multi-combo-box .combo-box-wrapper{display:flex;overflow:hidden}.multi-combo-box .multi-combo-box-tags{display:var(--combo-box__multiselect__tags__display);padding-top:calc(var(--combo-box__tag__margin-right) - 1px);padding-left:calc(var(--combo-box__tag__margin-right) - 1px);position:relative}.multi-combo-box .multi-combo-box-tags--hidden,.multi-combo-box .multi-combo-box-tags:empty{display:var(--combo-box__multiselect__no__tags__display)}.multi-combo-box .multi-combo-box-text-container{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;max-width:calc(100% - var(--combo-box__inputfield__default__min-width))}.multi-combo-box .multi-combo-box-text-container .multi-combo-box-text{display:var(--combo-box__multiselect__mobile-text__display);padding:var(--combo-box__text-instead-of-tags__padding);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.multi-combo-box .multi-combo-box-text-container .multi-combo-box-text--show{display:var(--combo-box__multiselect__desktop__and__mobile-text__display)}.multi-combo-box-ellipsis{-ms-grid-row-align:center;align-self:center;padding-left:calc(var(--combo-box__tag__margin-right) - 1px)}.inner-container,.outer-container{width:100%}.multi-combo-box .outer-container{display:flex}.multi-combo-box .inner-container{overflow:hidden;margin-left:1px}.multi-combo-box .moving-container{display:flex;width:100%;justify-content:flex-end}"]
    }),
    __param(0, Self()), __param(0, Optional())
], ComboBoxComponent);
export { ComboBoxComponent };
//# sourceMappingURL=data:application/json;base64,