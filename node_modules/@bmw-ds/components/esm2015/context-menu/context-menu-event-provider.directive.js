import { __decorate } from "tslib";
import { Directive, EventEmitter, Output } from '@angular/core';
import { ContextMenuEventProviderService } from './context-menu-event-provider.service';
/**
 The eventProvider directive can be used on a bmw-context-menu in order to be notified of item selection.
 Adding this directive allows you to subscribe to the "itemSelected" event, which is emitted whenever any
 of the underlying bmw-context-menu-items is selected - regardless whether they are direct children
 or nested in bmw-context-menu components further down the tree. In most cases, you will be interested in all selectable items, so put this on your top-level
 bmw-context-menu.
 */
/* tslint:disable:directive-selector*/
let ContextMenuEventProviderDirective = class ContextMenuEventProviderDirective {
    constructor(cmService) {
        this.cmService = cmService;
        this.itemSelected = new EventEmitter();
        cmService.itemSelected$.subscribe(selectedItemInfo => {
            this.itemSelected.emit(selectedItemInfo);
        });
    }
};
ContextMenuEventProviderDirective.ctorParameters = () => [
    { type: ContextMenuEventProviderService }
];
__decorate([
    Output()
], ContextMenuEventProviderDirective.prototype, "itemSelected", void 0);
ContextMenuEventProviderDirective = __decorate([
    Directive({
        selector: 'bmw-context-menu[eventProvider]',
        providers: [ContextMenuEventProviderService]
    })
], ContextMenuEventProviderDirective);
export { ContextMenuEventProviderDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LWV2ZW50LXByb3ZpZGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvbnRleHQtbWVudS9jb250ZXh0LW1lbnUtZXZlbnQtcHJvdmlkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFeEY7Ozs7OztHQU1HO0FBQ0gsc0NBQXNDO0FBS3RDLElBQWEsaUNBQWlDLEdBQTlDLE1BQWEsaUNBQWlDO0lBSTVDLFlBQW9CLFNBQTBDO1FBQTFDLGNBQVMsR0FBVCxTQUFTLENBQWlDO1FBRjlELGlCQUFZLEdBQW1DLElBQUksWUFBWSxFQUFvQixDQUFDO1FBR2xGLFNBQVMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQUxnQywrQkFBK0I7O0FBRjlEO0lBREMsTUFBTSxFQUFFO3VFQUMyRTtBQUZ6RSxpQ0FBaUM7SUFKN0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlDQUFpQztRQUMzQyxTQUFTLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQztLQUM3QyxDQUFDO0dBQ1csaUNBQWlDLENBUzdDO1NBVFksaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGV4dE1lbnVFdmVudFByb3ZpZGVyU2VydmljZSB9IGZyb20gJy4vY29udGV4dC1tZW51LWV2ZW50LXByb3ZpZGVyLnNlcnZpY2UnO1xuXG4vKipcbiBUaGUgZXZlbnRQcm92aWRlciBkaXJlY3RpdmUgY2FuIGJlIHVzZWQgb24gYSBibXctY29udGV4dC1tZW51IGluIG9yZGVyIHRvIGJlIG5vdGlmaWVkIG9mIGl0ZW0gc2VsZWN0aW9uLlxuIEFkZGluZyB0aGlzIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHN1YnNjcmliZSB0byB0aGUgXCJpdGVtU2VsZWN0ZWRcIiBldmVudCwgd2hpY2ggaXMgZW1pdHRlZCB3aGVuZXZlciBhbnlcbiBvZiB0aGUgdW5kZXJseWluZyBibXctY29udGV4dC1tZW51LWl0ZW1zIGlzIHNlbGVjdGVkIC0gcmVnYXJkbGVzcyB3aGV0aGVyIHRoZXkgYXJlIGRpcmVjdCBjaGlsZHJlblxuIG9yIG5lc3RlZCBpbiBibXctY29udGV4dC1tZW51IGNvbXBvbmVudHMgZnVydGhlciBkb3duIHRoZSB0cmVlLiBJbiBtb3N0IGNhc2VzLCB5b3Ugd2lsbCBiZSBpbnRlcmVzdGVkIGluIGFsbCBzZWxlY3RhYmxlIGl0ZW1zLCBzbyBwdXQgdGhpcyBvbiB5b3VyIHRvcC1sZXZlbFxuIGJtdy1jb250ZXh0LW1lbnUuXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdibXctY29udGV4dC1tZW51W2V2ZW50UHJvdmlkZXJdJyxcbiAgcHJvdmlkZXJzOiBbQ29udGV4dE1lbnVFdmVudFByb3ZpZGVyU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVFdmVudFByb3ZpZGVyRGlyZWN0aXZlIHtcbiAgQE91dHB1dCgpXG4gIGl0ZW1TZWxlY3RlZDogRXZlbnRFbWl0dGVyPFNlbGVjdGVkSXRlbUluZm8+ID0gbmV3IEV2ZW50RW1pdHRlcjxTZWxlY3RlZEl0ZW1JbmZvPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY21TZXJ2aWNlOiBDb250ZXh0TWVudUV2ZW50UHJvdmlkZXJTZXJ2aWNlKSB7XG4gICAgY21TZXJ2aWNlLml0ZW1TZWxlY3RlZCQuc3Vic2NyaWJlKHNlbGVjdGVkSXRlbUluZm8gPT4ge1xuICAgICAgdGhpcy5pdGVtU2VsZWN0ZWQuZW1pdChzZWxlY3RlZEl0ZW1JbmZvKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdGVkSXRlbUluZm8ge1xuICBpdGVtSWQ6IHN0cmluZztcbiAgbGVhZkl0ZW06IGJvb2xlYW47XG59XG4iXX0=