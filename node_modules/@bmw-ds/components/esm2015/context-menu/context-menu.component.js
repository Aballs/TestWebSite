import { __decorate, __param } from "tslib";
import { AfterContentInit, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, HostBinding, Input, OnDestroy, OnInit, Optional, Output, QueryList, HostListener, ElementRef, ChangeDetectorRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { ContextMenuEventProviderService } from './context-menu-event-provider.service';
// Note that ContextMenuItemComponent and ContextMenuComponent are defined in the same file in order to avoid circular dependencies
let ContextMenuItemComponent = class ContextMenuItemComponent {
    constructor(elementRef, eventProviderService) {
        this.elementRef = elementRef;
        this.eventProviderService = eventProviderService;
        // emit the whole component, because this is only supposed to be used by within our own components, i.e.
        // between the item and the context-menu. the top-level context-menu will emit a more concise event for the user.
        this.selected = new EventEmitter();
        this.showSelected = false;
        this.itemClick = (event) => {
            if (this.eventProviderService) {
                this.eventProviderService.broadcastItemSelected(this);
            }
            this.selected.emit(this);
            if (this.subMenu) {
                this.subMenu.opened = true;
            }
            event === null || event === void 0 ? void 0 : event.stopPropagation();
        };
    }
    ngOnInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    }
    ngAfterContentInit() {
        if (this.subMenu) {
            this.subMenu.isRootMenu = false;
            this.subMenu.closeEvent.subscribe(() => {
                this.wrapper.nativeElement.focus();
                this.unselectSubs();
            });
        }
    }
    unselectSubs() {
        this.isSelected = false;
        if (this.subMenu) {
            this.subMenu.toggle(false);
            this.subMenu.unselectSubs();
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subMenu) === null || _a === void 0 ? void 0 : _a.closeEvent.unsubscribe();
    }
};
ContextMenuItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ContextMenuEventProviderService, decorators: [{ type: Optional }] }
];
__decorate([
    Input()
], ContextMenuItemComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], ContextMenuItemComponent.prototype, "icon", void 0);
__decorate([
    Input()
], ContextMenuItemComponent.prototype, "labelText", void 0);
__decorate([
    ViewChild('itemWrapper')
], ContextMenuItemComponent.prototype, "wrapper", void 0);
__decorate([
    Output()
], ContextMenuItemComponent.prototype, "selected", void 0);
__decorate([
    ContentChild(forwardRef(() => ContextMenuComponent))
], ContextMenuItemComponent.prototype, "subMenu", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], ContextMenuItemComponent.prototype, "id", void 0);
ContextMenuItemComponent = __decorate([
    Component({
        selector: 'bmw-context-menu-item',
        template: "<div\n  #itemWrapper\n  class=\"wrapper\"\n  [class.disabled]=\"disabled\"\n  [class.selected]=\"showSelected && isSelected\"\n  [attr.aria-selected]=\"isSelected\"\n  [attr.aria-disabled]=\"disabled\"\n  tabindex=\"0\"\n>\n  <i *ngIf=\"icon\" [ngClass]=\"[icon, 'icon-left']\"></i>\n  <i *ngIf=\"subMenu\" class=\"iwp-icon-gen_arrow_right hasChild\"></i>\n  <div [class.disabled]=\"disabled\" [class.icon-left]=\"icon\" class=\"bmw-component-text\" (click)=\"itemClick($event)\">\n    {{ labelText }}\n  </div>\n  <div class=\"content-container\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
        styles: ["div.wrapper{max-height:calc(2 * var(--context-menu__default__padding) + 2 * var(--context-menu__default__line-height));position:relative;border:none;box-sizing:border-box;cursor:pointer;color:var(--context-menu__default__color);background-color:var(--context-menu__default__background-color);white-space:nowrap}div.wrapper:hover{background-color:var(--context-menu__default__hover__background-color)}div.wrapper:focus{background-color:var(--context-menu__default__hover__background-color);outline:solid 1px;outline-color:var(--color-bmw-highlight);z-index:calc(var(--context-menu__default__z-index) + 1)}div.wrapper.selected{background-color:var(--context-menu__default__selected__background-color);color:var(--context-menu__default__selected__color)}div.wrapper.selected:focus{outline:solid 1px;outline-color:var(--color-bmw-basic5);outline-offset:-3px;z-index:calc(var(--context-menu__default__z-index) + 1)}div.wrapper.disabled{background-color:var(--context-menu__default__disabled__background-color);color:var(--context-menu__default__disabled__color);pointer-events:none}div.wrapper div.bmw-component-text{width:100%;display:block;box-sizing:border-box;position:relative;overflow:hidden;padding:var(--context-menu__default__padding);color:inherit}:host[hasChild] div.wrapper div.bmw-component-text{padding-right:calc(var(--context-menu__default__padding) + var(--context-menu__default__font-size) + var(--context-menu__arrow__padding-right))}div.wrapper div.bmw-component-text.icon-left{padding-left:calc(var(--context-menu__default__padding) + var(--context-menu__default__font-size) + var(--context-menu__icon__padding-right))}div.wrapper i{height:var(--context-menu__default__font-size);width:var(--context-menu__default__font-size);top:calc(50% - var(--context-menu__default__font-size)/ 2);position:absolute;font-size:var(--context-menu__default__font-size)}div.wrapper i.icon-left{left:var(--context-menu__default__padding)}div.wrapper i.hasChild{right:var(--context-menu__arrow__padding-right)}div.wrapper i.hasChild+.bmw-component-text{padding-right:calc(var(--context-menu__default__padding) + var(--context-menu__default__font-size) + var(--context-menu__icon__padding-right))}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){:host[hasChild] div.wrapper div.bmw-component-text{padding-right:30px}div.wrapper div.bmw-component-text.icon-left{padding-left:30px}div.wrapper i.hasChild+.bmw-component-text{padding-right:30px}}div.wrapper .content-container{position:absolute;left:100%;top:-1px}:host[disabled]{cursor:no-drop}"]
    }),
    __param(1, Optional())
], ContextMenuItemComponent);
export { ContextMenuItemComponent };
// TODO idea for the future: optional close on click outside (i.e. add this as a convenience feature if menu-button is not used)
let ContextMenuComponent = class ContextMenuComponent {
    constructor(cdRef, elementRef) {
        this.cdRef = cdRef;
        this.elementRef = elementRef;
        this.closeOnClickOutside = true;
        this.closeOnSelected = true;
        // this is emitted in ngOnDestroy
        this._destroy = new Subject();
        /**
         * keeps the previously selected item highlited when reopening the menu (default = false)
         */
        this.keepItemSelected = false;
        /**
         * preserves the opened state of the menu after closing (default = false)
         */
        this.preserveState = false;
        this.isRootMenu = true;
        this.closeEvent = new EventEmitter();
    }
    set opened(state) {
        this.toggle(state);
    }
    get opened() {
        return this._opened;
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                this.setNextItemAsFocused(event.target);
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowUp':
            case 38:
                this.setPreviousItemAsFocused(event.target);
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowLeft':
            case 37:
                this.closeSubmenu(event.target);
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'ArrowRight':
            case 39:
                this.openSubmenu(event.target);
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                this.activateItem(event.target);
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'Escape':
            case 27:
                if (this._opened) {
                    this.toggle(false);
                }
                event.preventDefault();
                break;
            case 'Tab':
            case 9:
                if (this._opened && this.closeOnClickOutside) {
                    this.toggle(false);
                }
                break;
        }
    }
    ngOnInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    }
    ngAfterContentInit() {
        this.childContextMenuItems.changes
            .pipe(
        // tslint:disable-next-line:deprecation
        startWith(null), takeUntil(this._destroy))
            .subscribe(() => {
            this._register();
        });
        if (this.closeOnSelected) {
            this.childContextMenuItems.map((child) => {
                if (!child.subMenu) {
                    child.selected.pipe(takeUntil(this._destroy)).subscribe(() => {
                        this.toggle(!this.isRootMenu && this.preserveState);
                    });
                }
            });
        }
    }
    _register() {
        this.childContextMenuItems.forEach(item => {
            item.showSelected = this.keepItemSelected;
            item.selected.pipe(takeUntil(this._destroy)).subscribe(selectedItem => {
                this._select(selectedItem);
            });
        });
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        document.removeEventListener('mouseup', this.clickOutsideCallback);
        document.removeEventListener('touchend', this.clickOutsideCallback);
    }
    _select(selectedItem) {
        this.childContextMenuItems.forEach(item => {
            if (item !== selectedItem)
                item.unselectSubs();
        });
        selectedItem.isSelected = true;
    }
    activateItem(target) {
        const focusedItem = this.childContextMenuItems.find(item => target === item.wrapper.nativeElement);
        if (focusedItem) {
            focusedItem.itemClick();
        }
    }
    closeSubmenu(target) {
        var _a;
        if (!this.isRootMenu) {
            const focusedItem = this.childContextMenuItems.find(item => target === item.wrapper.nativeElement);
            if (focusedItem && !((_a = focusedItem.subMenu) === null || _a === void 0 ? void 0 : _a.opened)) {
                target.blur();
                this.toggle(false);
            }
        }
    }
    openSubmenu(target) {
        const focusedItem = this.childContextMenuItems.find(item => target === item.wrapper.nativeElement);
        if (focusedItem && focusedItem.subMenu) {
            focusedItem.itemClick();
            target.blur();
            focusedItem.subMenu.setNextItemAsFocused();
        }
    }
    setPreviousItemAsFocused(target) {
        if (this._opened &&
            this.childContextMenuItems.length > 0 &&
            this.childContextMenuItems.filter(item => !item.disabled).length > 0) {
            const itemsArray = this.childContextMenuItems.toArray();
            let targetItemIndex = itemsArray.findIndex(item => target === item.wrapper.nativeElement);
            if (targetItemIndex !== -1) {
                itemsArray[targetItemIndex].wrapper.nativeElement.blur();
            }
            if (targetItemIndex > 0) {
                targetItemIndex = targetItemIndex - 1;
            }
            else {
                targetItemIndex = itemsArray.length - 1;
            }
            if (itemsArray[targetItemIndex].disabled) {
                this.setPreviousItemAsFocused(itemsArray[targetItemIndex].wrapper.nativeElement);
            }
            else {
                itemsArray[targetItemIndex].wrapper.nativeElement.focus();
            }
        }
    }
    setNextItemAsFocused(target) {
        if (this._opened &&
            this.childContextMenuItems.length > 0 &&
            this.childContextMenuItems.filter(item => !item.disabled).length > 0) {
            const itemsArray = this.childContextMenuItems.toArray();
            let targetItemIndex = itemsArray.findIndex(item => target === item.wrapper.nativeElement);
            if (targetItemIndex !== -1) {
                itemsArray[targetItemIndex].wrapper.nativeElement.blur();
            }
            if (targetItemIndex !== -1 && targetItemIndex !== itemsArray.length - 1) {
                targetItemIndex = targetItemIndex + 1;
            }
            else {
                targetItemIndex = 0;
            }
            if (itemsArray[targetItemIndex].disabled) {
                this.setNextItemAsFocused(itemsArray[targetItemIndex].wrapper.nativeElement);
            }
            else {
                this.cdRef.detectChanges();
                itemsArray[targetItemIndex].wrapper.nativeElement.focus();
            }
        }
    }
    unselectSubs() {
        this.childContextMenuItems.forEach(item => {
            item.unselectSubs();
        });
    }
    toggle(state) {
        let focusFirstItem = false;
        let emitCloseEvent = false;
        const initialOpenedState = this._opened;
        if (typeof state !== 'undefined') {
            focusFirstItem = !this._opened && state;
            emitCloseEvent = this._opened && !state;
            this._opened = state;
        }
        else {
            this._opened = !this._opened;
            focusFirstItem = this._opened;
            emitCloseEvent = !this._opened;
        }
        if (this.opened !== initialOpenedState) {
            if (this.opened && this.closeOnClickOutside) {
                setTimeout(() => {
                    /**
                     * .toggle public use will probably be triggered by a user click.
                     * Since the event will not be passed down, we can't use .preventDefault
                     * Thus, the new listener added below will catch the event immediately
                     * and prevent the context-menu from opening.
                     * Alternative would be to timestamp this call and verify on .onClickOutside
                     * but setTimeout(0) is a universally known hack
                     */
                    this.clickOutsideCallback = this.onClickOutside.bind(this);
                    document.addEventListener('mouseup', this.clickOutsideCallback);
                    document.addEventListener('touchend', this.clickOutsideCallback);
                }, 0);
            }
            else {
                document.removeEventListener('mouseup', this.clickOutsideCallback);
                document.removeEventListener('touchend', this.clickOutsideCallback);
            }
        }
        if (this.childContextMenuItems && focusFirstItem) {
            document.activeElement.blur();
            this.setNextItemAsFocused();
        }
        if (emitCloseEvent) {
            this.closeEvent.emit();
        }
    }
    onClickOutside({ target }) {
        var _a;
        const grandParent = this.elementRef.nativeElement.parentElement.parentElement;
        const parentIsWrapper = grandParent.localName === 'bmw-split-button' || grandParent.localName === 'bmw-menu-button';
        const elementToCheck = parentIsWrapper
            ? this.elementRef.nativeElement.parentElement
            : this.elementRef.nativeElement;
        if (!elementToCheck.contains(target) && !((_a = target.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('bmw-context-menu-item'))) {
            this.opened = this.preserveState;
            document.removeEventListener('mouseup', this.clickOutsideCallback);
            document.removeEventListener('touchend', this.clickOutsideCallback);
        }
    }
};
ContextMenuComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
__decorate([
    ContentChildren(ContextMenuItemComponent)
], ContextMenuComponent.prototype, "childContextMenuItems", void 0);
__decorate([
    Input()
], ContextMenuComponent.prototype, "closeOnClickOutside", void 0);
__decorate([
    Input()
], ContextMenuComponent.prototype, "closeOnSelected", void 0);
__decorate([
    Input('opened')
], ContextMenuComponent.prototype, "opened", null);
__decorate([
    HostBinding('attr.id'),
    Input()
], ContextMenuComponent.prototype, "id", void 0);
__decorate([
    Input()
], ContextMenuComponent.prototype, "keepItemSelected", void 0);
__decorate([
    Input()
], ContextMenuComponent.prototype, "preserveState", void 0);
__decorate([
    Output()
], ContextMenuComponent.prototype, "closeEvent", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], ContextMenuComponent.prototype, "onKeydown", null);
ContextMenuComponent = __decorate([
    Component({
        selector: 'bmw-context-menu',
        template: "<div class=\"bmw-context-menu\" [class.open]=\"opened\">\n  <ng-content></ng-content>\n</div>\n",
        styles: ["div{min-width:100px;box-sizing:border-box;border:solid 1px var(--context-menu__default_border-color);display:none;position:absolute;z-index:var(--context-menu__default__z-index)}div.open{display:block}div:focus{outline-style:none}"]
    })
], ContextMenuComponent);
export { ContextMenuComponent };
//# sourceMappingURL=data:application/json;base64,