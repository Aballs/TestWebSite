var RadiobuttonComponent_1;
import { __decorate, __param } from "tslib";
import { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, EventEmitter, forwardRef, Input, OnDestroy, OnInit, Optional, Output, QueryList, HostListener, ElementRef, Self } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
// RadiobuttonGroupComponent and RadiobuttonComponent exist in the same file in order to prevent a circular dependency
let RadiobuttonGroupComponent = class RadiobuttonGroupComponent {
    constructor(control, _changeDetectorRef) {
        this.control = control;
        this._changeDetectorRef = _changeDetectorRef;
        this._stateChangeSubject = new Subject();
        this._disabled = false;
        this._required = false;
        this._selected = null;
        this._value = null;
        this.groupValueChange = new EventEmitter();
        this.isDirty = false;
        this.isTouched = false;
        this._onChange = () => { };
        this._onTouched = () => { };
        if (this.control) {
            this.control.valueAccessor = this;
        }
        const id = Math.random()
            .toString(36)
            .substring(2);
        this._name = `bmw-radiobutton-group-${id}`;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        this._stateChangeSubject.next();
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value;
        this._stateChangeSubject.next();
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
        this._stateChangeSubject.next();
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (this._value !== newValue) {
            // make sure this is set first before setting values and checked props on children
            this._value = newValue;
            this._updateSelectedRadioFromValue();
            this._checkSelectedRadioButton();
            this.validate();
        }
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                if (this.value) {
                    this._setNextNeighbourRadioButton(event);
                }
                break;
            case 'ArrowUp':
            case 38:
                if (this.value) {
                    this._setPreviousNeighbourRadioButton(event);
                }
                break;
            case 'Space':
            case 32:
                if (!this.value) {
                    const focusedRadioButton = this.radios.find((radio) => radio.elementRef.nativeElement.querySelector('input') === event.target);
                    focusedRadioButton._onInputChange(event);
                }
                event.preventDefault();
                break;
        }
    }
    ngAfterContentInit() {
        this._updateSelectedRadioFromValue();
        this._checkSelectedRadioButton();
    }
    ngOnDestroy() {
        this._stateChangeSubject.complete();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // this is called by child components
    change(value) {
        this.value = value;
        this._onChange(value);
        this.isDirty = true;
        if (this._onTouched) {
            this._onTouched();
        }
        this.isTouched = true;
        this.groupValueChange.emit({ source: this._selected, value: this._value });
        this.validate();
    }
    validate() {
        var _a;
        if (this.radios) {
            if ((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueAccessor) {
                const { touched, dirty, invalid } = this.control;
                this.invalid = invalid ? dirty || touched : false;
            }
            else {
                this.invalid = (this.isDirty || this.isTouched) && this.required && !this._value;
            }
            this.radios.forEach(radio => {
                radio.invalid = this.invalid;
            });
        }
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _updateSelectedRadioFromValue() {
        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this.radios && !isAlreadySelected) {
            this._selected = null;
            this.radios.forEach(radio => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                    radio.focusable = true;
                }
                else if (this.value) {
                    radio.focusable = false;
                }
            });
        }
    }
    _checkSelectedRadioButton() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    _setNextNeighbourRadioButton(event) {
        const radiosArray = this.radios.toArray();
        const currentRadioButtonIndex = radiosArray.findIndex((radioButton) => radioButton.checked);
        if (currentRadioButtonIndex === radiosArray.length - 1) {
            radiosArray[0]._onInputChange(event);
        }
        else {
            radiosArray[currentRadioButtonIndex + 1]._onInputChange(event);
        }
    }
    _setPreviousNeighbourRadioButton(event) {
        const radiosArray = this.radios.toArray();
        const currentRadioButtonIndex = radiosArray.findIndex((radioButton) => radioButton.checked);
        if (currentRadioButtonIndex === 0) {
            radiosArray[radiosArray.length - 1]._onInputChange(event);
        }
        else {
            radiosArray[currentRadioButtonIndex - 1]._onInputChange(event);
        }
    }
};
RadiobuttonGroupComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: ChangeDetectorRef }
];
__decorate([
    Input('disabled')
], RadiobuttonGroupComponent.prototype, "disabled", null);
__decorate([
    Input()
], RadiobuttonGroupComponent.prototype, "required", null);
__decorate([
    Input()
], RadiobuttonGroupComponent.prototype, "name", null);
__decorate([
    Input()
], RadiobuttonGroupComponent.prototype, "value", null);
__decorate([
    Output()
], RadiobuttonGroupComponent.prototype, "groupValueChange", void 0);
__decorate([
    ContentChildren(forwardRef(() => RadiobuttonComponent), { descendants: true })
], RadiobuttonGroupComponent.prototype, "radios", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], RadiobuttonGroupComponent.prototype, "onKeydown", null);
RadiobuttonGroupComponent = __decorate([
    Component({
        selector: 'bmw-radiobutton-group',
        template: '<ng-content></ng-content>',
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __param(0, Self()), __param(0, Optional())
], RadiobuttonGroupComponent);
export { RadiobuttonGroupComponent };
let RadiobuttonComponent = RadiobuttonComponent_1 = class RadiobuttonComponent {
    constructor(radioGroup, elementRef, _changeDetectorRef) {
        this.radioGroup = radioGroup;
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._name = null;
        this._value = null;
        this._checked = false;
        this._disabled = false;
        this._required = false;
        this._focusable = true;
        this.valueChange = new EventEmitter();
        this._invalid = false;
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = () => { };
    }
    get name() {
        return this.radioGroup ? this.radioGroup.name : this._name;
    }
    set name(value) {
        if (this._name !== value) {
            this._name = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (value !== this._value) {
            this._value = value;
            this.onChangeCallback(value);
        }
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        if (this._checked !== value) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    get disabled() {
        return this._disabled || (this.radioGroup && this.radioGroup.disabled);
    }
    set disabled(value) {
        this._disabled = value;
        this._changeDetectorRef.markForCheck();
    }
    get required() {
        return this._required || (this.radioGroup && this.radioGroup.required);
    }
    set required(value) {
        this._required = value;
        this._changeDetectorRef.markForCheck();
    }
    get focusable() {
        return this._focusable;
    }
    set focusable(value) {
        this._focusable = value;
    }
    get invalid() {
        return this._invalid;
    }
    set invalid(value) {
        this._invalid = value;
        this._changeDetectorRef.markForCheck();
    }
    ngOnInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
        if (this.radioGroup) {
            this.name = this.radioGroup.name;
            this._parentChangeSubscription = this.radioGroup._stateChangeSubject.subscribe(() => {
                this._changeDetectorRef.markForCheck();
            });
        }
    }
    ngOnDestroy() {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
        }
    }
    writeValue(value) {
        if (value === this._value) {
            this._checked = true;
            this._changeDetectorRef.markForCheck();
        }
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    touch() {
        this.onTouchedCallback();
    }
    _onInputChange(event) {
        event.stopPropagation();
        this._checked = true;
        this.valueChange.emit({ source: this, value: this._value });
        this.onChangeCallback(this.value);
        if (this.radioGroup && this.value !== this.radioGroup.value) {
            this.radioGroup.change(this.value);
        }
    }
    _onInputClick(event) {
        event.stopPropagation();
    }
};
RadiobuttonComponent.ctorParameters = () => [
    { type: RadiobuttonGroupComponent, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], RadiobuttonComponent.prototype, "id", void 0);
__decorate([
    Input()
], RadiobuttonComponent.prototype, "name", null);
__decorate([
    Input()
], RadiobuttonComponent.prototype, "value", null);
__decorate([
    Input()
], RadiobuttonComponent.prototype, "checked", null);
__decorate([
    Input()
], RadiobuttonComponent.prototype, "disabled", null);
__decorate([
    Input()
], RadiobuttonComponent.prototype, "required", null);
__decorate([
    Output()
], RadiobuttonComponent.prototype, "valueChange", void 0);
RadiobuttonComponent = RadiobuttonComponent_1 = __decorate([
    Component({
        selector: 'bmw-radiobutton',
        template: "<div class=\"radiobutton-container\" [class.disabled]=\"disabled\">\n  <input\n    type=\"radio\"\n    [attr.name]=\"name\"\n    [id]=\"id\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [tabindex]=\"focusable ? 0 : -1\"\n    [class.invalid]=\"invalid\"\n  />\n  <label [for]=\"id\" [class.disabled]=\"disabled\">\n    <span class=\"checkmark\"></span>\n    <div class=\"label bmw-component-text\">\n      <ng-content></ng-content>\n    </div>\n  </label>\n</div>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RadiobuttonComponent_1),
                multi: true
            }
        ],
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block}:host .radiobutton-container{display:block;position:relative;padding-left:var(--radiobutton__padding-left);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}:host .radiobutton-container.disabled{cursor:no-drop}:host .radiobutton-container label{cursor:inherit}:host .radiobutton-container label.disabled{opacity:.5;pointer-events:none}:host .radiobutton-container label.disabled .bmw-component-text{opacity:.5}:host .radiobutton-container div.label{padding-top:calc((var(--radiobutton__height) - var(--radiobutton__line-height))/ 2);padding-bottom:calc((var(--radiobutton__height) - var(--radiobutton__line-height))/ 2);position:relative;color:var(--radiobutton__color)}:host .radiobutton-container input{position:absolute;opacity:0;width:.1px;height:.1px}:host .radiobutton-container input:focus+label .checkmark{box-shadow:0 0 0 1px var(--color-bmw-highlight);outline:transparent solid 1px}:host .radiobutton-container .checkmark{position:absolute;top:calc(50% - var(--radiobutton__height)/ 2);left:0;height:var(--radiobutton__radius);width:var(--radiobutton__radius);border-radius:50%;box-sizing:border-box;border:1px solid var(--radiobutton__border-color);background-color:var(--radiobutton__background-color)}:host .radiobutton-container .checkmark:after{content:'';position:absolute;top:var(--radiobutton__inner-padding);left:var(--radiobutton__inner-padding);width:var(--radiobutton__inner-radius);height:var(--radiobutton__inner-radius);border-radius:50%;background:var(--radiobutton__color);display:none}:host .radiobutton-container input+label:hover .checkmark{background-color:var(--radiobutton__hover__color)}:host .radiobutton-container input:checked+label span.checkmark:after{display:block}::ng-deep bmw-radiobutton-group.ng-invalid.ng-touched .radiobutton-container input+label div,::ng-deep bmw-radiobutton-group.ng-invalid.ng-touched .radiobutton-container input+label span{border-color:var(--radiobutton__error__color)!important;color:var(--radiobutton__error__color)!important}"]
    }),
    __param(0, Optional())
], RadiobuttonComponent);
export { RadiobuttonComponent };
//# sourceMappingURL=data:application/json;base64,