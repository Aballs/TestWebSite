import { __decorate } from "tslib";
import { Component, ElementRef, Input, ViewChild, HostBinding, SimpleChanges, Output, EventEmitter, OnChanges } from '@angular/core';
let ContentTabLabelComponent = class ContentTabLabelComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.change = new EventEmitter();
        // Boolean flag to pre-select this label and the respective content.
        // If multiple tabs per tabset have the selected input set to true, the last one of them will be selected.
        this.selected = false;
        this.disabled = false;
        this.role = 'tab';
    }
    ngOnChanges() {
        this.change.emit();
    }
};
ContentTabLabelComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], ContentTabLabelComponent.prototype, "icon", void 0);
__decorate([
    Input()
], ContentTabLabelComponent.prototype, "for", void 0);
__decorate([
    Output()
], ContentTabLabelComponent.prototype, "change", void 0);
__decorate([
    HostBinding('attr.aria-expanded'),
    HostBinding('attr.aria-selected'),
    Input()
], ContentTabLabelComponent.prototype, "selected", void 0);
__decorate([
    HostBinding('attr.aria-disabled'),
    Input()
], ContentTabLabelComponent.prototype, "disabled", void 0);
__decorate([
    ViewChild('label')
], ContentTabLabelComponent.prototype, "label", void 0);
__decorate([
    HostBinding('attr.role')
], ContentTabLabelComponent.prototype, "role", void 0);
ContentTabLabelComponent = __decorate([
    Component({
        selector: 'bmw-content-tab-label',
        template: "<label #label class=\"bmw-component-headline-text\" [tabindex]=\"selected && !disabled ? 0 : -1\">\n  <i [ngClass]=\"[icon || '']\"></i\n  ><span>\n    <ng-content></ng-content>\n  </span>\n</label>\n",
        styles: ["label{display:block;min-width:var(--content-tabs__label__default__min-width);padding:var(--content-tabs__label__default__padding);padding-bottom:calc(var(--content-tabs__label__default__padding));text-align:center;box-sizing:border-box;border-bottom:2px solid transparent;height:calc(var(--content-tabs__label__default__height) + 2px);z-index:2;cursor:pointer}label span{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:block}label:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}:host.just-icon label{font-family:iwp;font-size:var(--content-tabs__label__icon__font-size);min-width:auto;padding:var(--content-tabs__label__icon__padding);padding-bottom:calc(var(--content-tabs__label__icon__padding));margin-right:var(--content-tabs__label__icon__margin-right)}:host.just-icon label i{display:flex;height:var(--content-tabs__label__icon__font-size)}:host.just-icon label span{display:none}:host.with-icon label{padding-left:var(--content-tabs__label__with-icon__padding-left);position:relative}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){:host.with-icon label{padding-left:30px}}:host.with-icon label i{position:absolute;display:block;left:var(--content-tabs__icon__with-icon__padding-left);top:calc(50% - var(--content-tabs__label__with-icon__icon-size)/ 2 + 1px);font-size:var(--content-tabs__label__with-icon__icon-size)}:host label i{display:none}:host.selected label{border-bottom:2px solid var(--content-tabs__labels__selected__color)}:host.selected label.bmw-component-headline-text{color:var(--content-tabs__labels__selected__color)}label:hover.bmw-component-headline-text{color:var(--content-tabs__labels__hover__color)}:host{display:inline-flex;max-width:100%}:host.disabled{opacity:.5;cursor:no-drop;pointer-events:none}"]
    })
], ContentTabLabelComponent);
export { ContentTabLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC10YWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29udGVudC10YWIvY29udGVudC10YWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxhQUFhLEVBQ2IsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFPdkIsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7SUE2Qm5DLFlBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFuQi9CLFdBQU0sR0FBZ0MsSUFBSSxZQUFZLEVBQWlCLENBQUM7UUFFbEYsb0VBQW9FO1FBQ3BFLDBHQUEwRztRQUkxRyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBSWpCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFNakIsU0FBSSxHQUFHLEtBQUssQ0FBQztJQUUrQixDQUFDO0lBRTdDLFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRixDQUFBOztZQUxnQyxVQUFVOztBQXpCekM7SUFEQyxLQUFLLEVBQUU7c0RBQ0s7QUFJYjtJQURDLEtBQUssRUFBRTtxREFDSTtBQUVGO0lBQVQsTUFBTSxFQUFFO3dEQUF5RTtBQU9sRjtJQUhDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztJQUNqQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7SUFDakMsS0FBSyxFQUFFOzBEQUNTO0FBSWpCO0lBRkMsV0FBVyxDQUFDLG9CQUFvQixDQUFDO0lBQ2pDLEtBQUssRUFBRTswREFDUztBQUdqQjtJQURDLFNBQVMsQ0FBQyxPQUFPLENBQUM7dURBQ0Q7QUFHbEI7SUFEQyxXQUFXLENBQUMsV0FBVyxDQUFDO3NEQUNaO0FBM0JGLHdCQUF3QjtJQUxwQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsdUJBQXVCO1FBQ2pDLG9OQUFpRDs7S0FFbEQsQ0FBQztHQUNXLHdCQUF3QixDQWtDcEM7U0FsQ1ksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgVmlld0NoaWxkLFxuICBIb3N0QmluZGluZyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LWNvbnRlbnQtdGFiLWxhYmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbnRlbnQtdGFiLWxhYmVsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY29udGVudC10YWItbGFiZWwuY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50VGFiTGFiZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvLyBUaGUgQ1NTIGNsYXNzIG9mIGFuIGljb24uXG4gIC8vIE5vdGUgdGhhdCB0aGUgaWNvbiB3b24ndCBiZSBzaG93biB1bmxlc3MgdGhlIHdpdGhJY29uIGZsYWcgaXMgc2V0IHRvIHRydWUgb24gdGhlIHBhcmVudCBjb21wb25lbnQuXG4gIEBJbnB1dCgpXG4gIGljb246IHN0cmluZztcblxuICAvLyBUaGUgaWQgb2YgdGhlIGJtdy1jb250ZW50LXRhYi1jb250ZW50IGNvbXBvbmVudCBmb3IgdGhpcyBsYWJlbC5cbiAgQElucHV0KClcbiAgZm9yOiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpIGNoYW5nZTogRXZlbnRFbWl0dGVyPFNpbXBsZUNoYW5nZXM+ID0gbmV3IEV2ZW50RW1pdHRlcjxTaW1wbGVDaGFuZ2VzPigpO1xuXG4gIC8vIEJvb2xlYW4gZmxhZyB0byBwcmUtc2VsZWN0IHRoaXMgbGFiZWwgYW5kIHRoZSByZXNwZWN0aXZlIGNvbnRlbnQuXG4gIC8vIElmIG11bHRpcGxlIHRhYnMgcGVyIHRhYnNldCBoYXZlIHRoZSBzZWxlY3RlZCBpbnB1dCBzZXQgdG8gdHJ1ZSwgdGhlIGxhc3Qgb25lIG9mIHRoZW0gd2lsbCBiZSBzZWxlY3RlZC5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZXhwYW5kZWQnKVxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1zZWxlY3RlZCcpXG4gIEBJbnB1dCgpXG4gIHNlbGVjdGVkID0gZmFsc2U7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZGlzYWJsZWQnKVxuICBASW5wdXQoKVxuICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gIEBWaWV3Q2hpbGQoJ2xhYmVsJylcbiAgbGFiZWw6IEVsZW1lbnRSZWY7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKVxuICByb2xlID0gJ3RhYic7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdCgpO1xuICB9XG59XG4iXX0=