import { __decorate } from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, HostListener, ViewChild, AfterViewInit } from '@angular/core';
import { ContentTabContentComponent } from './content-tab-content.component';
import { ContentTabLabelComponent } from './content-tab-label.component';
import { Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
let ContentTabComponent = class ContentTabComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // if TRUE, then on tab label click a requestSelectionChange event is emitted
        this.guardSelectionChange = false;
        /**
         * expanding content toggle input (default = false)
         */
        this.expandContent = false;
        this.allowSelectionChange$ = new Subject();
        this.unsubscribe$ = new Subject();
        // the selectionChange event contains the value of the "for" input of the selected label
        this.selectionChange = new EventEmitter();
        this.requestSelectionChange = new EventEmitter();
    }
    onHashChange() {
        const urlFragment = window.location.hash.substr(1);
        const labelArray = this.labels.toArray();
        const targetTabIndex = labelArray.findIndex(label => label.for === urlFragment);
        if (targetTabIndex !== -1) {
            let tabSearch = labelArray[targetTabIndex];
            if (tabSearch.disabled) {
                tabSearch = null;
                let nextIndexToTest = targetTabIndex === 0 ? labelArray.length - 1 : targetTabIndex - 1;
                while (!tabSearch && nextIndexToTest !== targetTabIndex) {
                    const tabToTest = labelArray[nextIndexToTest];
                    if (!tabToTest.disabled) {
                        tabSearch = tabToTest;
                    }
                    nextIndexToTest = nextIndexToTest === 0 ? labelArray.length - 1 : nextIndexToTest - 1;
                }
            }
            if (tabSearch) {
                this.updateLabelSelection(tabSearch.for);
            }
        }
    }
    onKeyDown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                this.focusMenuTabOption(2 /* Down */);
                event.stopPropagation();
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                this.focusMenuTabOption(0 /* Up */);
                event.stopPropagation();
                event.preventDefault();
                break;
            case 'ArrowLeft':
            case 37:
                if (event.target.classList.contains('bmw-component-headline-text')) {
                    this.selectNeighbourContentTab(event.target, 3 /* Left */);
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
            case 'ArrowRight':
            case 39:
                if (event.target.classList.contains('bmw-component-headline-text')) {
                    this.selectNeighbourContentTab(event.target, 1 /* Right */);
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
                if (this.hiddenLabels.classList.contains('opened')) {
                    const focusedTabOptionID = this.getFocusedTabOptionID();
                    if (focusedTabOptionID) {
                        if (this.guardSelectionChange) {
                            this.requestLabelSelection(focusedTabOptionID);
                        }
                        else {
                            this.updateLabelSelection(focusedTabOptionID);
                        }
                        this.labels.find(label => label.for === focusedTabOptionID).label.nativeElement.focus();
                        event.stopPropagation();
                        event.preventDefault();
                    }
                }
                break;
            case 'Space':
            case 32:
                if (event.target === this.elementRef.nativeElement.querySelector('.three-dots')) {
                    this.toggleHiddenLabels();
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
        }
    }
    ngOnInit() {
        if (typeof this.justIcon !== 'undefined') {
            this.justIcon = true;
        }
        if (typeof this.withIcon !== 'undefined' && !this.justIcon) {
            this.withIcon = true;
        }
        this.hiddenLabels = this.elementRef.nativeElement.querySelector('.three-dots');
        this.hiddenLabels.addEventListener('focusout', e => {
            const leavingParent = !this.hiddenLabels.contains(e.relatedTarget);
            if (leavingParent) {
                this.toggleHiddenLabels(false);
            }
        });
        this.setResizeTrigger();
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    }
    ngAfterViewInit() {
        this.getArticles();
        this.prepareLabels();
        this.labels.changes.subscribe(() => {
            this.selected = null;
            this.prepareLabels();
        });
        this.labels.toArray().forEach(label => {
            label.change.subscribe(() => {
                this.prepareLabels();
            });
        });
        this.hideTabsContentIfAllAreDisabled();
        this.onHashChange();
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    getArticles() {
        const wrapperChildren = this.contentTabWrapper.nativeElement.children;
        this.articles = [];
        for (const childNode of wrapperChildren) {
            if (childNode.tagName.toLowerCase() === 'bmw-content-tab-content') {
                this.articles.push(childNode);
            }
        }
    }
    prepareLabels() {
        if (!this.labels)
            return;
        let reSelect = false;
        for (let i = 0; i < this.labels.toArray().length; i++) {
            const label = this.labels.toArray()[i];
            label.elementRef.nativeElement.dataset.order = i;
            const id = label.for;
            if (label.selected && !label.disabled) {
                this.setSelected(id);
            }
            if (label.disabled) {
                label.elementRef.nativeElement.classList.add('disabled');
                reSelect = this.selected === label.for;
            }
            else if (label.elementRef.nativeElement.classList.contains('disabled')) {
                label.elementRef.nativeElement.classList.remove('disabled');
            }
            // note that the event will still be handled if it is submitted directly (e.g. $('bmw-content-tab-label.disabled').click())
            label.elementRef.nativeElement.addEventListener('click', (e) => this.onClickLabel(e, id));
            label.elementRef.nativeElement.classList.add(this.justIcon ? 'just-icon' : this.withIcon ? 'with-icon' : 'just-text');
        }
        const firstEnabledLabel = this.labels.toArray().find(label => !label.disabled);
        if (reSelect || (!this.selected && firstEnabledLabel)) {
            this.setSelected(firstEnabledLabel.for);
        }
        setTimeout(() => {
            this.hideLabelsIfNecessary();
        }, 10);
        // run once again after css variables are replaces in IE
        setTimeout(() => {
            this.hideLabelsIfNecessary(true);
        }, 500);
    }
    onClickLabel(event, labelId) {
        if (this.guardSelectionChange) {
            this.requestLabelSelection(labelId);
        }
        else {
            this.updateLabelSelection(labelId);
        }
        event.stopPropagation();
    }
    updateLabelSelection(labelId) {
        if (this.selected !== labelId) {
            this.setSelected(labelId);
            this.selectionChange.emit(labelId);
            this.hideLabelsIfNecessary(true);
            this.toggleHiddenLabels(false);
        }
    }
    requestLabelSelection(labelId) {
        this.allowSelectionChange$
            .pipe(
        // ensures the subscription completes after the first click event
        take(1), filter(allowChange => !!allowChange), takeUntil(this.unsubscribe$))
            .subscribe(() => this.updateLabelSelection(labelId));
        const currentSelectedLabel = this.getSelectedLabel();
        this.requestSelectionChange.emit({
            currentSelection: currentSelectedLabel && currentSelectedLabel.for,
            requestedSelection: labelId,
            allowSelectionChange$: this.allowSelectionChange$
        });
    }
    setResizeTrigger() {
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            const that = this;
            resizeTimer = setTimeout(() => {
                that.hideLabelsIfNecessary(true);
            }, 10);
        });
    }
    setSelected(selected) {
        this.selected = selected;
        const labelsArray = this.labels.toArray();
        for (let i = 0; i < labelsArray.length; i++) {
            const id = labelsArray[i].for;
            if (selected === id) {
                labelsArray[i].elementRef.nativeElement.classList.add('selected');
                setTimeout(() => {
                    labelsArray[i].selected = true;
                }, 0);
            }
            else {
                labelsArray[i].elementRef.nativeElement.classList.remove('selected');
                labelsArray[i].selected = false;
            }
        }
        for (let i = 0; i < this.articles.length; i++) {
            const id = this.articles[i].getAttribute('id');
            if (selected === id) {
                this.articles[i].classList.add('selected');
            }
            else {
                this.articles[i].classList.remove('selected');
            }
        }
    }
    hideLabelsIfNecessary(showAllFirst) {
        const labelsDiv = this.elementRef.nativeElement.querySelector('div.labels');
        if (showAllFirst) {
            this.showAllLabels(labelsDiv);
        }
        const height = labelsDiv.offsetHeight;
        const defaultHeight = this.elementRef.nativeElement.querySelector('.labels .border').offsetHeight;
        if (height > defaultHeight) {
            this.createHiddenLabelsMenuElement();
            const hasMoreNonActiveLabels = this.hideLastNonActiveLabel(labelsDiv);
            if (hasMoreNonActiveLabels) {
                this.hideLabelsIfNecessary();
            }
        }
    }
    hideTabsContentIfAllAreDisabled() {
        if (!this.labels.toArray().find(label => !label.disabled)) {
            this.tabContents.toArray().forEach(tabContent => (tabContent.hide = true));
        }
    }
    showAllLabels(parentElement) {
        if (!this.hiddenLabelsMenu)
            return;
        const length = this.hiddenLabelsMenu.children.length;
        for (let i = 0; i < length; i++) {
            parentElement.prepend(this.hiddenLabelsMenu.children[0]);
        }
        this.hiddenLabels.removeChild(this.hiddenLabelsMenu);
        this.hiddenLabelsMenu = undefined;
        this.sort(parentElement);
    }
    sort(parentElement) {
        let array = parentElement.children;
        array = Array.from(array).sort((a, b) => {
            return a.dataset.order - b.dataset.order;
        });
        for (let i = 0; i < array.length; i++) {
            parentElement.append(array[i]);
        }
    }
    /**
     * Removes the last non-active label from view and adds it to the three-dots menu
     * @returns boolean indicating if there are more non-active labels in view
     */
    hideLastNonActiveLabel(parentElement) {
        let hasMoreNonActiveLabels = true;
        const tabArray = [...parentElement.children].filter(child => !child.classList.contains('border') &&
            !child.classList.contains('three-dots') &&
            !child.classList.contains('selected'));
        this.hiddenLabelsMenu.prepend(tabArray.pop());
        if (tabArray.length === 0) {
            hasMoreNonActiveLabels = false;
        }
        return hasMoreNonActiveLabels;
    }
    createHiddenLabelsMenuElement() {
        if (this.hiddenLabelsMenu)
            return;
        this.hiddenLabelsMenu = document.createElement('div');
        this.hiddenLabelsMenu.classList.add('menu');
        this.hiddenLabels.append(this.hiddenLabelsMenu);
    }
    toggleHiddenLabels(state) {
        if (!this.hiddenLabels)
            return;
        if (this.hiddenLabelsMenu) {
            const rectangle = this.hiddenLabels.getBoundingClientRect();
            const position = rectangle.x + rectangle.width - 2;
            this.hiddenLabelsMenu.style['max-width'] = position + 'px';
        }
        const opened = this.hiddenLabels.classList.contains('opened');
        if (state === true) {
            this.hiddenLabels.classList.add('opened');
        }
        else if (state === false) {
            this.hiddenLabels.classList.remove('opened');
        }
        else if (opened) {
            this.hiddenLabels.classList.remove('opened');
        }
        else {
            this.hiddenLabels.classList.add('opened');
        }
    }
    getSelectedLabel() {
        return this.labels && this.labels.find(label => this.selected === label.for);
    }
    selectNeighbourContentTab(contentTabLabel, direction) {
        const visibleLabelsArray = Array.prototype.slice.call(this.labelsWrapper.nativeElement.querySelectorAll('bmw-content-tab-label > .bmw-component-headline-text'));
        if (contentTabLabel === this.elementRef.nativeElement.querySelector('.three-dots')) {
            switch (direction) {
                case 3 /* Left */:
                    this.selectAndFocusContentTab(visibleLabelsArray.length - 1);
                    break;
                case 1 /* Right */:
                    this.selectAndFocusContentTab(0);
                    break;
                default:
                    break;
            }
        }
        else {
            const targetedTabLabel = visibleLabelsArray.find((tab) => tab === contentTabLabel);
            if (visibleLabelsArray.length > 0) {
                if (targetedTabLabel) {
                    if (this.hiddenLabelsMenu &&
                        ((targetedTabLabel === visibleLabelsArray[0] && direction === 3 /* Left */) ||
                            (targetedTabLabel === visibleLabelsArray[visibleLabelsArray.length - 1] && direction === 1 /* Right */))) {
                        this.elementRef.nativeElement.querySelector('.three-dots').focus();
                    }
                    else {
                        const beforeChangeTabIndex = visibleLabelsArray.findIndex((tabLabel) => tabLabel === targetedTabLabel);
                        const tabToSelectIndex = this.getNeighbourContentTabLabelIndex(beforeChangeTabIndex, direction);
                        if (tabToSelectIndex >= 0) {
                            this.selectAndFocusContentTab(tabToSelectIndex);
                        }
                        else {
                            throw new Error('Could not find a tab to select');
                        }
                    }
                }
                else {
                    throw new Error('The specified target does not correspond to a tab´s label container');
                }
            }
            else {
                throw new Error('There are no content tab labels defined');
            }
        }
    }
    selectAndFocusContentTab(tabToSelectIndex) {
        const visibleContentTabLabelsArray = Array.prototype.slice.call(this.labelsWrapper.nativeElement.querySelectorAll('bmw-content-tab-label'));
        const tabToSelectID = visibleContentTabLabelsArray[tabToSelectIndex].getAttribute('for');
        this.setSelected(tabToSelectID);
        if (this.guardSelectionChange) {
            this.requestLabelSelection(tabToSelectID);
        }
        else {
            this.updateLabelSelection(tabToSelectID);
        }
        visibleContentTabLabelsArray[tabToSelectIndex].querySelector('.bmw-component-headline-text').focus();
    }
    getNeighbourContentTabLabelIndex(contentTabLabelIndex, direction) {
        const visibleContentTabLabelsArray = Array.prototype.slice.call(this.labelsWrapper.nativeElement.querySelectorAll('bmw-content-tab-label'));
        let neighbourContentTabLabelIndex = -1;
        if (visibleContentTabLabelsArray.find(label => !label.classList.contains('disabled'))) {
            switch (direction) {
                case 3 /* Left */:
                    if (contentTabLabelIndex === 0) {
                        neighbourContentTabLabelIndex = visibleContentTabLabelsArray.length - 1;
                    }
                    else {
                        neighbourContentTabLabelIndex = contentTabLabelIndex - 1;
                    }
                    break;
                case 1 /* Right */:
                    if (contentTabLabelIndex === visibleContentTabLabelsArray.length - 1) {
                        neighbourContentTabLabelIndex = 0;
                    }
                    else {
                        neighbourContentTabLabelIndex = contentTabLabelIndex + 1;
                    }
                    break;
                default:
                    break;
            }
            if (visibleContentTabLabelsArray[neighbourContentTabLabelIndex].classList.contains('disabled') ||
                this.isContentTabLabelHidden(visibleContentTabLabelsArray[neighbourContentTabLabelIndex].getAttribute('for'))) {
                neighbourContentTabLabelIndex = this.getNeighbourContentTabLabelIndex(neighbourContentTabLabelIndex, direction);
            }
        }
        else {
            throw new Error('There are no enabled tabs available');
        }
        return neighbourContentTabLabelIndex;
    }
    getFocusedTabOptionID() {
        const focusedTabOption = Array.prototype.slice
            .call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'))
            .find((tabOption) => tabOption.classList.contains('focused'));
        return focusedTabOption ? focusedTabOption.attributes.for.nodeValue : '';
    }
    isContentTabLabelHidden(contentTabID) {
        let isTabLabelHidden = false;
        if (this.hiddenLabelsMenu) {
            const hiddenLabelsIDs = Array.prototype.slice
                .call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'))
                .map((hiddenLabel) => hiddenLabel.getAttribute('for'));
            isTabLabelHidden = hiddenLabelsIDs.indexOf(contentTabID) > -1;
        }
        return isTabLabelHidden;
    }
    focusMenuTabOption(direction) {
        if (this.hiddenLabels.classList.contains('opened')) {
            if (this.hiddenLabelsMenu) {
                const hiddenTabOptions = Array.prototype.slice.call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'));
                if (hiddenTabOptions.length &&
                    hiddenTabOptions.some((tabOption) => !tabOption.classList.contains('disabled'))) {
                    const focusedTabOptionIndex = hiddenTabOptions.findIndex((tabOption) => tabOption.classList.contains('focused'));
                    hiddenTabOptions.forEach((tabOption) => tabOption.classList.remove('focused'));
                    switch (direction) {
                        case 0 /* Up */:
                            this.setPreviousTabOptionAsFocused(focusedTabOptionIndex);
                            break;
                        case 2 /* Down */:
                            this.setNextTabOptionAsFocused(focusedTabOptionIndex);
                            break;
                        default:
                            break;
                    }
                }
            }
            else {
                throw new Error('There are no options in the three-dots container');
            }
        }
    }
    setNextTabOptionAsFocused(tabOptionIndex) {
        const hiddenTabOptions = Array.prototype.slice.call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'));
        if (tabOptionIndex !== -1 && tabOptionIndex !== hiddenTabOptions.length - 1) {
            tabOptionIndex = tabOptionIndex + 1;
        }
        else {
            tabOptionIndex = 0;
        }
        if (hiddenTabOptions[tabOptionIndex].classList.contains('disabled')) {
            this.setNextTabOptionAsFocused(tabOptionIndex);
        }
        else {
            hiddenTabOptions[tabOptionIndex].classList.add('focused');
            hiddenTabOptions[tabOptionIndex].querySelector('label').focus();
        }
    }
    setPreviousTabOptionAsFocused(tabOptionIndex) {
        const hiddenTabOptions = Array.prototype.slice.call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'));
        if (tabOptionIndex !== -1 && tabOptionIndex !== 0) {
            tabOptionIndex = tabOptionIndex - 1;
        }
        else {
            tabOptionIndex = hiddenTabOptions.length - 1;
        }
        if (hiddenTabOptions[tabOptionIndex].classList.contains('disabled')) {
            this.setPreviousTabOptionAsFocused(tabOptionIndex);
        }
        else {
            hiddenTabOptions[tabOptionIndex].classList.add('focused');
            hiddenTabOptions[tabOptionIndex].querySelector('label').focus();
        }
    }
};
ContentTabComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    ContentChildren(ContentTabLabelComponent)
], ContentTabComponent.prototype, "labels", void 0);
__decorate([
    ContentChildren(ContentTabContentComponent)
], ContentTabComponent.prototype, "tabContents", void 0);
__decorate([
    ViewChild('contentTabWrapper')
], ContentTabComponent.prototype, "contentTabWrapper", void 0);
__decorate([
    ViewChild('labelsWrapper')
], ContentTabComponent.prototype, "labelsWrapper", void 0);
__decorate([
    Input()
], ContentTabComponent.prototype, "justIcon", void 0);
__decorate([
    Input()
], ContentTabComponent.prototype, "withIcon", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], ContentTabComponent.prototype, "id", void 0);
__decorate([
    Input()
], ContentTabComponent.prototype, "guardSelectionChange", void 0);
__decorate([
    HostBinding('class.expanding'), Input()
], ContentTabComponent.prototype, "expandContent", void 0);
__decorate([
    Output()
], ContentTabComponent.prototype, "selectionChange", void 0);
__decorate([
    Output()
], ContentTabComponent.prototype, "requestSelectionChange", void 0);
__decorate([
    HostListener('window:hashchange')
], ContentTabComponent.prototype, "onHashChange", null);
__decorate([
    HostListener('keydown', ['$event'])
], ContentTabComponent.prototype, "onKeyDown", null);
ContentTabComponent = __decorate([
    Component({
        selector: 'bmw-content-tab',
        template: "<div [ngClass]=\"{ wrapper: true, 'wrapper--expanding': expandContent }\" #contentTabWrapper>\n  <div [ngClass]=\"{ labels: true, 'labels--expanding': expandContent }\" role=\"tablist\" #labelsWrapper>\n    <ng-content select=\"bmw-content-tab-label\"></ng-content>\n    <div class=\"three-dots\" (click)=\"toggleHiddenLabels()\" tabindex=\"-1\"></div>\n    <div class=\"border\"></div>\n  </div>\n  <ng-content select=\"bmw-content-tab-content\"></ng-content>\n</div>\n",
        styles: [":host{min-height:0;flex-direction:column;display:flex}:host.expanding{height:100%}.three-dots{position:absolute;top:0;right:0;display:inline-block;order:2;box-sizing:content-box;height:calc(var(--content-tabs__label__default__height));z-index:2}.three-dots:empty{display:none}.three-dots:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}.three-dots ::ng-deep .menu{display:none;position:absolute;background-color:var(--content-tabs__more-dots__menu__background-color);top:100%;right:0;z-index:var(--content-tabs__z-index-base);border:solid 1px var(--content-tabs__more-dots__menu__border-color)}.three-dots ::ng-deep .menu ::ng-deep bmw-content-tab-label{display:block;max-width:100%}.three-dots ::ng-deep .menu ::ng-deep bmw-content-tab-label.focused{background-color:var(--combo-box__dropdown-item__hover__background-color)}.three-dots.opened ::ng-deep .menu{display:inline-block}.three-dots::after{display:inline-block;line-height:1;font-size:var(--content-tabs__more-dots__menu__font-size);padding:var(--content-tabs__label__icon__padding);padding-bottom:calc(var(--content-tabs__label__icon__padding) - 2px);font-family:iwp;color:var(--content-tabs__labels__default__color);content:'\\ea22';cursor:pointer}.labels{padding-right:var(--content-tabs__label__default__height);position:relative;display:flex;flex:1 0 auto;flex-wrap:wrap}.labels:focus{outline:0}.labels--expanding{flex:0 1 auto}.labels .border{position:absolute;width:100%;left:0;top:0;height:calc(var(--content-tabs__label__default__height) + 2px);box-sizing:border-box;border-bottom:2px solid var(--content-tabs__labels__default__border-color)}.wrapper{min-width:calc(100px + var(--content-tabs__label__default__height));min-height:0;flex-direction:column;display:flex}.wrapper--expanding{flex:1 0 auto;height:100%}"]
    })
], ContentTabComponent);
export { ContentTabComponent };
//# sourceMappingURL=data:application/json;base64,