import { __decorate } from "tslib";
import { Component, ElementRef, HostBinding, HostListener, Input, OnInit, Output } from '@angular/core';
import { Subject } from 'rxjs';
let BottomNavigationItemComponent = class BottomNavigationItemComponent {
    constructor(el) {
        this.el = el;
        this._selected = false;
        this.tabIndex = 0;
        this.selectedChange = new Subject();
    }
    set selected(value) {
        if (value === this._selected)
            return;
        this._selected = value;
        if (this._selected) {
            this.selectedChange.next(this._selected);
        }
    }
    get selected() {
        return this._selected;
    }
    ngOnInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    }
    click() {
        this._selected = !this._selected;
        this.selectedChange.next(this._selected);
    }
    get nativeElement() {
        return this.el.nativeElement;
    }
};
BottomNavigationItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], BottomNavigationItemComponent.prototype, "icon", void 0);
__decorate([
    HostBinding('title'),
    Input()
], BottomNavigationItemComponent.prototype, "label", void 0);
__decorate([
    HostBinding('class.selected'),
    Input()
], BottomNavigationItemComponent.prototype, "selected", null);
__decorate([
    HostBinding('attr.id'),
    Input()
], BottomNavigationItemComponent.prototype, "id", void 0);
__decorate([
    HostBinding('tabindex')
], BottomNavigationItemComponent.prototype, "tabIndex", void 0);
__decorate([
    Output()
], BottomNavigationItemComponent.prototype, "selectedChange", void 0);
__decorate([
    HostListener('click')
], BottomNavigationItemComponent.prototype, "click", null);
BottomNavigationItemComponent = __decorate([
    Component({
        selector: 'bmw-bottom-navigation-item',
        template: "<i [ngClass]=\"icon\"> </i>\n<span class=\"label bmw-small-text\" [textContent]=\"label\"></span>\n",
        styles: [":host{display:flex;flex-direction:column;align-items:center;justify-content:center;min-height:var(--bottom-navigation-item__min-height);min-width:calc(var(--bottom-navigation-item__min-width) - (2 * var(--bottom-navigation-item__padding)));padding:0 var(--bottom-navigation-item__padding);cursor:pointer}:host:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}:host:focus.selected:not(.secondary){outline:solid 1px;outline-color:var(--color-bmw-basic5);outline-offset:-3px}:host:hover:not(.selected){background-color:var(--bottom-navigation__hover__background-color)}:host.selected:not(.secondary){background-color:var(--bottom-navigation__selected__background-color)}:host.selected:not(.secondary) i,:host.selected:not(.secondary) span{color:var(--bottom-navigation__selected__color)}:host.secondary.child-selected:not(.selected){background-color:var(--bottom-navigation__selected__background-color)}:host.secondary.child-selected:not(.selected):focus{outline:solid 1px;outline-color:var(--color-bmw-basic5);outline-offset:-3px}:host.secondary.child-selected:not(.selected) i,:host.secondary.child-selected:not(.selected) span{color:var(--bottom-navigation__selected__color)}:host.secondary.selected{background-color:var(--bottom-navigation__secondary-selected__color)}:host i{color:var(--bottom-navigation__default__color);font-family:iwp;font-size:var(--bottom-navigation-item__icon__font-size);height:var(--bottom-navigation-item__icon__font-size);text-align:center;width:var(--bottom-navigation-item__icon__font-size)}:host span{margin-top:var(--bottom-navigation-item__free-space);white-space:nowrap;text-overflow:ellipsis;max-width:100%;overflow:hidden}:host-context(bmw-bottom-navigation.base-container){flex:1 1 100%}"]
    })
], BottomNavigationItemComponent);
export { BottomNavigationItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90dG9tLW5hdmlnYXRpb24taXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYm13LWRzL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJib3R0b20tbmF2aWdhdGlvbi9ib3R0b20tbmF2aWdhdGlvbi1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTy9CLElBQWEsNkJBQTZCLEdBQTFDLE1BQWEsNkJBQTZCO0lBQ3hDLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQzFCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUE0QjFCLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFHYixtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7SUFoQ0gsQ0FBQztJQVl0QyxJQUFJLFFBQVEsQ0FBQyxLQUFjO1FBQ3pCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxTQUFTO1lBQUUsT0FBTztRQUVyQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBWUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2lCQUNwQixRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUNaLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFHRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQy9CLENBQUM7Q0FDRixDQUFBOztZQW5EeUIsVUFBVTs7QUFJbEM7SUFEQyxLQUFLLEVBQUU7MkRBQ0s7QUFJYjtJQUZDLFdBQVcsQ0FBQyxPQUFPLENBQUM7SUFDcEIsS0FBSyxFQUFFOzREQUNNO0FBSWQ7SUFGQyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDN0IsS0FBSyxFQUFFOzZEQVFQO0FBT0Q7SUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ3RCLEtBQUssRUFBRTt5REFDRztBQUdYO0lBREMsV0FBVyxDQUFDLFVBQVUsQ0FBQzsrREFDWDtBQUdiO0lBREMsTUFBTSxFQUFFO3FFQUMrQjtBQVd4QztJQURDLFlBQVksQ0FBQyxPQUFPLENBQUM7MERBSXJCO0FBL0NVLDZCQUE2QjtJQUx6QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsNEJBQTRCO1FBQ3RDLCtHQUFzRDs7S0FFdkQsQ0FBQztHQUNXLDZCQUE2QixDQW9EekM7U0FwRFksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LWJvdHRvbS1uYXZpZ2F0aW9uLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vYm90dG9tLW5hdmlnYXRpb24taXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2JvdHRvbS1uYXZpZ2F0aW9uLWl0ZW0uY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBCb3R0b21OYXZpZ2F0aW9uSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG4gIHByaXZhdGUgX3NlbGVjdGVkID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgaWNvbjogc3RyaW5nO1xuXG4gIEBIb3N0QmluZGluZygndGl0bGUnKVxuICBASW5wdXQoKVxuICBsYWJlbDogc3RyaW5nO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2VsZWN0ZWQnKVxuICBASW5wdXQoKVxuICBzZXQgc2VsZWN0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMuX3NlbGVjdGVkKSByZXR1cm47XG5cbiAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgIGlmICh0aGlzLl9zZWxlY3RlZCkge1xuICAgICAgdGhpcy5zZWxlY3RlZENoYW5nZS5uZXh0KHRoaXMuX3NlbGVjdGVkKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gIEBJbnB1dCgpXG4gIGlkOiBzdHJpbmc7XG5cbiAgQEhvc3RCaW5kaW5nKCd0YWJpbmRleCcpXG4gIHRhYkluZGV4ID0gMDtcblxuICBAT3V0cHV0KClcbiAgc2VsZWN0ZWRDaGFuZ2UgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgdGhpcy5pZCA9IE1hdGgucmFuZG9tKClcbiAgICAgICAgLnRvU3RyaW5nKDM2KVxuICAgICAgICAuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgY2xpY2soKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWQgPSAhdGhpcy5fc2VsZWN0ZWQ7XG4gICAgdGhpcy5zZWxlY3RlZENoYW5nZS5uZXh0KHRoaXMuX3NlbGVjdGVkKTtcbiAgfVxuXG4gIGdldCBuYXRpdmVFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==