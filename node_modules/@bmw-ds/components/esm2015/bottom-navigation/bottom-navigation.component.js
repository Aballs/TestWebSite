import { __decorate } from "tslib";
import { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList, Renderer2, ViewChild, HostListener, ChangeDetectorRef } from '@angular/core';
import { BottomNavigationItemComponent } from './bottom-navigation-item.component';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
let BottomNavigationComponent = class BottomNavigationComponent {
    constructor(renderer, cdRef) {
        this.renderer = renderer;
        this.cdRef = cdRef;
        this.selectionChanged = new EventEmitter();
        this.childOfMoreSelected = false;
        this._moreSelected = false;
        this.onDestroy$ = new Subject();
    }
    get moreSelected() {
        return this._moreSelected;
    }
    onKeydown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                if (this._moreSelected) {
                    this.setNextItemAsFocused();
                }
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                if (this._moreSelected) {
                    this.setPreviousItemAsFocused();
                }
                event.preventDefault();
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                if (event.target === this.moreButton.nativeElement) {
                    this.moreButton.nativeElement.click();
                }
                else {
                    const targetedItem = this.items.find(item => item.nativeElement === event.target);
                    if (targetedItem) {
                        targetedItem.nativeElement.click();
                        if (this.moreEntries.some(item => item.nativeElement === event.target)) {
                            this.moreButton.nativeElement.focus();
                        }
                    }
                }
                this.cdRef.detectChanges();
                event.preventDefault();
                break;
            case 'Tab':
            case 9:
                if (this._moreSelected &&
                    this.moreEntries.some(item => item.nativeElement === document.activeElement)) {
                    this.toggleMore(false);
                    this.moreButton.nativeElement.focus();
                    event.preventDefault();
                    event.stopPropagation();
                }
                break;
            case 'Escape':
            case 27:
                this.toggleMore(false);
                this.moreButton.nativeElement.focus();
                event.preventDefault();
                break;
        }
    }
    ngAfterContentInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
        this.items.changes.subscribe(value => {
            this.processTransclusion();
        });
        this.processTransclusion();
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    toggleMore(forcedState) {
        if (this._moreSelected || forcedState === false) {
            this._moreSelected = false;
        }
        else if (!this._moreSelected || forcedState === true) {
            this._moreSelected = true;
        }
    }
    processTransclusion() {
        this.items.forEach(item => {
            item.selectedChange.pipe(takeUntil(this.onDestroy$)).subscribe((selected) => {
                this.selectItem(item, selected);
            });
        });
        if (this.menuEntries.length > 5) {
            this.moreEntries = this.menuEntries.filter((item, index) => index >= 4);
            this.moreEntries.forEach(item => {
                this.renderer.removeChild(this.baseContainer.nativeElement, item.nativeElement);
                this.renderer.appendChild(this.moreContainer.nativeElement, item.nativeElement);
                item.tabIndex = -1;
            });
        }
    }
    setPreviousItemAsFocused() {
        if (this._moreSelected && this.moreEntries.length > 0) {
            let focusedItemIndex = this.moreEntries.findIndex(item => item.nativeElement === document.activeElement);
            if (focusedItemIndex !== -1 && focusedItemIndex !== 0) {
                focusedItemIndex = focusedItemIndex - 1;
            }
            else {
                focusedItemIndex = this.moreEntries.length - 1;
            }
            this.moreEntries[focusedItemIndex].nativeElement.focus();
            this.cdRef.detectChanges();
        }
    }
    setNextItemAsFocused() {
        if (this._moreSelected && this.moreEntries.length > 0) {
            let focusedItemIndex = this.moreEntries.findIndex(item => item.nativeElement === document.activeElement);
            if (focusedItemIndex !== -1 && focusedItemIndex !== this.moreEntries.length - 1) {
                focusedItemIndex = focusedItemIndex + 1;
            }
            else {
                focusedItemIndex = 0;
            }
            this.moreEntries[focusedItemIndex].nativeElement.focus();
            this.cdRef.detectChanges();
        }
    }
    selectItem(targetItem, selectedState) {
        if (selectedState) {
            this.items.forEach(item => {
                if (targetItem !== item) {
                    item.selected = false;
                }
            });
            if (this.moreEntries && this.moreEntries.includes(targetItem)) {
                this.childOfMoreSelected = true;
            }
            else {
                this.childOfMoreSelected = false;
            }
        }
        else {
            this.childOfMoreSelected = false;
        }
        this.toggleMore(false);
        this.selectionChanged.emit({ item: targetItem, selected: selectedState });
    }
};
BottomNavigationComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
__decorate([
    Output()
], BottomNavigationComponent.prototype, "selectionChanged", void 0);
__decorate([
    ContentChildren(BottomNavigationItemComponent)
], BottomNavigationComponent.prototype, "items", void 0);
__decorate([
    ContentChildren(BottomNavigationItemComponent)
], BottomNavigationComponent.prototype, "menuEntries", void 0);
__decorate([
    ViewChild(BottomNavigationItemComponent, { static: true })
], BottomNavigationComponent.prototype, "moreButton", void 0);
__decorate([
    ViewChild('moreContainer', { read: ElementRef, static: true })
], BottomNavigationComponent.prototype, "moreContainer", void 0);
__decorate([
    ViewChild('baseContainer', { read: ElementRef, static: true })
], BottomNavigationComponent.prototype, "baseContainer", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], BottomNavigationComponent.prototype, "id", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], BottomNavigationComponent.prototype, "onKeydown", null);
BottomNavigationComponent = __decorate([
    Component({
        selector: 'bmw-bottom-navigation',
        template: "<div #baseContainer class=\"base-container\">\n  <ng-content select=\"bmw-bottom-navigation-item\"></ng-content>\n  <div class=\"more-button-wrapper\" [ngStyle]=\"{ display: items.length <= 5 ? 'none' : undefined }\">\n    <bmw-bottom-navigation-item\n      [selected]=\"moreSelected\"\n      class=\"secondary\"\n      [ngClass]=\"{ 'child-selected': childOfMoreSelected }\"\n      icon=\"iwp-icon-gen_more\"\n      label=\"More\"\n      (selectedChange)=\"toggleMore()\"\n    ></bmw-bottom-navigation-item>\n    <div [ngStyle]=\"{ display: !moreSelected ? 'none' : undefined }\" #moreContainer class=\"more-container\"></div>\n  </div>\n</div>\n",
        styles: [":host{height:56px;max-height:56px;margin-top:auto;display:flex;flex-direction:column-reverse;width:100%;flex:1 1 100%;z-index:var(--bottom-navigation__base__z-index)}:host .base-container{align-items:center;display:flex;background-color:var(--bottom-navigation__default__background-color);border-top:1px solid var(--bottom-navigation__default__border-color);height:100%}:host .more-button-wrapper{flex:1 1 100%;align-self:flex-end;display:flex;flex-direction:column-reverse}:host .more-container{display:flex;flex-direction:column;align-self:flex-end;z-index:var(--bottom-navigation__popup__z-index);background-color:var(--bottom-navigation__default__background-color);border-top:1px solid var(--bottom-navigation__default__border-color);border-left:1px solid var(--bottom-navigation__default__border-color);width:100%}"]
    })
], BottomNavigationComponent);
export { BottomNavigationComponent };
//# sourceMappingURL=data:application/json;base64,