import { __decorate, __param } from "tslib";
import { Component, AfterViewInit, Input, ViewChild, ElementRef, Self, Optional, HostBinding } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
let SwitchComponent = class SwitchComponent {
    constructor(control, elementRef) {
        this.control = control;
        this.elementRef = elementRef;
        this.required = false;
        this.disabled = false;
        this.checked = false;
        this.isDirty = false;
        this.isTouched = false;
        this.onChangeCallback = () => { };
        this.onTouchedCallback = () => { };
        if (this.control) {
            this.control.valueAccessor = this;
        }
    }
    writeValue(value) {
        this.checked = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(disable) {
        this.disabled = disable;
    }
    ngAfterViewInit() {
        Promise.resolve().then(() => {
            if (!this.id)
                this.id = Math.random()
                    .toString(36)
                    .substring(2);
            if (!this.name)
                this.name = 'switch-' + this.id;
        });
    }
    onTouched() {
        this.onTouchedCallback();
    }
    toggle(event) {
        var _a;
        if (this.disabled)
            return;
        const checkedValue = event.target.checked;
        this.onChangeCallback(checkedValue);
        this.onTouched();
        this.isDirty = true;
        this.isTouched = true;
        if ((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueAccessor) {
            const { touched, dirty, invalid } = this.control;
            this.invalid = invalid ? dirty || touched : false;
        }
        else {
            this.invalid = (this.isDirty || this.isTouched) && this.required === true && this.checked === false;
        }
    }
};
SwitchComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: ElementRef }
];
__decorate([
    ViewChild('input')
], SwitchComponent.prototype, "input", void 0);
__decorate([
    Input()
], SwitchComponent.prototype, "name", void 0);
__decorate([
    Input()
], SwitchComponent.prototype, "required", void 0);
__decorate([
    Input()
], SwitchComponent.prototype, "id", void 0);
__decorate([
    Input()
], SwitchComponent.prototype, "labelPosition", void 0);
__decorate([
    HostBinding('class.disabled'),
    Input()
], SwitchComponent.prototype, "disabled", void 0);
__decorate([
    HostBinding('attr.checked'),
    Input()
], SwitchComponent.prototype, "checked", void 0);
SwitchComponent = __decorate([
    Component({
        selector: 'bmw-switch',
        template: "<label\n  [for]=\"id\"\n  class=\"switch\"\n  [ngClass]=\"{ 'label-position-right': labelPosition === 'right', 'label-position-left': labelPosition === 'left' }\"\n>\n  <input\n    type=\"checkbox\"\n    [attr.name]=\"name\"\n    [id]=\"id\"\n    (change)=\"toggle($event)\"\n    [required]=\"required\"\n    [tabindex]=\"disabled ? -1 : 0\"\n    [(ngModel)]=\"checked\"\n    [attr.disabled]=\"disabled ? true : null\"\n    [attr.aria-checked]=\"checked\"\n    #input\n  />\n  <div class=\"track\"></div>\n  <span class=\"label bmw-component-text\"><ng-content></ng-content></span>\n</label>\n",
        styles: [":host{display:block;outline:0;white-space:nowrap;max-width:100%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.switch{position:relative;display:flex;flex:1;align-items:center;cursor:pointer;height:calc(var(--switch__knob__default__height) + 2 * var(--switch__default__border-width))}.switch .track{height:var(--switch__track__default__height);width:var(--switch__track__default__width);flex-shrink:0;position:relative;background-color:var(--switch__track__default__background-color);border:var(--switch__default__border-width) solid var(--switch__track__default__border-color);border-radius:var(--switch__track__default__border-radius);margin-right:var(--spacing-bmw-xs);transition:background-color .1s ease-in-out}.switch .track:before{position:absolute;content:'';display:flex;font-family:iwp;font-size:var(--switch__checked__knob__default__font-size);align-items:center;justify-content:center;height:var(--switch__knob__default__height);width:var(--switch__knob__default__width);top:50%;transform:translateY(-50%);left:calc(var(--switch__default__border-width) * -1);background-color:var(--switch__knob__default__background-color);border:var(--switch__default__border-width) solid var(--switch__knob__default__border-color);border-radius:var(--switch__knob__default__border-radius);transition:transform .1s ease-in-out}.switch .label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.switch input{clip:rect(0,0,0,0);margin:1px;width:1px;height:1px;position:absolute;overflow:hidden;outline:0;border:0}.switch input:checked+.track{background-color:var(--switch__checked__track__default__background-color);border-color:var(--switch__checked__track__default__background-color)}.switch input:checked+.track:before{transform:translate(var(--switch__knob__default__travel),-50%);content:'\\e9cd';color:var(--switch__checked__knob__default__color)}.switch input:focus+.track:before{box-shadow:0 0 0 1px var(--color-bmw-basic5),0 0 0 3px var(--color-bmw-highlight)}.switch:hover .track:before{border-color:var(--switch__knob__default__hover__border-color)}.switch.label-position-left .track{order:2;margin-right:0;margin-left:var(--spacing-bmw-xs)}.switch.label-position-left .label,.switch.label-position-right .track{order:1}.switch.label-position-right .label{order:2}:host.disabled .switch{opacity:.5;cursor:no-drop!important}:host.disabled .switch:hover .track:before{border-color:var(--switch__knob__default__border-color)}"]
    }),
    __param(0, Self()), __param(0, Optional())
], SwitchComponent);
export { SwitchComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInN3aXRjaC9zd2l0Y2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFXakUsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQTRCMUIsWUFBd0MsT0FBa0IsRUFBUyxVQUFzQjtRQUFqRCxZQUFPLEdBQVAsT0FBTyxDQUFXO1FBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXRCekYsYUFBUSxHQUFHLEtBQUssQ0FBQztRQVNqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBSWpCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFHUixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFbEIscUJBQWdCLEdBQXlCLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUNsRCxzQkFBaUIsR0FBZSxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7UUFHL0MsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztTQUNuQztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsRUFBd0I7UUFDdkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBRSxPQUFnQjtRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDVixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7cUJBQ3BCLFFBQVEsQ0FBQyxFQUFFLENBQUM7cUJBQ1osU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVU7O1FBQ2YsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFFMUIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFFMUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUV0QixVQUFJLElBQUksQ0FBQyxPQUFPLDBDQUFFLGFBQWEsRUFBRTtZQUMvQixNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2pELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDbkQ7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQztTQUNyRztJQUNILENBQUM7Q0FDRixDQUFBOztZQXZEa0QsU0FBUyx1QkFBN0MsSUFBSSxZQUFJLFFBQVE7WUFBa0QsVUFBVTs7QUExQnpGO0lBREMsU0FBUyxDQUFDLE9BQU8sQ0FBQzs4Q0FDRDtBQUVsQjtJQURDLEtBQUssRUFBRTs2Q0FDSztBQUViO0lBREMsS0FBSyxFQUFFO2lEQUNTO0FBRWpCO0lBREMsS0FBSyxFQUFFOzJDQUNHO0FBR1g7SUFEQyxLQUFLLEVBQUU7c0RBQ3dDO0FBSWhEO0lBRkMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0lBQzdCLEtBQUssRUFBRTtpREFDUztBQUlqQjtJQUZDLFdBQVcsQ0FBQyxjQUFjLENBQUM7SUFDM0IsS0FBSyxFQUFFO2dEQUNRO0FBbkJMLGVBQWU7SUFMM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFlBQVk7UUFDdEIsNmxCQUFzQzs7S0FFdkMsQ0FBQztJQTZCYSxXQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsV0FBQSxRQUFRLEVBQUUsQ0FBQTtHQTVCcEIsZUFBZSxDQW1GM0I7U0FuRlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgU2VsZiwgT3B0aW9uYWwsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5leHBvcnQgY29uc3QgZW51bSBMYWJlbFBvc2l0aW9uIHtcbiAgUmlnaHQgPSAncmlnaHQnLFxuICBMZWZ0ID0gJ2xlZnQnXG59XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdibXctc3dpdGNoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3N3aXRjaC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3N3aXRjaC5jb21wb25lbnQubGVzcyddXG59KVxuZXhwb3J0IGNsYXNzIFN3aXRjaENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgQFZpZXdDaGlsZCgnaW5wdXQnKVxuICBpbnB1dDogRWxlbWVudFJlZjtcbiAgQElucHV0KClcbiAgbmFtZTogc3RyaW5nO1xuICBASW5wdXQoKVxuICByZXF1aXJlZCA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBpZDogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGxhYmVsUG9zaXRpb246ICdyaWdodCcgfCAnbGVmdCcgfCBMYWJlbFBvc2l0aW9uO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZGlzYWJsZWQnKVxuICBASW5wdXQoKVxuICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5jaGVja2VkJylcbiAgQElucHV0KClcbiAgY2hlY2tlZCA9IGZhbHNlO1xuXG4gIGludmFsaWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgaXNEaXJ0eSA9IGZhbHNlO1xuICBwcml2YXRlIGlzVG91Y2hlZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250cm9sOiBOZ0NvbnRyb2wsIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgdGhpcy5jb250cm9sLnZhbHVlQWNjZXNzb3IgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBib29sZWFuKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZT8oZGlzYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmlkKVxuICAgICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKVxuICAgICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgICAuc3Vic3RyaW5nKDIpO1xuICAgICAgaWYgKCF0aGlzLm5hbWUpIHRoaXMubmFtZSA9ICdzd2l0Y2gtJyArIHRoaXMuaWQ7XG4gICAgfSk7XG4gIH1cblxuICBvblRvdWNoZWQoKSB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjaygpO1xuICB9XG5cbiAgdG9nZ2xlKGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgY2hlY2tlZFZhbHVlID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XG5cbiAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soY2hlY2tlZFZhbHVlKTtcblxuICAgIHRoaXMub25Ub3VjaGVkKCk7XG5cbiAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIHRoaXMuaXNUb3VjaGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmNvbnRyb2w/LnZhbHVlQWNjZXNzb3IpIHtcbiAgICAgIGNvbnN0IHsgdG91Y2hlZCwgZGlydHksIGludmFsaWQgfSA9IHRoaXMuY29udHJvbDtcbiAgICAgIHRoaXMuaW52YWxpZCA9IGludmFsaWQgPyBkaXJ0eSB8fCB0b3VjaGVkIDogZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW52YWxpZCA9ICh0aGlzLmlzRGlydHkgfHwgdGhpcy5pc1RvdWNoZWQpICYmIHRoaXMucmVxdWlyZWQgPT09IHRydWUgJiYgdGhpcy5jaGVja2VkID09PSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==