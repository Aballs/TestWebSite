import { __decorate, __param } from "tslib";
import { Component, AfterViewInit, Input, ViewChild, ElementRef, EventEmitter, Output, OnChanges, HostListener, Optional, Self } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
let CheckboxComponent = class CheckboxComponent {
    constructor(control, elementRef) {
        this.control = control;
        this.elementRef = elementRef;
        this.disabled = false;
        this.checked = "unchecked" /* unchecked */;
        this.required = false;
        this.updateEvent = new EventEmitter();
        this.isDirty = false;
        this.isTouched = false;
        this.onChange = () => { };
        this.onTouched = () => { };
        if (this.control) {
            this.control.valueAccessor = this;
        }
    }
    onKeyDown(event) {
        const key = event.code || event.keyCode;
        switch (key) {
            case 'Space':
            case 32:
                if (!this.disabled) {
                    this.input.nativeElement.indeterminate = false;
                    this.input.nativeElement.checked = !this.input.nativeElement.checked;
                    this.readState();
                    event.preventDefault();
                }
                break;
        }
    }
    writeValue(value) {
        if (value === true) {
            this.checked = "checked" /* checked */;
        }
        else if (value === false) {
            this.checked = "unchecked" /* unchecked */;
        }
        else {
            this.checked = value;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    ngAfterViewInit() {
        Promise.resolve().then(() => {
            if (!this.id)
                this.id = Math.random()
                    .toString(36)
                    .substring(2);
            if (!this.name)
                this.name = 'checkbox-' + this.id;
            this.checkProperties();
        });
    }
    ngOnChanges() {
        this.checkProperties();
    }
    checkProperties() {
        if (!this.input)
            return;
        if (this.disabled) {
            this.input.nativeElement.disabled = true;
            this.elementRef.nativeElement.classList.add('disabled');
        }
        else {
            this.input.nativeElement.disabled = false;
            this.elementRef.nativeElement.classList.remove('disabled');
        }
        this.updateCheckState();
    }
    readState() {
        var _a;
        if (this.input.nativeElement.indeterminate || this.disabled)
            return;
        const lastState = this.checked;
        this.checked = this.input.nativeElement.checked
            ? "checked" /* checked */
            : this.input.nativeElement.indeterminate
                ? "indeterminate" /* indeterminate */
                : "unchecked" /* unchecked */;
        this.onChange(this.checked === "checked" /* checked */);
        if (lastState !== this.checked) {
            this.updateEvent.emit(this);
        }
        this.isDirty = true;
        this.isTouched = true;
        if (this.onTouched) {
            this.onTouched();
        }
        if ((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueAccessor) {
            const { touched, dirty, invalid } = this.control;
            this.invalid = invalid ? dirty || touched : false;
        }
        else {
            this.invalid =
                (this.isDirty || this.isTouched) && this.required === true && this.checked === "unchecked" /* unchecked */;
        }
    }
    updateCheckState() {
        if (!this.input)
            return;
        if (this.checked === "indeterminate" /* indeterminate */) {
            this.input.nativeElement.indeterminate = true;
            this.input.nativeElement.checked = false;
        }
        else {
            this.input.nativeElement.checked = this.checked === "checked" /* checked */ || false;
            this.input.nativeElement.indeterminate = false;
        }
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
        this.checkProperties();
    }
};
CheckboxComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: ElementRef }
];
__decorate([
    ViewChild('input')
], CheckboxComponent.prototype, "input", void 0);
__decorate([
    Input()
], CheckboxComponent.prototype, "name", void 0);
__decorate([
    Input()
], CheckboxComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], CheckboxComponent.prototype, "checked", void 0);
__decorate([
    Input()
], CheckboxComponent.prototype, "required", void 0);
__decorate([
    Input()
], CheckboxComponent.prototype, "id", void 0);
__decorate([
    Output()
], CheckboxComponent.prototype, "updateEvent", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], CheckboxComponent.prototype, "onKeyDown", null);
CheckboxComponent = __decorate([
    Component({
        selector: 'bmw-checkbox',
        template: "<div>\n  <input\n    type=\"checkbox\"\n    [name]=\"name\"\n    [id]=\"id\"\n    [checked]=\"checked === 'checked'\"\n    [required]=\"required\"\n    (change)=\"readState()\"\n    [tabindex]=\"disabled ? -1 : 0\"\n    [attr.aria-checked]=\"checked === 'checked' ? 'true' : checked === 'indeterminate' ? 'mixed' : 'false'\"\n    [class.invalid]=\"invalid\"\n    #input\n  />\n  <label [for]=\"id\" (click)=\"stopPropagation($event)\">\n    <div class=\"bmw-component-text\"><ng-content></ng-content></div>\n\n    <span class=\"checkmark\">\n      <svg\n        viewBox=\"0 0 16 16\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <title>Checkmark</title>\n        <g stroke=\"none\" stroke-width=\"0\" fill=\"none\" fill-rule=\"evenodd\">\n          <g>\n            <rect x=\"0\" y=\"0\" width=\"16\" height=\"16\" stroke-width=\"1\"></rect>\n            <path\n              class=\"checkmark\"\n              d=\"M7.2734375,11.4296875 L3.32421875,8.1015625 C3.30859367,8.09374996 3.29687504,8.08007822 3.2890625,8.06054688 C3.28124996,8.04101553 3.27734375,8.01953137 3.27734375,7.99609375 C3.27734375,7.98046867 3.27929686,7.96289072 3.28320312,7.94335938 C3.28710939,7.92382803 3.29687492,7.90625008 3.3125,7.890625 L3.8046875,7.29296875 C3.82031258,7.27734367 3.83789053,7.26562504 3.85742188,7.2578125 C3.87695322,7.24999996 3.89843738,7.24609375 3.921875,7.24609375 C3.94531262,7.24609375 3.96484367,7.24804686 3.98046875,7.25195312 C3.99609383,7.25585939 4.01171867,7.26562492 4.02734375,7.28125 L7.2734375,10.0117188 L11.8203125,4.65625 C11.8359376,4.64062492 11.8535155,4.62890629 11.8730469,4.62109375 C11.8925782,4.61328121 11.9140624,4.609375 11.9375,4.609375 C11.9609376,4.609375 11.9804687,4.61132811 11.9960938,4.61523438 C12.0117188,4.61914064 12.0273437,4.62890617 12.0429688,4.64453125 L12.6289062,5.13671875 C12.6601564,5.16796891 12.6777344,5.20507791 12.6816406,5.24804688 C12.6855469,5.29101584 12.6757814,5.32812484 12.6523438,5.359375 L7.49609375,11.40625 C7.48046867,11.4218751 7.46289072,11.4335937 7.44335938,11.4414062 C7.42382803,11.4492188 7.40625008,11.4570312 7.390625,11.4648438 C7.390625,11.4648438 7.38867189,11.4648438 7.38476562,11.4648438 C7.38085936,11.4648438 7.37890625,11.4648438 7.37890625,11.4648438 C7.35546863,11.4648438 7.33593758,11.4609375 7.3203125,11.453125 C7.30468742,11.4453125 7.28906258,11.4375 7.2734375,11.4296875 Z\"\n            ></path>\n            <rect class=\"indeterminate\" x=\"4\" y=\"4\" width=\"8\" height=\"8\"></rect>\n          </g>\n        </g>\n      </svg>\n    </span>\n  </label>\n</div>\n",
        styles: ["input{width:0;height:0;opacity:0;position:absolute;z-index:-1}input:focus+label svg{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}div{display:block;position:relative;margin-bottom:var(--checkbox__default__margin-bottom)}div label{position:relative;display:block;padding-left:var(--checkbox__default__padding-left);color:var(--checkbox__default__color);cursor:pointer;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}div label>span:not(.checkmark){padding-top:calc((var(--checkbox__default__height) - var(--typography__component-text__line-height))/ 2);padding-bottom:calc((var(--checkbox__default__height) - var(--typography__component-text__line-height))/ 2);display:inline-block}div label span.checkmark{top:calc(50% - var(--checkbox__default__height)/ 2);left:0;position:absolute;font-family:iwp;height:var(--checkbox__default__height);width:var(--checkbox__default__height);background-color:var(--checkbox__default_background-color)}div label span.checkmark svg{width:var(--checkbox__default__height);height:var(--checkbox__default__height)}div label span.checkmark svg rect{stroke:var(--checkbox__default__checkbox-color)}div label span.checkmark svg path,div label span.checkmark svg rect.indeterminate{display:none}div label:hover span.checkmark{background-color:var(--checkbox__default__hover__background-color)}div input:checked~label>span.checkmark path.checkmark{display:block;fill:var(--checkbox__default__checkbox-color)}div input:indeterminate~label>span.checkmark rect.indeterminate{display:block;fill:var(--checkbox__default__checkbox-color)}div input[disabled]+label{opacity:.5;pointer-events:none}div input.invalid+label rect{stroke:var(--checkbox__error__color)!important}div input.invalid+label .bmw-component-text{color:var(--checkbox__error__color)}:host.ng-invalid.ng-touched div input+label rect{stroke:var(--checkbox__error__color)!important}:host.ng-invalid.ng-touched div input+label .bmw-component-text{color:var(--checkbox__error__color)}:host.disabled{cursor:no-drop}"]
    }),
    __param(0, Self()), __param(0, Optional())
], CheckboxComponent);
export { CheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULGFBQWEsRUFDYixLQUFLLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLFNBQVMsRUFDVCxZQUFZLEVBQ1osUUFBUSxFQUNSLElBQUksRUFDTCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFZakUsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUF3QzVCLFlBQXdDLE9BQWtCLEVBQVMsVUFBc0I7UUFBakQsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUFTLGVBQVUsR0FBVixVQUFVLENBQVk7UUFsQ3pGLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsWUFBTywrQkFBMEM7UUFFakQsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUtqQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFxQixDQUFDO1FBRzVDLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVsQixhQUFRLEdBQXlCLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUMxQyxjQUFTLEdBQWMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBbUJ0QyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQW5CRCxTQUFTLENBQUMsS0FBb0I7UUFDNUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ3hDLFFBQVEsR0FB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O1lBQ25GLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDaEQ7SUFDSCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQWlCO1FBQy9CLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBaUI7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDRixDQUFBOztZQXRHa0QsU0FBUyx1QkFBN0MsSUFBSSxZQUFJLFFBQVE7WUFBa0QsVUFBVTs7QUF0Q3pGO0lBREMsU0FBUyxDQUFDLE9BQU8sQ0FBQztnREFDRDtBQUVsQjtJQURDLEtBQUssRUFBRTsrQ0FDSztBQUViO0lBREMsS0FBSyxFQUFFO21EQUNTO0FBRWpCO0lBREMsS0FBSyxFQUFFO2tEQUN5QztBQUVqRDtJQURDLEtBQUssRUFBRTttREFDUztBQUVqQjtJQURDLEtBQUssRUFBRTs2Q0FDRztBQUdYO0lBREMsTUFBTSxFQUFFO3NEQUMyQztBQVVwRDtJQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztrREFjbkM7QUF0Q1UsaUJBQWlCO0lBTDdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO1FBQ3hCLHVuRkFBd0M7O0tBRXpDLENBQUM7SUF5Q2EsV0FBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7R0F4Q3BCLGlCQUFpQixDQThJN0I7U0E5SVksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBBZnRlclZpZXdJbml0LFxuICBJbnB1dCxcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIE91dHB1dCxcbiAgT25DaGFuZ2VzLFxuICBIb3N0TGlzdGVuZXIsXG4gIE9wdGlvbmFsLFxuICBTZWxmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGNvbnN0IGVudW0gQ2hlY2tib3hTdGF0ZSB7XG4gIGNoZWNrZWQgPSAnY2hlY2tlZCcsXG4gIGluZGV0ZXJtaW5hdGUgPSAnaW5kZXRlcm1pbmF0ZScsXG4gIHVuY2hlY2tlZCA9ICd1bmNoZWNrZWQnXG59XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdibXctY2hlY2tib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jaGVja2JveC5jb21wb25lbnQubGVzcyddXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrYm94Q29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIEBWaWV3Q2hpbGQoJ2lucHV0JylcbiAgaW5wdXQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgpXG4gIG5hbWU6IHN0cmluZztcbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgQElucHV0KClcbiAgY2hlY2tlZDogQ2hlY2tib3hTdGF0ZSA9IENoZWNrYm94U3RhdGUudW5jaGVja2VkO1xuICBASW5wdXQoKVxuICByZXF1aXJlZCA9IGZhbHNlO1xuICBASW5wdXQoKVxuICBpZDogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKVxuICB1cGRhdGVFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8Q2hlY2tib3hDb21wb25lbnQ+KCk7XG5cbiAgaW52YWxpZDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpc0RpcnR5ID0gZmFsc2U7XG4gIHByaXZhdGUgaXNUb3VjaGVkID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgcHJpdmF0ZSBvblRvdWNoZWQ6ICgpID0+IGFueSA9ICgpID0+IHt9O1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBrZXkgPSBldmVudC5jb2RlIHx8IGV2ZW50LmtleUNvZGU7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ1NwYWNlJzpcbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSAhdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmNoZWNrZWQ7XG4gICAgICAgICAgdGhpcy5yZWFkU3RhdGUoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250cm9sOiBOZ0NvbnRyb2wsIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgdGhpcy5jb250cm9sLnZhbHVlQWNjZXNzb3IgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IENoZWNrYm94U3RhdGUgfCBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSBDaGVja2JveFN0YXRlLmNoZWNrZWQ7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuY2hlY2tlZCA9IENoZWNrYm94U3RhdGUudW5jaGVja2VkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYm9vbGVhbikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaWQpXG4gICAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgICAgLnRvU3RyaW5nKDM2KVxuICAgICAgICAgIC5zdWJzdHJpbmcoMik7XG4gICAgICBpZiAoIXRoaXMubmFtZSkgdGhpcy5uYW1lID0gJ2NoZWNrYm94LScgKyB0aGlzLmlkO1xuICAgICAgdGhpcy5jaGVja1Byb3BlcnRpZXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuY2hlY2tQcm9wZXJ0aWVzKCk7XG4gIH1cblxuICBjaGVja1Byb3BlcnRpZXMoKSB7XG4gICAgaWYgKCF0aGlzLmlucHV0KSByZXR1cm47XG5cbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVDaGVja1N0YXRlKCk7XG4gIH1cblxuICByZWFkU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlIHx8IHRoaXMuZGlzYWJsZWQpIHJldHVybjtcblxuICAgIGNvbnN0IGxhc3RTdGF0ZSA9IHRoaXMuY2hlY2tlZDtcbiAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQuY2hlY2tlZFxuICAgICAgPyBDaGVja2JveFN0YXRlLmNoZWNrZWRcbiAgICAgIDogdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGVcbiAgICAgID8gQ2hlY2tib3hTdGF0ZS5pbmRldGVybWluYXRlXG4gICAgICA6IENoZWNrYm94U3RhdGUudW5jaGVja2VkO1xuXG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLmNoZWNrZWQgPT09IENoZWNrYm94U3RhdGUuY2hlY2tlZCk7XG5cbiAgICBpZiAobGFzdFN0YXRlICE9PSB0aGlzLmNoZWNrZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlRXZlbnQuZW1pdCh0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIHRoaXMuaXNUb3VjaGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLm9uVG91Y2hlZCkge1xuICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb250cm9sPy52YWx1ZUFjY2Vzc29yKSB7XG4gICAgICBjb25zdCB7IHRvdWNoZWQsIGRpcnR5LCBpbnZhbGlkIH0gPSB0aGlzLmNvbnRyb2w7XG4gICAgICB0aGlzLmludmFsaWQgPSBpbnZhbGlkID8gZGlydHkgfHwgdG91Y2hlZCA6IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmludmFsaWQgPVxuICAgICAgICAodGhpcy5pc0RpcnR5IHx8IHRoaXMuaXNUb3VjaGVkKSAmJiB0aGlzLnJlcXVpcmVkID09PSB0cnVlICYmIHRoaXMuY2hlY2tlZCA9PT0gQ2hlY2tib3hTdGF0ZS51bmNoZWNrZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVDaGVja1N0YXRlKCkge1xuICAgIGlmICghdGhpcy5pbnB1dCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLmNoZWNrZWQgPT09IENoZWNrYm94U3RhdGUuaW5kZXRlcm1pbmF0ZSkge1xuICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xuICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSB0aGlzLmNoZWNrZWQgPT09IENoZWNrYm94U3RhdGUuY2hlY2tlZCB8fCBmYWxzZTtcbiAgICAgIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RvcFByb3BhZ2F0aW9uKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIHRoaXMuY2hlY2tQcm9wZXJ0aWVzKCk7XG4gIH1cbn1cbiJdfQ==