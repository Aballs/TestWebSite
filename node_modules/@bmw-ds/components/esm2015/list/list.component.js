import { __decorate } from "tslib";
import { Component, Input, ContentChildren, ViewChild, HostBinding, EventEmitter, Output } from '@angular/core';
import { ListItemComponent } from './list-item.component';
import { CheckboxComponent } from '../checkbox/checkbox.component';
let ListComponent = class ListComponent {
    constructor() {
        this._selectedItem = null;
        this.selectedItemChange = new EventEmitter();
        this.selectHeader = null;
        this.updateEvent = new EventEmitter();
    }
    get selectedItem() {
        return this._selectedItem;
    }
    set selectedItem(value) {
        if (value !== this._selectedItem) {
            this._selectedItem = value;
            this.selectOne(value);
            this.selectedItemChange.emit(value);
        }
    }
    ngAfterViewInit() {
        this.childItemsComponent.changes.subscribe({
            next: elements => {
                this.childItemsComponent.forEach((element) => {
                    element.updateEvent.subscribe((event) => {
                        if (!this.multiSelect) {
                            this.selectOne(element);
                            this.updateEvent.emit(element);
                        }
                        else {
                            this.selectMore(element);
                            this.updateEvent.next(this.childItemsComponent.filter(i => i.selected));
                        }
                    });
                    if (this.multiSelect) {
                        //setTimeout used to avoid value changed after check error
                        setTimeout(() => {
                            element.multiSelect = true;
                        });
                    }
                });
            }
        });
        //setTimeout used to avoid value changed after check error
        setTimeout(() => {
            if (!this.id) {
                this.id = Math.random()
                    .toString(36)
                    .substring(2);
            }
        });
        this.childItemsComponent.forEach((element) => {
            element.updateEvent.subscribe((event) => {
                if (!this.multiSelect) {
                    this.selectOne(element);
                    this.updateEvent.emit(element);
                }
                else {
                    this.selectMore(element);
                    this.updateEvent.next(this.childItemsComponent.filter(i => i.selected));
                }
            });
            if (this.multiSelect) {
                //setTimeout used to avoid value changed after check error
                setTimeout(() => {
                    element.multiSelect = true;
                });
            }
        });
        if (this.multiSelect) {
            this.selectMore(null);
        }
    }
    selectOne(selectItem) {
        if (!this.childItemsComponent) {
            return;
        }
        this.childItemsComponent.forEach(element => {
            element.selected = element === selectItem;
            if (element.selected) {
                this.selectedItem = element;
            }
        });
    }
    selectMore(selectedItem) {
        let selectAll = true;
        let unselectAll = true;
        this.childItemsComponent.forEach(element => {
            if (element === selectedItem) {
                element.selected = !element.selected;
            }
            if (element.selected) {
                selectAll = true && selectAll;
                unselectAll = false;
            }
            else {
                selectAll = false;
                unselectAll = true && unselectAll;
            }
        });
        this.selectHeader = selectAll ? "checked" /* checked */ : unselectAll ? null : "indeterminate" /* indeterminate */;
    }
    headerChange(event) {
        this.childItemsComponent.forEach(element => {
            element.selected = event.checked === 'checked';
        });
        this.updateEvent.next(this.childItemsComponent.filter(i => i.selected));
    }
    sort(event) {
        //ignore clicks on checkbox
        if (event.target !== this.header.nativeElement) {
            return;
        }
        if (this.sortingOrder == null) {
            this.sortingOrder = false;
        }
        this.sortingOrder = !this.sortingOrder;
        const sort = (a, b) => {
            const aText = a.label;
            const bText = b.label;
            const pureOrder = aText > bText;
            return pureOrder === this.sortingOrder ? 1 : -1;
        };
        const newArray = this.childItemsComponent.toArray().sort(sort);
        newArray.forEach((item, index) => {
            item.order = index.toString();
        });
    }
    ngOnDestroy() {
        this.childItemsComponent.forEach(element => {
            element.updateEvent.unsubscribe();
        });
    }
};
__decorate([
    ViewChild(CheckboxComponent)
], ListComponent.prototype, "input", void 0);
__decorate([
    ViewChild('items')
], ListComponent.prototype, "items", void 0);
__decorate([
    ViewChild('header')
], ListComponent.prototype, "header", void 0);
__decorate([
    ViewChild('headerCheckbox')
], ListComponent.prototype, "headerCheckbox", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], ListComponent.prototype, "id", void 0);
__decorate([
    Input()
], ListComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], ListComponent.prototype, "label", void 0);
__decorate([
    Input()
], ListComponent.prototype, "multiSelect", void 0);
__decorate([
    ContentChildren(ListItemComponent)
], ListComponent.prototype, "childItemsComponent", void 0);
__decorate([
    Input()
], ListComponent.prototype, "selectedItem", null);
__decorate([
    Output()
], ListComponent.prototype, "selectedItemChange", void 0);
__decorate([
    Output()
], ListComponent.prototype, "updateEvent", void 0);
ListComponent = __decorate([
    Component({
        selector: 'bmw-list',
        template: "<div class=\"wrapper\" [class.disabled]=\"disabled\">\n  <div\n    class=\"header bmw-table-headline-text\"\n    [class.selectable]=\"multiSelect\"\n    [class.disabled]=\"disabled\"\n    (click)=\"sort($event)\"\n    [class.descending]=\"sortingOrder\"\n    [class.non-sorted]=\"sortingOrder == null\"\n    *ngIf=\"label\"\n    #header\n  >\n    <div class=\"separator\" *ngIf=\"multiSelect\"></div>\n    <bmw-checkbox\n      *ngIf=\"multiSelect\"\n      (updateEvent)=\"headerChange($event)\"\n      [checked]=\"selectHeader\"\n      #headerCheckbox\n    ></bmw-checkbox>\n    {{ label }}\n  </div>\n  <div class=\"items\" [class.disabled]=\"disabled\" #items>\n    <ng-content select=\"bmw-list-item\"></ng-content>\n  </div>\n</div>\n",
        styles: [":host .wrapper{display:inline-block;min-width:186px;max-width:100%}:host .wrapper .header{padding:var(--list__header__padding);padding-right:calc(2 * var(--list__header__padding) + var(--list__icon__height));position:relative;background-color:var(--list__default__background-color);color:var(--list__default__color);text-overflow:ellipsis;white-space:nowrap;overflow:hidden;cursor:pointer}:host .wrapper .header ::ng-deep label{cursor:inherit}:host .wrapper .header ::ng-deep label div{height:var(--checkbox__default__height)}:host .wrapper .header.selectable{padding-left:var(--list__header__selectable__padding-left)}:host .wrapper .header.selectable ::ng-deep bmw-checkbox{position:absolute;top:calc((var(--list__header__line-height) - var(--checkbox__default__height))/ 2 + var(--list__header__padding));left:var(--list__header__padding)}:host .wrapper .header::after{position:absolute;top:var(--list__header__padding);right:var(--list__header__padding);content:' ';width:var(--list__icon__height);height:var(--list__icon__height);background-color:var(--list__default__color);background:url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 20 18' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><style>polygon.ic_arrow_stepper_up { fill: rgb(68, 68, 68); }</style> <title>Stepper Up</title> <polygon class='ic_arrow_stepper_up' points='10 3 19 17.5 1 17.5'></polygon></svg>\") no-repeat!important}:host .wrapper .header.non-sorted::after{opacity:.5}:host .wrapper .header.descending::after{background:url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 20 18' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'><style>polygon.ic_arrow_stepper_down { fill: rgb(68, 68, 68); }</style> <title>Stepper Up</title><polygon class='ic_arrow_stepper_down' points='10 17.5 19 3 1 3'></polygon></svg>\") no-repeat!important}:host .wrapper .header .separator{position:absolute;top:0;left:0;height:100%;width:calc(var(--list__icon__height) + 2 * var(--list__header__padding));border-right:1px solid #a3a3a3}:host .wrapper .header:hover{background-color:var(--list__hover__background-color)}:host .wrapper .header.disabled{opacity:.5;pointer-events:none}:host .wrapper.disabled{cursor:no-drop}:host .wrapper .items{display:flex;flex-flow:column}:host .wrapper .items.small{flex:1 1 auto}:host .wrapper .items.disabled{opacity:.5;pointer-events:none}"]
    })
], ListComponent);
export { ListComponent };
//# sourceMappingURL=data:application/json;base64,