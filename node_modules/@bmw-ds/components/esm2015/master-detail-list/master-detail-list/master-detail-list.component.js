import { __decorate } from "tslib";
import { Component, ContentChildren, HostBinding, Input, ViewChild } from '@angular/core';
import { MasterDetailListRowComponent } from '../master-detail-list-row/master-detail-list-row.component';
import { MasterDetailListDetailComponent } from '../master-detail-list-detail/master-detail-list-detail.component';
let MasterDetailListComponent = class MasterDetailListComponent {
    constructor() {
        this._smallStyle = false;
    }
    get smallStyle() {
        return this._smallStyle;
    }
    set smallStyle(value) {
        if (this._smallStyle !== value) {
            this._smallStyle = value;
            this.updateScrollToSelected();
        }
    }
    get masterDetail() {
        return this._hasDetailView || this._smallStyle;
    }
    set hasDetailView(value) {
        if (this._hasDetailView !== value) {
            this._hasDetailView = value;
            this.updateScrollToSelected();
        }
    }
    ngOnInit() {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    }
    ngAfterViewInit() {
        // listen for changes of ListDetailCoponents in list's content
        this.listDetails.changes.subscribe({
            next: elements => {
                // if detail is available, set class to host to enable master-detail styling
                this.hasDetailView = elements.length > 0;
            }
        });
        this.childItemsComponent.changes.subscribe({
            next: elements => {
                this.childItemsComponent.forEach(element => {
                    element.updateEvent.subscribe(() => {
                        this.selectOne(element);
                    });
                });
            }
        });
        setTimeout(() => (this.hasDetailView = this.listDetails.length > 0));
        this.childItemsComponent.forEach(element => {
            element.updateEvent.subscribe(() => {
                this.selectOne(element);
            });
        });
    }
    selectOne(selectItem) {
        if (!this.childItemsComponent) {
            return;
        }
        this.childItemsComponent.forEach(element => {
            element.selected = element === selectItem;
        });
    }
    ngOnDestroy() {
        if (this.childItemsComponent) {
            this.childItemsComponent.forEach(element => {
                element.updateEvent.unsubscribe();
            });
        }
    }
    updateScrollToSelected() {
        var _a;
        const selected = (_a = this.childItemsComponent) === null || _a === void 0 ? void 0 : _a.find(element => element.selected);
        if (selected) {
            setTimeout(() => {
                selected.updateScrollPosition();
            });
        }
    }
};
__decorate([
    ViewChild('items')
], MasterDetailListComponent.prototype, "items", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], MasterDetailListComponent.prototype, "id", void 0);
__decorate([
    ContentChildren(MasterDetailListRowComponent)
], MasterDetailListComponent.prototype, "childItemsComponent", void 0);
__decorate([
    ContentChildren(MasterDetailListDetailComponent)
], MasterDetailListComponent.prototype, "listDetails", void 0);
__decorate([
    Input()
], MasterDetailListComponent.prototype, "smallStyle", null);
__decorate([
    HostBinding('class.master-detail')
], MasterDetailListComponent.prototype, "masterDetail", null);
MasterDetailListComponent = __decorate([
    Component({
        selector: 'bmw-master-detail-list',
        template: "<div\n  class=\"items\"\n  #items\n>\n  <ng-content select=\"bmw-master-detail-list-row\"></ng-content>\n</div>\n<ng-content select=\"bmw-master-detail-list-detail\"></ng-content>\n",
        styles: [":host{position:relative;min-height:0;width:100%;max-height:100%;overflow:auto;display:inline-block;min-width:186px;max-width:100%}:host .items{display:table;table-layout:auto;width:100%;max-height:100%;overflow:auto}:host.master-detail{display:flex;flex-direction:row;width:auto}@media screen and (min-width:37.49rem){:host.master-detail .items{width:auto;display:flex;flex:0 0 auto;flex-direction:column;overflow-y:auto}}"]
    })
], MasterDetailListComponent);
export { MasterDetailListComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyLWRldGFpbC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIm1hc3Rlci1kZXRhaWwtbGlzdC9tYXN0ZXItZGV0YWlsLWxpc3QvbWFzdGVyLWRldGFpbC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxlQUFlLEVBRWYsV0FBVyxFQUNYLEtBQUssRUFHTCxTQUFTLEVBRVYsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDMUcsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sa0VBQWtFLENBQUM7QUFPbkgsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFBdEM7UUFjVSxnQkFBVyxHQUFHLEtBQUssQ0FBQztJQXNGOUIsQ0FBQztJQXBGQyxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksVUFBVSxDQUFDLEtBQWM7UUFDM0IsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUN6QixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFbUMsSUFBSSxZQUFZO1FBQ2xELE9BQU8sSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ2pELENBQUM7SUFFRCxJQUFJLGFBQWEsQ0FBQyxLQUFjO1FBQzlCLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxLQUFLLEVBQUU7WUFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7WUFDNUIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBR0QsUUFBUTtR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LFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsaU1BQWtEOztLQUVuRCxDQUFDO0dBQ1cseUJBQXlCLENBb0dyQztTQXBHWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIFF1ZXJ5TGlzdCxcbiAgVmlld0NoaWxkLFxuICBPbkluaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXN0ZXJEZXRhaWxMaXN0Um93Q29tcG9uZW50IH0gZnJvbSAnLi4vbWFzdGVyLWRldGFpbC1saXN0LXJvdy9tYXN0ZXItZGV0YWlsLWxpc3Qtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNYXN0ZXJEZXRhaWxMaXN0RGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi4vbWFzdGVyLWRldGFpbC1saXN0LWRldGFpbC9tYXN0ZXItZGV0YWlsLWxpc3QtZGV0YWlsLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Jtdy1tYXN0ZXItZGV0YWlsLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFzdGVyLWRldGFpbC1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWFzdGVyLWRldGFpbC1saXN0LmNvbXBvbmVudC5sZXNzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWFzdGVyRGV0YWlsTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQFZpZXdDaGlsZCgnaXRlbXMnKVxuICBpdGVtczogRWxlbWVudFJlZjtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICBASW5wdXQoKVxuICBpZDogc3RyaW5nO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oTWFzdGVyRGV0YWlsTGlzdFJvd0NvbXBvbmVudClcbiAgY2hpbGRJdGVtc0NvbXBvbmVudDogUXVlcnlMaXN0PE1hc3RlckRldGFpbExpc3RSb3dDb21wb25lbnQ+O1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oTWFzdGVyRGV0YWlsTGlzdERldGFpbENvbXBvbmVudClcbiAgbGlzdERldGFpbHM6IFF1ZXJ5TGlzdDxNYXN0ZXJEZXRhaWxMaXN0RGV0YWlsQ29tcG9uZW50PjtcblxuICBwcml2YXRlIF9zbWFsbFN0eWxlID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIGdldCBzbWFsbFN0eWxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zbWFsbFN0eWxlO1xuICB9XG5cbiAgc2V0IHNtYWxsU3R5bGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5fc21hbGxTdHlsZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3NtYWxsU3R5bGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlU2Nyb2xsVG9TZWxlY3RlZCgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MubWFzdGVyLWRldGFpbCcpIGdldCBtYXN0ZXJEZXRhaWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhc0RldGFpbFZpZXcgfHwgdGhpcy5fc21hbGxTdHlsZTtcbiAgfVxuXG4gIHNldCBoYXNEZXRhaWxWaWV3KHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuX2hhc0RldGFpbFZpZXcgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9oYXNEZXRhaWxWaWV3ID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVNjcm9sbFRvU2VsZWN0ZWQoKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBfaGFzRGV0YWlsVmlldztcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgLy8gbGlzdGVuIGZvciBjaGFuZ2VzIG9mIExpc3REZXRhaWxDb3BvbmVudHMgaW4gbGlzdCdzIGNvbnRlbnRcbiAgICB0aGlzLmxpc3REZXRhaWxzLmNoYW5nZXMuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGVsZW1lbnRzID0+IHtcbiAgICAgICAgLy8gaWYgZGV0YWlsIGlzIGF2YWlsYWJsZSwgc2V0IGNsYXNzIHRvIGhvc3QgdG8gZW5hYmxlIG1hc3Rlci1kZXRhaWwgc3R5bGluZ1xuICAgICAgICB0aGlzLmhhc0RldGFpbFZpZXcgPSBlbGVtZW50cy5sZW5ndGggPiAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5jaGlsZEl0ZW1zQ29tcG9uZW50LmNoYW5nZXMuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGVsZW1lbnRzID0+IHtcbiAgICAgICAgdGhpcy5jaGlsZEl0ZW1zQ29tcG9uZW50LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgZWxlbWVudC51cGRhdGVFdmVudC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RPbmUoZWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiAodGhpcy5oYXNEZXRhaWxWaWV3ID0gdGhpcy5saXN0RGV0YWlscy5sZW5ndGggPiAwKSk7XG5cbiAgICB0aGlzLmNoaWxkSXRlbXNDb21wb25lbnQuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGVsZW1lbnQudXBkYXRlRXZlbnQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zZWxlY3RPbmUoZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdE9uZShzZWxlY3RJdGVtOiBNYXN0ZXJEZXRhaWxMaXN0Um93Q29tcG9uZW50KSB7XG4gICAgaWYgKCF0aGlzLmNoaWxkSXRlbXNDb21wb25lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jaGlsZEl0ZW1zQ29tcG9uZW50LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBlbGVtZW50LnNlbGVjdGVkID0gZWxlbWVudCA9PT0gc2VsZWN0SXRlbTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmNoaWxkSXRlbXNDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY2hpbGRJdGVtc0NvbXBvbmVudC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBlbGVtZW50LnVwZGF0ZUV2ZW50LnVuc3Vic2NyaWJlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVNjcm9sbFRvU2VsZWN0ZWQoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmNoaWxkSXRlbXNDb21wb25lbnQ/LmZpbmQoZWxlbWVudCA9PiBlbGVtZW50LnNlbGVjdGVkKTtcbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZWxlY3RlZC51cGRhdGVTY3JvbGxQb3NpdGlvbigpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=