import { __decorate } from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, QueryList } from '@angular/core';
import { MasterDetailListRowEntryComponent } from '../master-detail-list-row-entry/master-detail-list-row-entry.component';
let MasterDetailListRowComponent = class MasterDetailListRowComponent {
    constructor(element) {
        this.element = element;
        this.updateEvent = new EventEmitter();
    }
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            if (this._selected) {
                this.updateScrollPosition();
            }
        }
    }
    get selected() {
        return this._selected;
    }
    click(event) {
        this.updateEvent.emit();
    }
    ngOnInit() {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
    }
    updateScrollPosition() {
        this.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
    }
};
MasterDetailListRowComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(), HostBinding('class.selected')
], MasterDetailListRowComponent.prototype, "selected", null);
__decorate([
    ContentChildren(MasterDetailListRowEntryComponent)
], MasterDetailListRowComponent.prototype, "listEntities", void 0);
__decorate([
    HostBinding('attr.id'),
    Input()
], MasterDetailListRowComponent.prototype, "id", void 0);
__decorate([
    Output()
], MasterDetailListRowComponent.prototype, "updateEvent", void 0);
__decorate([
    HostListener('click', ['$event'])
], MasterDetailListRowComponent.prototype, "click", null);
MasterDetailListRowComponent = __decorate([
    Component({
        selector: 'bmw-master-detail-list-row',
        template: "<ng-content select=\"bmw-master-detail-list-row-entry\"></ng-content>\n",
        styles: [":host{background-color:var(--list-item__default__background-color);display:table-row-group;display:-ms-grid;display:grid;-ms-grid-columns:var(--list__item__col-size);grid-template-columns:var(--list__item__col-size);border-bottom:1px solid var(--list__item__border-bottom-color);padding:var(--spacing-bmw-xxs) var(--spacing-bmw-xs) var(--spacing-bmw-xs) var(--spacing-bmw-xs);cursor:pointer}:host:hover{background-color:var(--list__item__hover__background-color)}:host.selected{background-color:var(--list__item__selected__background-color)}@media screen and (min-width:37.49rem){:host{padding:0;display:table-row}}:host-context(bmw-master-detail-list.master-detail){display:-ms-grid;display:grid;-ms-grid-columns:var(--list__item__col-size);grid-template-columns:var(--list__item__col-size);border-bottom:1px solid var(--list__item__border-bottom-color);padding:var(--spacing-bmw-xxs) var(--spacing-bmw-xs) var(--spacing-bmw-xs) var(--spacing-bmw-xs)}"]
    })
], MasterDetailListRowComponent);
export { MasterDetailListRowComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyLWRldGFpbC1saXN0LXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYm13LWRzL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJtYXN0ZXItZGV0YWlsLWxpc3QvbWFzdGVyLWRldGFpbC1saXN0LXJvdy9tYXN0ZXItZGV0YWlsLWxpc3Qtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3RUFBd0UsQ0FBQztBQU8zSCxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtJQXlCdkMsWUFBNkIsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUpoRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFJWSxDQUFDO0lBeEJaLElBQUksUUFBUSxDQUFDLEtBQWM7UUFDakUsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2FBQzdCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFla0MsS0FBSyxDQUFDLEtBQWlCO1FBQ3hELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7aUJBQ3BCLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQ1osU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7Q0FDRixDQUFBOztZQWhCdUMsVUFBVTs7QUF4QlI7SUFBdkMsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLGdCQUFnQixDQUFDOzREQU90QztBQU9EO0lBREMsZUFBZSxDQUFDLGlDQUFpQyxDQUFDO2tFQUNRO0FBRzNEO0lBRkMsV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUN0QixLQUFLLEVBQUU7d0RBQ0c7QUFHWDtJQURDLE1BQU0sRUFBRTtpRUFDOEI7QUFNSjtJQUFsQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7eURBRWpDO0FBN0JVLDRCQUE0QjtJQUx4QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsNEJBQTRCO1FBQ3RDLG1GQUFzRDs7S0FFdkQsQ0FBQztHQUNXLDRCQUE0QixDQXlDeEM7U0F6Q1ksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXN0ZXJEZXRhaWxMaXN0Um93RW50cnlDb21wb25lbnQgfSBmcm9tICcuLi9tYXN0ZXItZGV0YWlsLWxpc3Qtcm93LWVudHJ5L21hc3Rlci1kZXRhaWwtbGlzdC1yb3ctZW50cnkuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LW1hc3Rlci1kZXRhaWwtbGlzdC1yb3cnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFzdGVyLWRldGFpbC1saXN0LXJvdy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hc3Rlci1kZXRhaWwtbGlzdC1yb3cuY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNYXN0ZXJEZXRhaWxMaXN0Um93Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgQEhvc3RCaW5kaW5nKCdjbGFzcy5zZWxlY3RlZCcpIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9zZWxlY3RlZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGVkID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy5fc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTY3JvbGxQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gIH1cblxuICBAQ29udGVudENoaWxkcmVuKE1hc3RlckRldGFpbExpc3RSb3dFbnRyeUNvbXBvbmVudClcbiAgbGlzdEVudGl0aWVzOiBRdWVyeUxpc3Q8TWFzdGVyRGV0YWlsTGlzdFJvd0VudHJ5Q29tcG9uZW50PjtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgQElucHV0KClcbiAgaWQ6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgdXBkYXRlRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSkgY2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLnVwZGF0ZUV2ZW50LmVtaXQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5pZClcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcbiAgfVxuXG4gIHVwZGF0ZVNjcm9sbFBvc2l0aW9uKCkge1xuICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ25lYXJlc3QnLCBpbmxpbmU6ICduZWFyZXN0JyB9KTtcbiAgfVxufVxuIl19