var ToggleIconButtonComponent_1;
import { __decorate } from "tslib";
import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ToggleButtonComponent } from './toggle-button.component';
let ToggleIconButtonComponent = ToggleIconButtonComponent_1 = class ToggleIconButtonComponent extends ToggleButtonComponent {
    constructor() {
        super();
        this.iconClass = '';
        this.tabIndex = 0;
    }
    checkProperties() {
        if (!this.iconClass)
            throw Error('You have to provide icon class!');
        if (!this.ariaLabel) {
            this.ariaLabel = 'toggle icon button with ' + this.iconClass;
        }
        this.small = this.iconButton === 'small';
        if (this.disabled) {
            this.form.controls[this.name].disable();
        }
        else {
            this.form.controls[this.name].enable();
        }
    }
};
__decorate([
    Input()
], ToggleIconButtonComponent.prototype, "iconClass", void 0);
__decorate([
    Input()
], ToggleIconButtonComponent.prototype, "iconButton", void 0);
__decorate([
    Input()
], ToggleIconButtonComponent.prototype, "ariaLabel", void 0);
__decorate([
    Input()
], ToggleIconButtonComponent.prototype, "tabIndex", void 0);
ToggleIconButtonComponent = ToggleIconButtonComponent_1 = __decorate([
    Component({
        selector: 'bmw-toggle-icon-button',
        template: "<div [class.disabled]=\"disabled\" [formGroup]=\"form\">\n  <input\n    type=\"checkbox\"\n    [name]=\"name\"\n    [id]=\"id\"\n    [checked]=\"checked\"\n    [attr.aria-checked]=\"checked\"\n    (change)=\"change()\"\n    [formControlName]=\"name\"\n    [tabindex]=\"disabled ? -1 : tabIndex\"\n  />\n  <label [for]=\"id\" (click)=\"stopPropagation($event)\" [class.icon-button--small]=\"small\" [attr.aria-label]=\"ariaLabel\">\n    <i [ngClass]=\"[iconClass]\"></i>\n  </label>\n</div>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => ToggleIconButtonComponent_1),
                multi: true
            }
        ],
        styles: ["label{height:var(--icon-button__medium__font-size);width:var(--icon-button__medium__font-size);font-size:var(--icon-button__medium__font-size);padding:var(--icon-button__medium__padding);color:var(--icon-button__default__color);border:none;display:block;box-sizing:content-box;cursor:pointer;background-color:transparent}label i{width:var(--icon-button__medium__font-size);height:var(--icon-button__medium__font-size);display:inline-block}label.icon-button--small{height:var(--icon-button__small__font-size);width:var(--icon-button__small__font-size);font-size:var(--icon-button__small__font-size);padding:var(--icon-button__small__padding)}label.icon-button--small i{width:var(--icon-button__small__font-size);height:var(--icon-button__small__font-size)}label:hover{background-color:var(--icon-button__hover__background-color)}label:focus{outline:0}label[disabled]{opacity:.5;pointer-events:none}div.disabled{cursor:no-drop;display:inline-block}input{width:.1px;height:.1px;opacity:0;position:absolute;z-index:-1}input[disabled]+label{opacity:.7;pointer-events:none}input:checked+label{background-color:var(--icon-button__checked__background-color)}input:focus+label{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}"]
    })
], ToggleIconButtonComponent);
export { ToggleIconButtonComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWljb24tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInRvZ2dsZS1idXR0b24vdG9nZ2xlLWljb24tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQWNsRSxJQUFhLHlCQUF5QixpQ0FBdEMsTUFBYSx5QkFBMEIsU0FBUSxxQkFBcUI7SUFTbEU7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQVJWLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFNZixhQUFRLEdBQUcsQ0FBQyxDQUFDO0lBR2IsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFBRSxNQUFNLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBRXBFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsMEJBQTBCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUM5RDtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxPQUFPLENBQUM7UUFFekMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN6QzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztDQUNGLENBQUE7QUExQkM7SUFEQyxLQUFLLEVBQUU7NERBQ087QUFFZjtJQURDLEtBQUssRUFBRTs2REFDVztBQUVuQjtJQURDLEtBQUssRUFBRTs0REFDVTtBQUVsQjtJQURDLEtBQUssRUFBRTsyREFDSztBQVJGLHlCQUF5QjtJQVpyQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsd0JBQXdCO1FBQ2xDLHVmQUFrRDtRQUVsRCxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUF5QixDQUFDO2dCQUN4RCxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7O0tBQ0YsQ0FBQztHQUNXLHlCQUF5QixDQTRCckM7U0E1QlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBUb2dnbGVCdXR0b25Db21wb25lbnQgfSBmcm9tICcuL3RvZ2dsZS1idXR0b24uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LXRvZ2dsZS1pY29uLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi90b2dnbGUtaWNvbi1idXR0b24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90b2dnbGUtaWNvbi1idXR0b24uY29tcG9uZW50Lmxlc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUb2dnbGVJY29uQnV0dG9uQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFRvZ2dsZUljb25CdXR0b25Db21wb25lbnQgZXh0ZW5kcyBUb2dnbGVCdXR0b25Db21wb25lbnQge1xuICBASW5wdXQoKVxuICBpY29uQ2xhc3MgPSAnJztcbiAgQElucHV0KClcbiAgaWNvbkJ1dHRvbjogc3RyaW5nO1xuICBASW5wdXQoKVxuICBhcmlhTGFiZWw6IHN0cmluZztcbiAgQElucHV0KClcbiAgdGFiSW5kZXggPSAwO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgY2hlY2tQcm9wZXJ0aWVzKCkge1xuICAgIGlmICghdGhpcy5pY29uQ2xhc3MpIHRocm93IEVycm9yKCdZb3UgaGF2ZSB0byBwcm92aWRlIGljb24gY2xhc3MhJyk7XG5cbiAgICBpZiAoIXRoaXMuYXJpYUxhYmVsKSB7XG4gICAgICB0aGlzLmFyaWFMYWJlbCA9ICd0b2dnbGUgaWNvbiBidXR0b24gd2l0aCAnICsgdGhpcy5pY29uQ2xhc3M7XG4gICAgfVxuXG4gICAgdGhpcy5zbWFsbCA9IHRoaXMuaWNvbkJ1dHRvbiA9PT0gJ3NtYWxsJztcblxuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmZvcm0uY29udHJvbHNbdGhpcy5uYW1lXS5kaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9ybS5jb250cm9sc1t0aGlzLm5hbWVdLmVuYWJsZSgpO1xuICAgIH1cbiAgfVxufVxuIl19