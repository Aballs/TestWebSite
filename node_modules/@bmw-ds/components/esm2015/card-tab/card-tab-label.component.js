import { __decorate } from "tslib";
import { Component, ViewChild, AfterViewInit, Output, EventEmitter, ElementRef, Input } from '@angular/core';
let CardTabLabelComponent = class CardTabLabelComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.closable = true;
        this.emitClose = new EventEmitter();
        this.emitClick = new EventEmitter();
        this.destroyed = false;
    }
    ngAfterViewInit() {
        this.closeButton.nativeElement.addEventListener('click', e => {
            this.emitClose.emit(this.for);
            e.stopPropagation();
        });
        this.label.nativeElement.addEventListener('click', e => {
            this.emitClick.emit(this.for);
            e.stopPropagation();
        });
    }
    destroy() {
        this.elementRef.nativeElement.parentElement.removeChild(this.elementRef.nativeElement);
        this.destroyed = true;
    }
};
CardTabLabelComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    ViewChild('close')
], CardTabLabelComponent.prototype, "closeButton", void 0);
__decorate([
    ViewChild('label')
], CardTabLabelComponent.prototype, "label", void 0);
__decorate([
    Input()
], CardTabLabelComponent.prototype, "closable", void 0);
__decorate([
    Input()
], CardTabLabelComponent.prototype, "for", void 0);
__decorate([
    Input()
], CardTabLabelComponent.prototype, "selected", void 0);
__decorate([
    Input()
], CardTabLabelComponent.prototype, "disabled", void 0);
__decorate([
    Output()
], CardTabLabelComponent.prototype, "emitClose", void 0);
__decorate([
    Output()
], CardTabLabelComponent.prototype, "emitClick", void 0);
CardTabLabelComponent = __decorate([
    Component({
        selector: 'bmw-card-tab-label',
        template: "<label #label [class.closable]=\"closable\" [class.disabled]=\"disabled\" [class.selected]=\"selected\">\n  <span class=\"bmw-component-headline-text\"><ng-content></ng-content> </span>\n  <div class=\"close\" #close></div>\n</label>\n",
        styles: ["label{display:block;min-width:var(--card-tabs__label__default__min-width);padding:var(--card-tabs__label__default__padding);padding-bottom:calc(var(--card-tabs__label__default__padding) + 2px);padding-right:calc(var(--card-tabs__label__default__padding) - 2px);margin-right:var(--card-tabs__label__icon__margin-right);text-align:center;color:var(--card-tabs__labels__default__color);height:calc(var(--card-tabs__label__default__height) + 2px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden;bottom:-2px;box-sizing:border-box;cursor:pointer;position:relative}label:focus{outline:0}label.selected{border:2px solid #e5e3dd;border-bottom:none;padding:calc(var(--card-tabs__label__default__padding) - 2px);padding-bottom:calc(var(--card-tabs__label__default__padding) + 2px);background-color:#fff;z-index:var(--card-tabs__menu__z-index)}label.selected .bmw-component-headline-text{color:var(--card-tabs__labels__selected__color)}label.selected div.close::after{padding:calc(var(--card-tabs__label__default__height)/ 2 - (var(--card-tabs__label__with-icon__icon-size)/ 2) - 2px) var(--card-tabs__label__icon__padding)}label.disabled{opacity:.5;pointer-events:none}label.closable{padding-right:calc(2 * var(--card-tabs__label__icon__padding) + var(--card-tabs__label__default__line-height))}label.closable .close::after{content:'\\e93e';font-family:iwp;position:absolute;top:0;right:0;height:var(--card-tabs__label__default__line-height);width:var(--card-tabs__label__default__line-height);color:var(--card-tabs__labels__default__color);padding:var(--card-tabs__label__default__padding) var(--card-tabs__label__icon__padding);padding-bottom:calc(var(--card-tabs__label__default__padding) + 2px)}label:hover .bmw-component-headline-text{color:var(--card-tabs__labels__hover__color)}:host{display:inline-flex;position:relative;max-width:calc(100% - var(--card-tabs__label__default__height))}:host[disabled]{cursor:no-drop}"]
    })
], CardTabLabelComponent);
export { CardTabLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC10YWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY2FyZC10YWIvY2FyZC10YWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzdHLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBa0JoQyxZQUFtQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBWnpDLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFRaEIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFdkMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDdkMsY0FBUyxHQUFHLEtBQUssQ0FBQztJQUMwQixDQUFDO0lBRTdDLGVBQWU7UUFDYixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRTtZQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELE9BQU87UUFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUE7O1lBaEJnQyxVQUFVOztBQWhCekM7SUFEQyxTQUFTLENBQUMsT0FBTyxDQUFDOzBEQUNGO0FBRWpCO0lBREMsU0FBUyxDQUFDLE9BQU8sQ0FBQztvREFDUjtBQUVYO0lBREMsS0FBSyxFQUFFO3VEQUNRO0FBRWhCO0lBREMsS0FBSyxFQUFFO2tEQUNJO0FBRVo7SUFEQyxLQUFLLEVBQUU7dURBQ1U7QUFFbEI7SUFEQyxLQUFLLEVBQUU7dURBQ1U7QUFFbEI7SUFEQyxNQUFNLEVBQUU7d0RBQzhCO0FBRXZDO0lBREMsTUFBTSxFQUFFO3dEQUM4QjtBQWhCNUIscUJBQXFCO0lBTGpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsdVBBQThDOztLQUUvQyxDQUFDO0dBQ1cscUJBQXFCLENBa0NqQztTQWxDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgQWZ0ZXJWaWV3SW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Jtdy1jYXJkLXRhYi1sYWJlbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJkLXRhYi1sYWJlbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2NhcmQtdGFiLWxhYmVsLmNvbXBvbmVudC5sZXNzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ2FyZFRhYkxhYmVsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBWaWV3Q2hpbGQoJ2Nsb3NlJylcbiAgY2xvc2VCdXR0b246IGFueTtcbiAgQFZpZXdDaGlsZCgnbGFiZWwnKVxuICBsYWJlbDogYW55O1xuICBASW5wdXQoKVxuICBjbG9zYWJsZSA9IHRydWU7XG4gIEBJbnB1dCgpXG4gIGZvcjogc3RyaW5nO1xuICBASW5wdXQoKVxuICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgQElucHV0KClcbiAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIEBPdXRwdXQoKVxuICBlbWl0Q2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpXG4gIGVtaXRDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuY2xvc2VCdXR0b24ubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgdGhpcy5lbWl0Q2xvc2UuZW1pdCh0aGlzLmZvcik7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuICAgIHRoaXMubGFiZWwubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgdGhpcy5lbWl0Q2xpY2suZW1pdCh0aGlzLmZvcik7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG59XG4iXX0=