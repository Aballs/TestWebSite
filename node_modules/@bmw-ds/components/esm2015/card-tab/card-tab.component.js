import { __decorate } from "tslib";
import { Component, OnInit, ElementRef, ContentChildren, QueryList, AfterViewInit, EventEmitter } from '@angular/core';
import { CardTabLabelComponent } from './card-tab-label.component';
let CardTabComponent = class CardTabComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngOnInit() {
        console.warn('Beware, this component is not prepared for production usage!');
        this.hiddenLabels = this.elementRef.nativeElement.querySelector('.three-dots');
        this.hiddenLabels.addEventListener('focusout', e => {
            const leavingParent = !this.hiddenLabels.contains(e.relatedTarget);
            if (leavingParent) {
                this.toggleHiddenLabels(false);
            }
        });
        this.enableKeyboardControl();
        this.setResizeTrigger();
        setTimeout(() => {
            this.hideLabelsIfNecessary();
        }, 10);
    }
    ngAfterViewInit() {
        this.prepareLabels();
    }
    prepareLabels() {
        this.articles = this.elementRef.nativeElement.querySelectorAll('bmw-card-tab-content');
        this.labels.toArray().forEach((labelElement, i) => {
            const label = labelElement.elementRef.nativeElement.querySelector('label');
            const closeEmitter = new EventEmitter();
            closeEmitter.emit = (closeId) => {
                this.remove(closeId);
            };
            const clickEmitter = new EventEmitter();
            clickEmitter.emit = (clickId) => {
                this.setSelected(clickId);
                this.toggleHiddenLabels(false);
            };
            labelElement.emitClose = closeEmitter;
            labelElement.emitClick = clickEmitter;
            label.dataset.order = i;
            const id = labelElement.for;
            if (typeof labelElement.selected !== 'undefined') {
                this.setSelected(id);
            }
        });
        if (!this.selected && this.labels.toArray()[0]) {
            Promise.resolve().then(() => {
                this.setSelected(this.labels.toArray()[0].for);
            });
        }
    }
    setResizeTrigger() {
        let resizeTimer;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimer);
            const that = this;
            resizeTimer = setTimeout(() => {
                that.hideLabelsIfNecessary(true);
            }, 10);
        });
    }
    setSelected(selected) {
        this.selected = selected;
        this.labels.toArray().forEach((labelElement, i) => {
            const id = labelElement.for;
            if (selected === id) {
                labelElement.selected = true;
            }
            else {
                labelElement.selected = false;
            }
        });
        for (let i = 0; i < this.articles.length; i++) {
            const id = this.articles[i].getAttribute('id');
            if (selected === id) {
                this.articles[i].classList.add('selected');
            }
            else {
                this.articles[i].classList.remove('selected');
            }
        }
        setTimeout(() => {
            this.hideLabelsIfNecessary(true);
        });
    }
    remove(removedId) {
        this.labels['_results'].forEach((labelElement, i) => {
            const id = labelElement.for;
            if (removedId === id) {
                labelElement.destroy();
            }
        });
        for (let i = 0; i < this.articles.length; i++) {
            const id = this.articles[i].getAttribute('id');
            if (removedId === id) {
                this.articles[i].parentElement.removeChild(this.articles[i]);
            }
        }
        if (this.selected === removedId && this.labels.toArray().filter(e => e.destroyed === false).length > 0) {
            this.setSelected(this.labels.toArray().filter(e => e.destroyed === false)[0].for);
        }
        this.hideLabelsIfNecessary(true);
    }
    enableKeyboardControl() {
        this.elementRef.nativeElement.querySelector('.labels').addEventListener('keydown', event => {
            event.preventDefault();
            const keyName = event.key;
            if (keyName.slice(-5) === 'Right') {
                for (let i = 0; i < this.labels.length - 1; i++) {
                    const id = this.labels[i].getAttribute('for');
                    if (id === this.selected && this.labels[i + 1].getAttribute('disabled') === null) {
                        this.setSelected(this.labels[i + 1].getAttribute('for'));
                        if (this.labels[i + 1].parentElement.classList.contains('menu')) {
                            this.toggleHiddenLabels(true);
                        }
                        break;
                    }
                }
            }
            if (keyName.slice(-4) === 'Left') {
                for (let i = 1; i < this.labels.length; i++) {
                    const id = this.labels[i].getAttribute('for');
                    if (id === this.selected && this.labels[i - 1].getAttribute('disabled') === null) {
                        this.setSelected(this.labels[i - 1].getAttribute('for'));
                        if (this.labels[i - 1].parentElement.classList.contains('menu')) {
                            this.toggleHiddenLabels(true);
                        }
                        break;
                    }
                }
            }
            if (keyName.slice(0, 3) === 'Esc' || keyName === 'Enter') {
                this.toggleHiddenLabels(false);
                this.hideLabelsIfNecessary(true);
            }
        });
    }
    hideLabelsIfNecessary(showAllFirst) {
        const labelsDiv = this.elementRef.nativeElement.querySelector('div.labels');
        if (showAllFirst) {
            this.showAllLabels(labelsDiv);
        }
        const height = labelsDiv.offsetHeight;
        const defaultHeight = this.elementRef.nativeElement.querySelector('.labels .height-limiter').offsetHeight;
        if (height > defaultHeight) {
            this.createHiddenLabelsMenuElement();
            const id = this.hideLastNonActiveLabel(labelsDiv);
            if (id > 0) {
                this.hideLabelsIfNecessary();
            }
        }
    }
    showAllLabels(parentElement) {
        if (!this.hiddenLabelsMenu)
            return;
        const length = this.hiddenLabelsMenu.children.length;
        for (let i = 0; i < length; i++) {
            parentElement.append(this.hiddenLabelsMenu.children[0]);
        }
        this.hiddenLabels.removeChild(this.hiddenLabelsMenu);
        this.hiddenLabelsMenu = undefined;
        this.sort(parentElement);
    }
    sort(parentElement) {
        let array = parentElement.children;
        array = Array.from(array).sort((a, b) => {
            if (!a.querySelector('label'))
                return -1;
            if (!b.querySelector('label'))
                return 1;
            return a.querySelector('label').dataset.order - b.querySelector('label').dataset.order;
        });
        for (let i = 0; i < array.length; i++) {
            parentElement.append(array[i]);
        }
    }
    hideLastNonActiveLabel(parentElement) {
        let lastID = parentElement.querySelectorAll('.labels > bmw-card-tab-label').length - 1;
        let lastChild = parentElement.querySelectorAll('.labels > bmw-card-tab-label')[lastID];
        if (lastChild.querySelector('.selected') !== null) {
            lastID--;
            lastChild = parentElement.querySelectorAll('.labels > bmw-card-tab-label')[lastID];
        }
        if (lastChild.classList.contains('height-limiter') || lastChild.classList.contains('three-dots')) {
            return -1;
        }
        this.hiddenLabelsMenu.prepend(lastChild);
        return lastID;
    }
    createHiddenLabelsMenuElement() {
        if (this.hiddenLabelsMenu)
            return;
        this.hiddenLabelsMenu = document.createElement('div');
        this.hiddenLabelsMenu.classList.add('menu');
        this.hiddenLabels.append(this.hiddenLabelsMenu);
    }
    toggleHiddenLabels(state) {
        if (!this.hiddenLabels)
            return;
        const opened = this.hiddenLabels.classList.contains('opened');
        if (this.hiddenLabelsMenu && (state === true || opened === false)) {
            const rectangle = this.hiddenLabels.getBoundingClientRect();
            const position = rectangle.x + rectangle.width - 2;
            this.hiddenLabelsMenu.style['max-width'] = position + 'px';
        }
        if (state === true) {
            this.hiddenLabels.classList.add('opened');
        }
        else if (state === false) {
            this.hiddenLabels.classList.remove('opened');
        }
        else if (opened) {
            this.hiddenLabels.classList.remove('opened');
        }
        else {
            this.hiddenLabels.classList.add('opened');
        }
    }
};
CardTabComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    ContentChildren(CardTabLabelComponent)
], CardTabComponent.prototype, "labels", void 0);
CardTabComponent = __decorate([
    Component({
        selector: 'bmw-card-tab',
        template: "<div class=\"wrapper\">\n  <div class=\"labels\" tabindex=\"0\">\n    <div class=\"three-dots\" (click)=\"toggleHiddenLabels()\" tabindex=\"0\"></div>\n    <div class=\"height-limiter\"></div>\n    <ng-content select=\"bmw-card-tab-label\"></ng-content>\n  </div>\n  <ng-content select=\"bmw-card-tab-content\"></ng-content>\n</div>\n",
        styles: [".three-dots{position:absolute;bottom:0;right:0;display:inline-block;order:2;box-sizing:card-box;height:var(--card-tabs__label__default__height)}.three-dots:empty{display:none}.three-dots:focus{outline:0;background-color:var(--card-tabs__more-dots__selected__background-color)}.three-dots .menu{display:none;position:absolute;background-color:var(--card-tabs__more-dots__menu__background-color);top:100%;right:0;z-index:var(--card-tabs__menu__z-index);border:solid 2px var(--card-tabs__more-dots__menu__border-color)}.three-dots .menu ::ng-deep bmw-card-tab-label{display:block;max-width:100%}.three-dots.opened .menu{display:inline-block}.three-dots::after{display:inline-block;line-height:var(--card-tabs__label__icon__font-size);font-size:var(--card-tabs__label__icon__font-size);padding:var(--card-tabs__label__icon__padding);padding-bottom:calc(var(--card-tabs__label__icon__padding) - 2px);font-family:iwp;color:var(--card-tabs__labels__default__color);content:'\\ea22'}.labels{padding-right:var(--card-tabs__label__default__height);position:relative;display:flex;flex:1 0 auto;flex-wrap:wrap}.labels:focus{outline:0}.labels .height-limiter{position:absolute;width:100%;z-index:-9;left:0;top:0;height:calc(var(--card-tabs__label__default__height) + 2px);box-sizing:border-box}.wrapper{min-width:calc(100px + var(--card-tabs__label__default__height))}"]
    })
], CardTabComponent);
export { CardTabComponent };
//# sourceMappingURL=data:application/json;base64,