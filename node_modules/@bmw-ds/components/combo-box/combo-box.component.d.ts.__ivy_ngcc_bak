import { AfterContentInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, AfterViewInit, ChangeDetectorRef, SimpleChanges } from '@angular/core';
import { ComboBoxDropdownItemComponent } from './combo-box-dropdown-item.component';
import { ComboBoxInputComponent } from './combo-box-input.component';
import { ControlValueAccessor, NgControl } from '@angular/forms';
export declare const enum ComboBoxType {
    SINGLE = "SINGLE",
    MULTI = "MULTI"
}
export interface ComboBoxItem {
    value: any;
    label: string;
    disabled: boolean;
    focused?: boolean;
    selected: boolean;
    id: string;
}
export declare type ComboBoxFilter = (searchQuery: string, allComboBoxItems: ComboBoxItem[]) => ComboBoxItem[];
export declare class ComboBoxComponent implements OnInit, AfterContentInit, AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {
    private control;
    private elementRef;
    private cdRef;
    placeholder: string;
    noResultsPlaceholder: string;
    disabled: boolean;
    tabIndex: number;
    required: boolean;
    clearable: boolean;
    customFilter: ComboBoxFilter;
    /**
     * Show the multiComboBoxText string instead of each tag. (default = false)
     */
    textInsteadOfTags: boolean;
    id: string;
    hostTabIndex: string;
    items: QueryList<ComboBoxDropdownItemComponent>;
    private _label;
    filteredItems: ComboBoxItem[];
    _items: ComboBoxItem[];
    selectedItems: ComboBoxItem[];
    input: ComboBoxInputComponent;
    inputBox: ElementRef;
    opened: boolean;
    showInvalidState: boolean;
    comboFocused: boolean;
    gridClasses: string[];
    private _value;
    private _type;
    private _inputFocused;
    private _isTouched;
    multiComboBoxText: string;
    scrollOffset: number;
    private onDestroy$;
    outsideCallback: any;
    get value(): any;
    set value(newValue: any);
    get useMulti(): boolean;
    set type(comboBoxType: ComboBoxType);
    changeEvent: EventEmitter<any>;
    open: EventEmitter<any>;
    /**
     * Text to be used in multi combo boxes that use text instead of tags.
     * It can be a string or a callback function that takes the array of selected items and returns the text in a custom format.
     * In case of providing a string, it replaces the text of the default format: 'Selected (0)'.
     */
    selectedOptionsText: string | ((items: ComboBoxItem[]) => string);
    private _onChange;
    private _onTouched;
    private _defaultFilter;
    onKeydown(event: KeyboardEvent): void;
    onFocusout({ target }: {
        target: any;
    }): void;
    constructor(control: NgControl, elementRef: ElementRef, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    mapItems(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    focusTag(selectedItem: ComboBoxItem): void;
    focusoutTag(selectedItem: ComboBoxItem): void;
    selectTag(selectedItem: ComboBoxItem): void;
    toggle(state?: boolean): void;
    onClickOutside({ target }: {
        target: any;
    }): void;
    refreshItemsState(): void;
    resetFocusedItem(): void;
    setPreviousItemAsFocused(): void;
    setNextItemAsFocused(): void;
    toggleMultiModeItem(item: ComboBoxItem, options?: {
        removeFocusAfterSelection: boolean;
    }): void;
    updateSelectedItems(item: ComboBoxItem): void;
    updateViewInput(): void;
    updateMultiComboBoxText(): void;
    focusFirstFilteredItem(): void;
    updateViewInputAfterDropdownClosed(): void;
    resetDropdownItems(): void;
    emitSelectedItemsChange(): void;
    filter(): void;
    filterAndOpenDropdown(): void;
    cleanFilter(): void;
    selectItem(item: ComboBoxDropdownItemComponent): void;
    findItemByValue(value: any): ComboBoxDropdownItemComponent;
    clear(): void;
    isFormReset(): boolean;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    private changeValue;
    private _validate;
    private _listenToInputFocus;
    focusInput(): void;
    focusoutInput(): void;
    private _setGridClasses;
    private findFocusedTag;
    click(): void;
    inputTouched(): void;
}
