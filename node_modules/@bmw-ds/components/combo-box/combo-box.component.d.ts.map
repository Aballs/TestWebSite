{"version":3,"file":"combo-box.component.d.ts","sources":["combo-box.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, AfterViewInit, ChangeDetectorRef, SimpleChanges } from '@angular/core';\nimport { ComboBoxDropdownItemComponent } from './combo-box-dropdown-item.component';\nimport { ComboBoxInputComponent } from './combo-box-input.component';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nexport declare const enum ComboBoxType {\n    SINGLE = \"SINGLE\",\n    MULTI = \"MULTI\"\n}\nexport interface ComboBoxItem {\n    value: any;\n    label: string;\n    disabled: boolean;\n    focused?: boolean;\n    selected: boolean;\n    id: string;\n}\nexport declare type ComboBoxFilter = (searchQuery: string, allComboBoxItems: ComboBoxItem[]) => ComboBoxItem[];\nexport declare class ComboBoxComponent implements OnInit, AfterContentInit, AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {\n    private control;\n    private elementRef;\n    private cdRef;\n    placeholder: string;\n    noResultsPlaceholder: string;\n    disabled: boolean;\n    tabIndex: number;\n    required: boolean;\n    clearable: boolean;\n    customFilter: ComboBoxFilter;\n    /**\n     * Show the multiComboBoxText string instead of each tag. (default = false)\n     */\n    textInsteadOfTags: boolean;\n    id: string;\n    hostTabIndex: string;\n    items: QueryList<ComboBoxDropdownItemComponent>;\n    private _label;\n    filteredItems: ComboBoxItem[];\n    _items: ComboBoxItem[];\n    selectedItems: ComboBoxItem[];\n    input: ComboBoxInputComponent;\n    inputBox: ElementRef;\n    opened: boolean;\n    showInvalidState: boolean;\n    comboFocused: boolean;\n    gridClasses: string[];\n    private _value;\n    private _type;\n    private _inputFocused;\n    private _isTouched;\n    multiComboBoxText: string;\n    scrollOffset: number;\n    private onDestroy$;\n    outsideCallback: any;\n    get value(): any;\n    set value(newValue: any);\n    get useMulti(): boolean;\n    set type(comboBoxType: ComboBoxType);\n    changeEvent: EventEmitter<any>;\n    open: EventEmitter<any>;\n    /**\n     * Text to be used in multi combo boxes that use text instead of tags.\n     * It can be a string or a callback function that takes the array of selected items and returns the text in a custom format.\n     * In case of providing a string, it replaces the text of the default format: 'Selected (0)'.\n     */\n    selectedOptionsText: string | ((items: ComboBoxItem[]) => string);\n    private _onChange;\n    private _onTouched;\n    private _defaultFilter;\n    onKeydown(event: KeyboardEvent): void;\n    onFocusout({ target }: {\n        target: any;\n    }): void;\n    constructor(control: NgControl, elementRef: ElementRef, cdRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    mapItems(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    focusTag(selectedItem: ComboBoxItem): void;\n    focusoutTag(selectedItem: ComboBoxItem): void;\n    selectTag(selectedItem: ComboBoxItem): void;\n    toggle(state?: boolean): void;\n    onClickOutside({ target }: {\n        target: any;\n    }): void;\n    refreshItemsState(): void;\n    resetFocusedItem(): void;\n    setPreviousItemAsFocused(): void;\n    setNextItemAsFocused(): void;\n    toggleMultiModeItem(item: ComboBoxItem, options?: {\n        removeFocusAfterSelection: boolean;\n    }): void;\n    updateSelectedItems(item: ComboBoxItem): void;\n    updateViewInput(): void;\n    updateMultiComboBoxText(): void;\n    focusFirstFilteredItem(): void;\n    updateViewInputAfterDropdownClosed(): void;\n    resetDropdownItems(): void;\n    emitSelectedItemsChange(): void;\n    filter(): void;\n    filterAndOpenDropdown(): void;\n    cleanFilter(): void;\n    selectItem(item: ComboBoxDropdownItemComponent): void;\n    findItemByValue(value: any): ComboBoxDropdownItemComponent;\n    clear(): void;\n    isFormReset(): boolean;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: any): void;\n    setDisabledState(disabled: boolean): void;\n    private changeValue;\n    private _validate;\n    private _listenToInputFocus;\n    focusInput(): void;\n    focusoutInput(): void;\n    private _setGridClasses;\n    private findFocusedTag;\n    click(): void;\n    inputTouched(): void;\n}\n"]}