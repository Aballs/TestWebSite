import { __decorate } from "tslib";
import { ToggleButtonComponent } from './../../toggle-button/toggle-button.component';
import { Component, Output, Input, EventEmitter, ViewChild, TemplateRef, ElementRef, OnInit, ChangeDetectorRef } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
var SegmentedButtonItemComponent = /** @class */ (function () {
    function SegmentedButtonItemComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        this.buttonClicked = new EventEmitter();
        this.focused = false;
        this.isInDropdown = false;
        this.itemWidth = 'auto';
        this.native = this.el.nativeElement;
    }
    SegmentedButtonItemComponent.prototype.ngOnInit = function () {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
        if (!this.value)
            this.value = this.id;
        var controlObject = {};
        controlObject[this.id] = new FormControl(this.checked);
        this.reactiveForm = new FormGroup(controlObject);
    };
    SegmentedButtonItemComponent.prototype.toggleItemVisibility = function (state) {
        if (typeof state === 'undefined') {
            this.isHidden = !this.isHidden;
        }
        else {
            this.isHidden = state;
        }
    };
    SegmentedButtonItemComponent.prototype.setChecked = function (state) {
        var _this = this;
        setTimeout(function () {
            if (_this.disabled)
                return;
            if (typeof state === 'undefined') {
                _this.checked = !_this.checked;
            }
            else {
                _this.checked = state;
            }
            _this.reactiveForm.controls[_this.id].setValue(_this.checked);
        });
    };
    SegmentedButtonItemComponent.prototype.setTop = function (top) {
        this.fromTop = "calc(" + top * 100 + "% - " + top + "px)";
    };
    SegmentedButtonItemComponent.prototype.setWidth = function (width) {
        this.itemWidth = width + "px";
    };
    SegmentedButtonItemComponent.prototype.moveToDropdown = function () {
        this.isInDropdown = true;
    };
    SegmentedButtonItemComponent.prototype.removeFromDropdown = function () {
        this.itemWidth = 'auto';
        this.isInDropdown = false;
    };
    SegmentedButtonItemComponent.prototype.resetVisibility = function () {
        this.removeFromDropdown();
        this.toggleItemVisibility(false);
    };
    SegmentedButtonItemComponent.prototype.onClick = function (event) {
        if (this.disabled)
            return;
        this.buttonClicked.emit(this);
    };
    SegmentedButtonItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ViewChild('template', { read: TemplateRef })
    ], SegmentedButtonItemComponent.prototype, "sample", void 0);
    __decorate([
        ViewChild(ToggleButtonComponent)
    ], SegmentedButtonItemComponent.prototype, "button", void 0);
    __decorate([
        Input()
    ], SegmentedButtonItemComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], SegmentedButtonItemComponent.prototype, "checked", void 0);
    __decorate([
        Input()
    ], SegmentedButtonItemComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], SegmentedButtonItemComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], SegmentedButtonItemComponent.prototype, "buttonClicked", void 0);
    SegmentedButtonItemComponent = __decorate([
        Component({
            selector: 'bmw-segmented-button-item',
            template: "<ng-template #template>\n  <div\n    class=\"button-wrapper\"\n    [ngClass]=\"{\n      overflowed: isInDropdown,\n      hidden: isHidden\n    }\"\n    [style.top]=\"fromTop\"\n    [style.width]=\"itemWidth\"\n    [class.focused]=\"focused\"\n  >\n    <form [formGroup]=\"reactiveForm\">\n      <bmw-toggle-button\n        [disabled]=\"disabled\"\n        [checked]=\"checked && !disabled\"\n        (updateEvent)=\"onClick($event)\"\n        [form]=\"reactiveForm\"\n        [name]=\"id\"\n        [tabIndex]=\"isInDropdown ? -1 : 0\"\n      >\n        <ng-content></ng-content>\n      </bmw-toggle-button>\n    </form>\n  </div>\n</ng-template>\n",
            styles: [".button-wrapper{flex:1 0 auto;max-width:100%;margin-right:-1px}.overflowed{position:absolute;top:100%;right:0;margin-right:0;z-index:var(--segmented-button__item__z-index)}.overflowed.hidden{display:none}.overflowed.focused{z-index:calc(var(--toggle-button__default__z-index) + 1)}.overflowed.focused bmw-toggle-button ::ng-deep label{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}.overflowed.focused bmw-toggle-button ::ng-deep label.button--primary{outline:solid 1px;outline-color:var(--color-bmw-basic5);outline-offset:-3px}bmw-toggle-button ::ng-deep label{width:100%;height:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
        })
    ], SegmentedButtonItemComponent);
    return SegmentedButtonItemComponent;
}());
export { SegmentedButtonItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudGVkLWJ1dHRvbi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNlZ21lbnRlZC1idXR0b24vc2VnbWVudGVkLWJ1dHRvbi1pdGVtL3NlZ21lbnRlZC1idXR0b24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3RGLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFDTCxZQUFZLEVBQ1osU0FBUyxFQUNULFdBQVcsRUFDWCxVQUFVLEVBQ1YsTUFBTSxFQUNOLGlCQUFpQixFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT3hEO0lBOEJFLHNDQUFvQixFQUFjLEVBQVUsRUFBcUI7UUFBN0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBVmpFLGtCQUFhLEdBQStDLElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0UsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUVyQixjQUFTLEdBQUcsTUFBTSxDQUFDO1FBTWpCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVELCtDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7aUJBQ3BCLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQ1osU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUV0QyxJQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDekIsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsMkRBQW9CLEdBQXBCLFVBQXFCLEtBQWU7UUFDbEMsSUFBSSxPQUFPLEtBQUssS0FBSyxXQUFXLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDaEM7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVELGlEQUFVLEdBQVYsVUFBVyxLQUFlO1FBQTFCLGlCQVVDO1FBVEMsVUFBVSxDQUFDO1lBQ1QsSUFBSSxLQUFJLENBQUMsUUFBUTtnQkFBRSxPQUFPO1lBQzFCLElBQUksT0FBTyxLQUFLLEtBQUssV0FBVyxFQUFFO2dCQUNoQyxLQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUN0QjtZQUNELEtBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDZDQUFNLEdBQU4sVUFBTyxHQUFXO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBUSxHQUFHLEdBQUcsR0FBRyxZQUFPLEdBQUcsUUFBSyxDQUFDO0lBQ2xELENBQUM7SUFFRCwrQ0FBUSxHQUFSLFVBQVMsS0FBYTtRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFNLEtBQUssT0FBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxxREFBYyxHQUFkO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVELHlEQUFrQixHQUFsQjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFFRCxzREFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCw4Q0FBTyxHQUFQLFVBQVEsS0FBVTtRQUNoQixJQUFJLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDOztnQkE5RHVCLFVBQVU7Z0JBQWMsaUJBQWlCOztJQTVCakU7UUFEQyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDO2dFQUNwQjtJQUd6QjtRQURDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztnRUFDSDtJQUc5QjtRQURDLEtBQUssRUFBRTtrRUFDVTtJQUdsQjtRQURDLEtBQUssRUFBRTtpRUFDUztJQUdqQjtRQURDLEtBQUssRUFBRTsrREFDTTtJQUdkO1FBREMsS0FBSyxFQUFFOzREQUNHO0lBR1g7UUFEQyxNQUFNLEVBQUU7dUVBQ3NFO0lBcEJwRSw0QkFBNEI7UUFMeEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxvcEJBQXFEOztTQUV0RCxDQUFDO09BQ1csNEJBQTRCLENBNkZ4QztJQUFELG1DQUFDO0NBQUEsQUE3RkQsSUE2RkM7U0E3RlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9nZ2xlQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi8uLi8uLi90b2dnbGUtYnV0dG9uL3RvZ2dsZS1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT3V0cHV0LFxuICBJbnB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBWaWV3Q2hpbGQsXG4gIFRlbXBsYXRlUmVmLFxuICBFbGVtZW50UmVmLFxuICBPbkluaXQsXG4gIENoYW5nZURldGVjdG9yUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LXNlZ21lbnRlZC1idXR0b24taXRlbScsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWdtZW50ZWQtYnV0dG9uLWl0ZW0uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zZWdtZW50ZWQtYnV0dG9uLWl0ZW0uY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTZWdtZW50ZWRCdXR0b25JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGUnLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gIHNhbXBsZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBAVmlld0NoaWxkKFRvZ2dsZUJ1dHRvbkNvbXBvbmVudClcbiAgYnV0dG9uOiBUb2dnbGVCdXR0b25Db21wb25lbnQ7XG5cbiAgQElucHV0KClcbiAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgY2hlY2tlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICB2YWx1ZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIGlkOiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpXG4gIGJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxTZWdtZW50ZWRCdXR0b25JdGVtQ29tcG9uZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBmb2N1c2VkID0gZmFsc2U7XG4gIGlzSW5Ecm9wZG93biA9IGZhbHNlO1xuICBmcm9tVG9wOiBzdHJpbmc7XG4gIGl0ZW1XaWR0aCA9ICdhdXRvJztcbiAgaXNIaWRkZW46IGJvb2xlYW47XG4gIG5hdGl2ZTogSFRNTEVsZW1lbnQ7XG4gIHJlYWN0aXZlRm9ybTogRm9ybUdyb3VwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgdGhpcy5uYXRpdmUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaWQpXG4gICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKVxuICAgICAgICAudG9TdHJpbmcoMzYpXG4gICAgICAgIC5zdWJzdHJpbmcoMik7XG5cbiAgICBpZiAoIXRoaXMudmFsdWUpIHRoaXMudmFsdWUgPSB0aGlzLmlkO1xuXG4gICAgY29uc3QgY29udHJvbE9iamVjdCA9IHt9O1xuICAgIGNvbnRyb2xPYmplY3RbdGhpcy5pZF0gPSBuZXcgRm9ybUNvbnRyb2wodGhpcy5jaGVja2VkKTtcbiAgICB0aGlzLnJlYWN0aXZlRm9ybSA9IG5ldyBGb3JtR3JvdXAoY29udHJvbE9iamVjdCk7XG4gIH1cblxuICB0b2dnbGVJdGVtVmlzaWJpbGl0eShzdGF0ZT86IGJvb2xlYW4pIHtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5pc0hpZGRlbiA9ICF0aGlzLmlzSGlkZGVuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzSGlkZGVuID0gc3RhdGU7XG4gICAgfVxuICB9XG5cbiAgc2V0Q2hlY2tlZChzdGF0ZT86IGJvb2xlYW4pIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm47XG4gICAgICBpZiAodHlwZW9mIHN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gc3RhdGU7XG4gICAgICB9XG4gICAgICB0aGlzLnJlYWN0aXZlRm9ybS5jb250cm9sc1t0aGlzLmlkXS5zZXRWYWx1ZSh0aGlzLmNoZWNrZWQpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0VG9wKHRvcDogbnVtYmVyKSB7XG4gICAgdGhpcy5mcm9tVG9wID0gYGNhbGMoJHt0b3AgKiAxMDB9JSAtICR7dG9wfXB4KWA7XG4gIH1cblxuICBzZXRXaWR0aCh3aWR0aDogbnVtYmVyKSB7XG4gICAgdGhpcy5pdGVtV2lkdGggPSBgJHt3aWR0aH1weGA7XG4gIH1cblxuICBtb3ZlVG9Ecm9wZG93bigpIHtcbiAgICB0aGlzLmlzSW5Ecm9wZG93biA9IHRydWU7XG4gIH1cblxuICByZW1vdmVGcm9tRHJvcGRvd24oKSB7XG4gICAgdGhpcy5pdGVtV2lkdGggPSAnYXV0byc7XG4gICAgdGhpcy5pc0luRHJvcGRvd24gPSBmYWxzZTtcbiAgfVxuXG4gIHJlc2V0VmlzaWJpbGl0eSgpIHtcbiAgICB0aGlzLnJlbW92ZUZyb21Ecm9wZG93bigpO1xuICAgIHRoaXMudG9nZ2xlSXRlbVZpc2liaWxpdHkoZmFsc2UpO1xuICB9XG5cbiAgb25DbGljayhldmVudDogYW55KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcbiAgICB0aGlzLmJ1dHRvbkNsaWNrZWQuZW1pdCh0aGlzKTtcbiAgfVxufVxuIl19