import { __decorate } from "tslib";
import { AfterViewInit, Component, ContentChildren, ViewChild, OnInit, QueryList, ViewContainerRef, ChangeDetectorRef, EventEmitter, Output, ElementRef, ViewRef, TemplateRef, HostListener, forwardRef, Input, EmbeddedViewRef, OnDestroy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { SegmentedButtonItemComponent } from './segmented-button-item/segmented-button-item.component';
var SegmentedButtonComponent = /** @class */ (function () {
    function SegmentedButtonComponent(cd, elementRef) {
        this.cd = cd;
        this.elementRef = elementRef;
        this.onDestroy$ = new Subject();
        this.uncheckable = true;
        this.updateEvent = new EventEmitter();
        this.isMenuClosed = true;
        this.buttonItemClickSubscriptions = [];
        this.visibleElements = [];
        this.hiddenElements = [];
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    SegmentedButtonComponent_1 = SegmentedButtonComponent;
    SegmentedButtonComponent.prototype.onResize = function () {
        if (this.previousWidth >= this.elementRef.nativeElement.getBoundingClientRect().width) {
            //shrinking
            this._hideElement();
        }
        else {
            //expanding
            this._showElement();
        }
        this.previousWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
    };
    SegmentedButtonComponent.prototype.onKeydown = function (event) {
        var _this = this;
        var key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                if (!this.isMenuClosed) {
                    this.setNextItemAsFocused();
                }
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                if (!this.isMenuClosed) {
                    this.setPreviousItemAsFocused();
                }
                event.preventDefault();
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
                if (!this.isMenuClosed) {
                    var focusedItem = this.hiddenElements.find(function (el) { return el.item.focused === true; });
                    if (!focusedItem.item.disabled) {
                        this.selectButton(focusedItem.item);
                        focusedItem.item.focused = false;
                        this.childItemsComponent
                            .toArray()
                            .find(function (element) { return element.value === _this.value; })
                            .button.focus();
                    }
                }
                event.preventDefault();
                break;
            case 'Space':
            case 32:
                if (event.target === this.elementRef.nativeElement.querySelector('.extension-menu')) {
                    this.toggleMenu();
                    event.preventDefault();
                }
                break;
            case 'Tab':
            case 9:
                if (!this.isMenuClosed) {
                    this.toggleMenu();
                }
                break;
        }
    };
    SegmentedButtonComponent.prototype.ngOnInit = function () {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
        if (!this.name)
            this.name = 'segmented-' + this.id;
        this.previousWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
    };
    SegmentedButtonComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.visibleItemsContainer)
            return;
        this.createView();
        this.childItemsComponent.changes.subscribe(function (buttonItems) {
            _this.destroyView();
            _this.createView();
            if (buttonItems.last.checked) {
                _this.clearOtherChildren(buttonItems.last);
                _this._onChange(buttonItems.last.value);
                _this.updateEvent.emit(_this);
            }
        });
    };
    SegmentedButtonComponent.prototype.ngOnDestroy = function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    SegmentedButtonComponent.prototype.createView = function () {
        var _this = this;
        this.visibleElements = this.childItemsComponent.toArray().map(function (element, index) {
            element.resetVisibility();
            var view = _this.visibleItemsContainer.createEmbeddedView(element.sample);
            _this.buttonItemClickSubscriptions.push(element.buttonClicked.subscribe(function () {
                _this.selectButton(element);
                if (!_this.isMenuClosed) {
                    _this.toggleMenu();
                }
            }));
            if (element.checked) {
                _this.value = element.value;
            }
            if (_this.disabled) {
                element.disabled = _this.disabled;
            }
            return {
                view: view,
                order: index,
                item: element
            };
        });
        this.dots = this.visibleItemsContainer.createEmbeddedView(this.dropdownButton);
        this.cd.detectChanges();
        if (this._isOverflow) {
            this.showDots = true;
            this._hideElement();
        }
    };
    SegmentedButtonComponent.prototype.destroyView = function () {
        this.buttonItemClickSubscriptions.forEach(function (buttonClickSubscription) {
            buttonClickSubscription.unsubscribe();
        });
        this.visibleItemsContainer.clear();
        this.hiddenElements = [];
    };
    SegmentedButtonComponent.prototype.resetFocusedItem = function () {
        this.hiddenElements.forEach(function (el) { return (el.item.focused = false); });
    };
    SegmentedButtonComponent.prototype.setPreviousItemAsFocused = function () {
        if (!this.isMenuClosed &&
            this.hiddenElements.length > 0 &&
            this.hiddenElements.filter(function (el) { return !el.item.disabled; }).length > 0) {
            var focusedItemIndex = this.hiddenElements.findIndex(function (el) { return el.item.focused === true; });
            this.resetFocusedItem();
            if (focusedItemIndex !== -1 && focusedItemIndex !== 0) {
                focusedItemIndex = focusedItemIndex - 1;
            }
            else {
                focusedItemIndex = this.hiddenElements.length - 1;
            }
            this.hiddenElements[focusedItemIndex].item.focused = true;
            if (this.hiddenElements[focusedItemIndex].item.disabled) {
                this.setPreviousItemAsFocused();
            }
        }
    };
    SegmentedButtonComponent.prototype.setNextItemAsFocused = function () {
        if (!this.isMenuClosed &&
            this.hiddenElements.length > 0 &&
            this.hiddenElements.filter(function (el) { return !el.item.disabled; }).length > 0) {
            var focusedItemIndex = this.hiddenElements.findIndex(function (el) { return el.item.focused === true; });
            this.resetFocusedItem();
            if (focusedItemIndex !== -1 && focusedItemIndex !== this.hiddenElements.length - 1) {
                focusedItemIndex = focusedItemIndex + 1;
            }
            else {
                focusedItemIndex = 0;
            }
            this.hiddenElements[focusedItemIndex].item.focused = true;
            if (this.hiddenElements[focusedItemIndex].item.disabled) {
                this.setNextItemAsFocused();
            }
        }
    };
    SegmentedButtonComponent.prototype.showSelected = function (value) {
        var _this = this;
        var checkedEl = this.hiddenElements.find(function (el) {
            return el.item.value === value;
        });
        if (checkedEl) {
            checkedEl.item.removeFromDropdown();
            checkedEl.item.toggleItemVisibility(this.isMenuClosed);
            this.hiddenElements = this.hiddenElements.filter(function (el) { return el.item.value !== _this.value; });
            this.visibleElements.push(checkedEl);
            this.sortArrays();
            this.positionOverflowedItems();
            this.cd.detectChanges();
            this._hideElement();
        }
    };
    SegmentedButtonComponent.prototype._showElement = function () {
        if (this.hiddenElements.length) {
            var el = this.hiddenElements[0];
            el.item.removeFromDropdown();
            el.item.toggleItemVisibility(this.isMenuClosed);
            this.hiddenElements.splice(0, 1);
            this.visibleElements.push(el);
            this.sortArrays();
            el.view.detectChanges();
            if (this._isOverflow) {
                this._hideElement();
            }
            else {
                this._showElement();
            }
        }
        else {
            this.showDots = false;
        }
    };
    SegmentedButtonComponent.prototype._hideElement = function () {
        if (!this._isOverflow || this.visibleElements.length < 2) {
            return;
        }
        var index = this.visibleElements.length - 1;
        if (this.visibleElements[index].item.value === this.value) {
            index = index - 1;
        }
        var el = this.visibleElements[index];
        el.item.moveToDropdown();
        el.item.toggleItemVisibility(this.isMenuClosed);
        this.visibleElements.splice(index, 1);
        this.hiddenElements.unshift(el);
        this.sortArrays();
        this.positionOverflowedItems();
        this.cd.detectChanges();
        this._hideElement();
    };
    SegmentedButtonComponent.prototype.sortArrays = function () {
        this.hiddenElements.sort(function (a, b) { return a.order - b.order; });
        this.visibleElements.sort(function (a, b) { return a.order - b.order; });
    };
    SegmentedButtonComponent.prototype.selectButton = function (buttonItem) {
        var isValueChanged = false;
        if (this.uncheckable) {
            this.value = !buttonItem.checked ? buttonItem.value : null;
            isValueChanged = true;
        }
        else {
            if (this.value !== buttonItem.value) {
                this.value = buttonItem.value;
                isValueChanged = true;
            }
        }
        if (isValueChanged) {
            this._toggleCheckedChildren(buttonItem);
            this.showSelected(this.value);
            this._onChange(this.value);
        }
        else {
            buttonItem.button.checked = true;
        }
    };
    SegmentedButtonComponent.prototype.toggleMenu = function (state) {
        var _this = this;
        if (!this.disabled) {
            state !== undefined ? (this.isMenuClosed = state) : (this.isMenuClosed = !this.isMenuClosed);
            this.hiddenElements.forEach(function (el) {
                el.item.toggleItemVisibility(_this.isMenuClosed);
                el.view.detectChanges();
            });
        }
    };
    SegmentedButtonComponent.prototype.getMaxElWidthInDropdown = function () {
        var _this = this;
        if (this.hiddenElements.length) {
            this.toggleMenu(false);
            this.maxElWidthInDropdown = this.hiddenElements[0].view.rootNodes[0].getBoundingClientRect().width;
            this.hiddenElements.forEach(function (el) {
                var elWidth = el.view.rootNodes[0].getBoundingClientRect().width;
                if (elWidth > _this.maxElWidthInDropdown) {
                    _this.maxElWidthInDropdown = elWidth;
                }
            });
            this.toggleMenu(true);
        }
    };
    SegmentedButtonComponent.prototype.positionOverflowedItems = function () {
        var _this = this;
        this.getMaxElWidthInDropdown();
        this.hiddenElements.forEach(function (el, index) {
            el.item.setTop(index + 1);
            el.item.setWidth(_this.maxElWidthInDropdown);
        });
        this.cd.detectChanges();
    };
    Object.defineProperty(SegmentedButtonComponent.prototype, "_isOverflow", {
        get: function () {
            this._segmentButtonHeight = this.segmentButton.nativeElement.getBoundingClientRect().height.toFixed(0);
            this._componentHeight = this.labelWrapper.nativeElement.getBoundingClientRect().height.toFixed(0);
            if (this._segmentButtonHeight !== this._componentHeight) {
                this.showDots = true;
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    SegmentedButtonComponent.prototype._toggleCheckedChildren = function (item) {
        var _this = this;
        if (this.childItemsComponent) {
            this.childItemsComponent.toArray().forEach(function (element) {
                if (element === item) {
                    element.setChecked(_this.uncheckable ? !element.checked : true);
                    _this.updateEvent.emit(_this);
                }
                else {
                    element.setChecked(false);
                }
            });
        }
    };
    SegmentedButtonComponent.prototype.clearOtherChildren = function (item) {
        if (this.childItemsComponent) {
            this.childItemsComponent.toArray().forEach(function (element) {
                if (element !== item) {
                    element.setChecked(false);
                }
            });
        }
    };
    SegmentedButtonComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    SegmentedButtonComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    SegmentedButtonComponent.prototype.writeValue = function (value) {
        var _this = this;
        setTimeout(function () {
            var initialItem = _this.childItemsComponent.toArray().find(function (element) { return element.value === _this.value; });
            var itemToSelect = _this.childItemsComponent.toArray().find(function (element) { return element.value === value; });
            _this.value = value;
            if (initialItem) {
                initialItem.checked = false;
            }
            if (itemToSelect) {
                itemToSelect.checked = true;
            }
        });
    };
    SegmentedButtonComponent.prototype.setDisabledState = function () {
        this.childItemsComponent.forEach(function (el) {
            el.disabled = true;
        });
    };
    var SegmentedButtonComponent_1;
    SegmentedButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('labelWrapper')
    ], SegmentedButtonComponent.prototype, "labelWrapper", void 0);
    __decorate([
        ViewChild('segmentButton')
    ], SegmentedButtonComponent.prototype, "segmentButton", void 0);
    __decorate([
        ViewChild('dropdownButton', { read: TemplateRef })
    ], SegmentedButtonComponent.prototype, "dropdownButton", void 0);
    __decorate([
        ViewChild('visibleItemsContainer', { read: ViewContainerRef })
    ], SegmentedButtonComponent.prototype, "visibleItemsContainer", void 0);
    __decorate([
        ContentChildren(SegmentedButtonItemComponent)
    ], SegmentedButtonComponent.prototype, "childItemsComponent", void 0);
    __decorate([
        Input()
    ], SegmentedButtonComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], SegmentedButtonComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], SegmentedButtonComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], SegmentedButtonComponent.prototype, "uncheckable", void 0);
    __decorate([
        Output()
    ], SegmentedButtonComponent.prototype, "updateEvent", void 0);
    __decorate([
        HostListener('window:resize')
    ], SegmentedButtonComponent.prototype, "onResize", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], SegmentedButtonComponent.prototype, "onKeydown", null);
    SegmentedButtonComponent = SegmentedButtonComponent_1 = __decorate([
        Component({
            selector: 'bmw-segmented-button',
            template: "<div #labelWrapper class=\"label-wrapper\">\n  <div #segmentButton class=\"segmented-button\">\n    <ng-container #visibleItemsContainer> </ng-container>\n  </div>\n</div>\n\n<ng-template #dropdownButton>\n  <div\n    #extensionMenu\n    class=\"extension-menu\"\n    [class.disabled]=\"disabled\"\n    [class.selected]=\"!isMenuClosed\"\n    (click)=\"toggleMenu()\"\n    [class.show]=\"showDots\"\n    tabindex=\"0\"\n  ></div>\n</ng-template>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return SegmentedButtonComponent_1; }),
                    multi: true
                }
            ],
            styles: [".label-wrapper{height:2rem}.show{display:block!important}.segmented-button{display:inline-flex;min-height:2rem;padding-right:var(--segmanted-button__wrapper__padding-right);min-width:var(--segmented-button__item__min-width);flex-wrap:wrap;position:relative}.segmented-button .extension-menu{position:absolute;right:0;display:none;white-space:nowrap;margin-left:-1px;background-color:var(--toggle-button__default__background-color);cursor:pointer;border:solid 1px var(--toggle-button__secondary__border__color)}.segmented-button ::ng-deep bmw-segmented-button-item:nth-child(2):last-child label span span{display:block;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.segmented-button .extension-menu.disabled{opacity:.7;border:solid 1px var(--color-bmw-basic3-shade2);background-color:var(--color-bmw-basic1-shade3)}.segmented-button .extension-menu.disabled:hover{cursor:no-drop;border:solid 1px var(--color-bmw-basic3-shade2);background-color:var(--color-bmw-basic1-shade3)}.segmented-button .extension-menu.selected{border:solid 1px var(--color-bmw-basic3-shade2);background-color:var(--color-bmw-basic1-shade2)}.segmented-button .extension-menu:after{display:inline-block;font-size:var(--segmented-button__dots__font-size);line-height:var(--segmented-button__dots__font-size);padding:var(--segmented-button__dots__padding-vertical) var(--card-tabs__label__icon__padding);font-family:iwp;color:var(--card-tabs__labels__default__color);content:'\\ea22'}.segmented-button .extension-menu:hover{border:solid 1px var(--color-bmw-basic1-shade2);background-color:var(--color-bmw-basic1-shade2)}.segmented-button .extension-menu:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}.segmented-button .extension-menu .dropdown{position:absolute;top:calc(100% + 2px);right:-1px;display:none}.segmented-button .extension-menu .dropdown ::ng-deep bmw-segmented-button-item{z-index:-1;margin-left:0;margin-top:-1px;white-space:nowrap;display:block}@media screen and (max-width:37.49rem){.label-wrapper{height:2.5rem}}"]
        })
    ], SegmentedButtonComponent);
    return SegmentedButtonComponent;
}());
export { SegmentedButtonComponent };
//# sourceMappingURL=data:application/json;base64,