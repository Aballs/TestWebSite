import { __decorate } from "tslib";
import { Component, ContentChild, HostBinding, Input, HostListener, ViewChild } from '@angular/core';
import { FieldsetHeaderComponent } from './fieldset-header.component';
var FieldsetComponent = /** @class */ (function () {
    function FieldsetComponent() {
        this._disabled = false;
        this._opened = false;
    }
    Object.defineProperty(FieldsetComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = value;
            if (!this.header)
                return;
            this.header.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldsetComponent.prototype, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (value) {
            this._opened = value;
            if (!this.header)
                return;
            this.header.opened = value;
        },
        enumerable: true,
        configurable: true
    });
    FieldsetComponent.prototype.onKeydown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                if (!this.disabled && event.target === this.label.nativeElement) {
                    this.toggle();
                    event.preventDefault();
                    event.stopPropagation();
                }
                break;
        }
    };
    FieldsetComponent.prototype.ngOnInit = function () {
        if (this.header) {
            this.header.opened = this.opened;
        }
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    };
    FieldsetComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.header) {
            this.header.clickEmit.emit = function () {
                _this.toggle();
            };
        }
    };
    FieldsetComponent.prototype.ngAfterContentInit = function () {
        if (this.header) {
            this.header.opened = this.opened;
            this.header.disabled = this.disabled;
        }
    };
    FieldsetComponent.prototype.toggle = function () {
        if (this.disabled)
            return;
        this.opened = !this.opened;
        if (!this.header)
            return;
        this.header.opened = this.opened;
    };
    __decorate([
        ContentChild(FieldsetHeaderComponent)
    ], FieldsetComponent.prototype, "header", void 0);
    __decorate([
        ViewChild('label')
    ], FieldsetComponent.prototype, "label", void 0);
    __decorate([
        Input()
    ], FieldsetComponent.prototype, "disabled", null);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], FieldsetComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], FieldsetComponent.prototype, "opened", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], FieldsetComponent.prototype, "onKeydown", null);
    FieldsetComponent = __decorate([
        Component({
            selector: 'bmw-fieldset',
            template: "<label #label [class.disabled]=\"disabled\" [tabindex]=\"disabled ? -1 : 0\"\n  ><ng-content select=\"bmw-fieldset-header\"></ng-content\n></label>\n<div [class.disabled]=\"disabled\" class=\"fieldset-container\" *ngIf=\"opened\">\n  <ng-content select=\"bmw-fieldset-container\"></ng-content>\n</div>\n",
            styles: [".fieldset-container{margin-top:var(--fieldset__container__margin-top)}label{display:block}label.disabled{pointer-events:none;opacity:.5}label:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}:host[disabled]{cursor:no-drop}"]
        })
    ], FieldsetComponent);
    return FieldsetComponent;
}());
export { FieldsetComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiZmllbGRzZXQvZmllbGRzZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUVMLFlBQVksRUFFWixTQUFTLEVBRVYsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFPdEU7SUFBQTtRQU9VLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFnQmxCLFlBQU8sR0FBRyxLQUFLLENBQUM7SUErRDFCLENBQUM7SUE5RUMsc0JBQUksdUNBQVE7YUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO2FBR0QsVUFBYSxLQUFjO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtnQkFBRSxPQUFPO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUMvQixDQUFDOzs7T0FQQTtJQWNELHNCQUFJLHFDQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzthQUdELFVBQVcsS0FBYztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07Z0JBQUUsT0FBTztZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDN0IsQ0FBQzs7O09BUEE7SUFVRCxxQ0FBUyxHQUFULFVBQVUsS0FBb0I7UUFDNUIsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ3hDLFFBQVEsR0FBRyxFQUFFO1lBQ1gsS0FBSyxPQUFPLENBQUM7WUFDYixLQUFLLGFBQWEsQ0FBQztZQUNuQixLQUFLLEVBQUUsQ0FBQztZQUNSLEtBQUssT0FBTyxDQUFDO1lBQ2IsS0FBSyxFQUFFO2dCQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7b0JBQy9ELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztvQkFDZCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztpQkFDekI7Z0JBQ0QsTUFBTTtTQUNUO0lBQ0gsQ0FBQztJQUVELG9DQUFRLEdBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7aUJBQ3BCLFFBQVEsQ0FBQyxFQUFFLENBQUM7aUJBQ1osU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVELDJDQUFlLEdBQWY7UUFBQSxpQkFNQztRQUxDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRztnQkFDM0IsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLENBQUMsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELDhDQUFrQixHQUFsQjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFRCxrQ0FBTSxHQUFOO1FBQ0UsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7SUFuRkQ7UUFEQyxZQUFZLENBQUMsdUJBQXVCLENBQUM7cURBQ047SUFHaEM7UUFEQyxTQUFTLENBQUMsT0FBTyxDQUFDO29EQUNEO0lBUWxCO1FBREMsS0FBSyxFQUFFO3FEQUtQO0lBSUQ7UUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3RCLEtBQUssRUFBRTtpREFDRztJQVFYO1FBREMsS0FBSyxFQUFFO21EQUtQO0lBR0Q7UUFEQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7c0RBZ0JuQztJQW5EVSxpQkFBaUI7UUFMN0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIsMlRBQXdDOztTQUV6QyxDQUFDO09BQ1csaUJBQWlCLENBc0Y3QjtJQUFELHdCQUFDO0NBQUEsQUF0RkQsSUFzRkM7U0F0RlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBIb3N0TGlzdGVuZXIsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkc2V0SGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9maWVsZHNldC1oZWFkZXIuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LWZpZWxkc2V0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpZWxkc2V0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZmllbGRzZXQuY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBGaWVsZHNldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBDb250ZW50Q2hpbGQoRmllbGRzZXRIZWFkZXJDb21wb25lbnQpXG4gIGhlYWRlcjogRmllbGRzZXRIZWFkZXJDb21wb25lbnQ7XG5cbiAgQFZpZXdDaGlsZCgnbGFiZWwnKVxuICBsYWJlbDogRWxlbWVudFJlZjtcblxuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICBpZiAoIXRoaXMuaGVhZGVyKSByZXR1cm47XG4gICAgdGhpcy5oZWFkZXIuZGlzYWJsZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gIEBJbnB1dCgpXG4gIGlkOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfb3BlbmVkID0gZmFsc2U7XG4gIGdldCBvcGVuZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX29wZW5lZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBvcGVuZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcGVuZWQgPSB2YWx1ZTtcbiAgICBpZiAoIXRoaXMuaGVhZGVyKSByZXR1cm47XG4gICAgdGhpcy5oZWFkZXIub3BlbmVkID0gdmFsdWU7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25LZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQuY29kZSB8fCBldmVudC5rZXlDb2RlO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICBjYXNlICdOdW1wYWRFbnRlcic6XG4gICAgICBjYXNlIDEzOlxuICAgICAgY2FzZSAnU3BhY2UnOlxuICAgICAgY2FzZSAzMjpcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmIGV2ZW50LnRhcmdldCA9PT0gdGhpcy5sYWJlbC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgdGhpcy5oZWFkZXIub3BlbmVkID0gdGhpcy5vcGVuZWQ7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKVxuICAgICAgICAudG9TdHJpbmcoMzYpXG4gICAgICAgIC5zdWJzdHJpbmcoMik7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgdGhpcy5oZWFkZXIuY2xpY2tFbWl0LmVtaXQgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgIHRoaXMuaGVhZGVyLm9wZW5lZCA9IHRoaXMub3BlbmVkO1xuICAgICAgdGhpcy5oZWFkZXIuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgIHRoaXMub3BlbmVkID0gIXRoaXMub3BlbmVkO1xuICAgIGlmICghdGhpcy5oZWFkZXIpIHJldHVybjtcbiAgICB0aGlzLmhlYWRlci5vcGVuZWQgPSB0aGlzLm9wZW5lZDtcbiAgfVxufVxuIl19