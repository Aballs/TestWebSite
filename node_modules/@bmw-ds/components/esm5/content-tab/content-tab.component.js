import { __decorate, __read, __spread, __values } from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, HostListener, ViewChild, AfterViewInit } from '@angular/core';
import { ContentTabContentComponent } from './content-tab-content.component';
import { ContentTabLabelComponent } from './content-tab-label.component';
import { Subject } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
var ContentTabComponent = /** @class */ (function () {
    function ContentTabComponent(elementRef) {
        this.elementRef = elementRef;
        // if TRUE, then on tab label click a requestSelectionChange event is emitted
        this.guardSelectionChange = false;
        /**
         * expanding content toggle input (default = false)
         */
        this.expandContent = false;
        this.allowSelectionChange$ = new Subject();
        this.unsubscribe$ = new Subject();
        // the selectionChange event contains the value of the "for" input of the selected label
        this.selectionChange = new EventEmitter();
        this.requestSelectionChange = new EventEmitter();
    }
    ContentTabComponent.prototype.onHashChange = function () {
        var urlFragment = window.location.hash.substr(1);
        var labelArray = this.labels.toArray();
        var targetTabIndex = labelArray.findIndex(function (label) { return label.for === urlFragment; });
        if (targetTabIndex !== -1) {
            var tabSearch = labelArray[targetTabIndex];
            if (tabSearch.disabled) {
                tabSearch = null;
                var nextIndexToTest = targetTabIndex === 0 ? labelArray.length - 1 : targetTabIndex - 1;
                while (!tabSearch && nextIndexToTest !== targetTabIndex) {
                    var tabToTest = labelArray[nextIndexToTest];
                    if (!tabToTest.disabled) {
                        tabSearch = tabToTest;
                    }
                    nextIndexToTest = nextIndexToTest === 0 ? labelArray.length - 1 : nextIndexToTest - 1;
                }
            }
            if (tabSearch) {
                this.updateLabelSelection(tabSearch.for);
            }
        }
    };
    ContentTabComponent.prototype.onKeyDown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                this.focusMenuTabOption(2 /* Down */);
                event.stopPropagation();
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                this.focusMenuTabOption(0 /* Up */);
                event.stopPropagation();
                event.preventDefault();
                break;
            case 'ArrowLeft':
            case 37:
                if (event.target.classList.contains('bmw-component-headline-text')) {
                    this.selectNeighbourContentTab(event.target, 3 /* Left */);
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
            case 'ArrowRight':
            case 39:
                if (event.target.classList.contains('bmw-component-headline-text')) {
                    this.selectNeighbourContentTab(event.target, 1 /* Right */);
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
                if (this.hiddenLabels.classList.contains('opened')) {
                    var focusedTabOptionID_1 = this.getFocusedTabOptionID();
                    if (focusedTabOptionID_1) {
                        if (this.guardSelectionChange) {
                            this.requestLabelSelection(focusedTabOptionID_1);
                        }
                        else {
                            this.updateLabelSelection(focusedTabOptionID_1);
                        }
                        this.labels.find(function (label) { return label.for === focusedTabOptionID_1; }).label.nativeElement.focus();
                        event.stopPropagation();
                        event.preventDefault();
                    }
                }
                break;
            case 'Space':
            case 32:
                if (event.target === this.elementRef.nativeElement.querySelector('.three-dots')) {
                    this.toggleHiddenLabels();
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
        }
    };
    ContentTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (typeof this.justIcon !== 'undefined') {
            this.justIcon = true;
        }
        if (typeof this.withIcon !== 'undefined' && !this.justIcon) {
            this.withIcon = true;
        }
        this.hiddenLabels = this.elementRef.nativeElement.querySelector('.three-dots');
        this.hiddenLabels.addEventListener('focusout', function (e) {
            var leavingParent = !_this.hiddenLabels.contains(e.relatedTarget);
            if (leavingParent) {
                _this.toggleHiddenLabels(false);
            }
        });
        this.setResizeTrigger();
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    };
    ContentTabComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.getArticles();
        this.prepareLabels();
        this.labels.changes.subscribe(function () {
            _this.selected = null;
            _this.prepareLabels();
        });
        this.labels.toArray().forEach(function (label) {
            label.change.subscribe(function () {
                _this.prepareLabels();
            });
        });
        this.hideTabsContentIfAllAreDisabled();
        this.onHashChange();
    };
    ContentTabComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    ContentTabComponent.prototype.getArticles = function () {
        var e_1, _a;
        var wrapperChildren = this.contentTabWrapper.nativeElement.children;
        this.articles = [];
        try {
            for (var wrapperChildren_1 = __values(wrapperChildren), wrapperChildren_1_1 = wrapperChildren_1.next(); !wrapperChildren_1_1.done; wrapperChildren_1_1 = wrapperChildren_1.next()) {
                var childNode = wrapperChildren_1_1.value;
                if (childNode.tagName.toLowerCase() === 'bmw-content-tab-content') {
                    this.articles.push(childNode);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (wrapperChildren_1_1 && !wrapperChildren_1_1.done && (_a = wrapperChildren_1.return)) _a.call(wrapperChildren_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ContentTabComponent.prototype.prepareLabels = function () {
        var _this = this;
        if (!this.labels)
            return;
        var reSelect = false;
        var _loop_1 = function (i) {
            var label = this_1.labels.toArray()[i];
            label.elementRef.nativeElement.dataset.order = i;
            var id = label.for;
            if (label.selected && !label.disabled) {
                this_1.setSelected(id);
            }
            if (label.disabled) {
                label.elementRef.nativeElement.classList.add('disabled');
                reSelect = this_1.selected === label.for;
            }
            else if (label.elementRef.nativeElement.classList.contains('disabled')) {
                label.elementRef.nativeElement.classList.remove('disabled');
            }
            // note that the event will still be handled if it is submitted directly (e.g. $('bmw-content-tab-label.disabled').click())
            label.elementRef.nativeElement.addEventListener('click', function (e) { return _this.onClickLabel(e, id); });
            label.elementRef.nativeElement.classList.add(this_1.justIcon ? 'just-icon' : this_1.withIcon ? 'with-icon' : 'just-text');
        };
        var this_1 = this;
        for (var i = 0; i < this.labels.toArray().length; i++) {
            _loop_1(i);
        }
        var firstEnabledLabel = this.labels.toArray().find(function (label) { return !label.disabled; });
        if (reSelect || (!this.selected && firstEnabledLabel)) {
            this.setSelected(firstEnabledLabel.for);
        }
        setTimeout(function () {
            _this.hideLabelsIfNecessary();
        }, 10);
        // run once again after css variables are replaces in IE
        setTimeout(function () {
            _this.hideLabelsIfNecessary(true);
        }, 500);
    };
    ContentTabComponent.prototype.onClickLabel = function (event, labelId) {
        if (this.guardSelectionChange) {
            this.requestLabelSelection(labelId);
        }
        else {
            this.updateLabelSelection(labelId);
        }
        event.stopPropagation();
    };
    ContentTabComponent.prototype.updateLabelSelection = function (labelId) {
        if (this.selected !== labelId) {
            this.setSelected(labelId);
            this.selectionChange.emit(labelId);
            this.hideLabelsIfNecessary(true);
            this.toggleHiddenLabels(false);
        }
    };
    ContentTabComponent.prototype.requestLabelSelection = function (labelId) {
        var _this = this;
        this.allowSelectionChange$
            .pipe(
        // ensures the subscription completes after the first click event
        take(1), filter(function (allowChange) { return !!allowChange; }), takeUntil(this.unsubscribe$))
            .subscribe(function () { return _this.updateLabelSelection(labelId); });
        var currentSelectedLabel = this.getSelectedLabel();
        this.requestSelectionChange.emit({
            currentSelection: currentSelectedLabel && currentSelectedLabel.for,
            requestedSelection: labelId,
            allowSelectionChange$: this.allowSelectionChange$
        });
    };
    ContentTabComponent.prototype.setResizeTrigger = function () {
        var _this = this;
        var resizeTimer;
        window.addEventListener('resize', function () {
            clearTimeout(resizeTimer);
            var that = _this;
            resizeTimer = setTimeout(function () {
                that.hideLabelsIfNecessary(true);
            }, 10);
        });
    };
    ContentTabComponent.prototype.setSelected = function (selected) {
        this.selected = selected;
        var labelsArray = this.labels.toArray();
        var _loop_2 = function (i) {
            var id = labelsArray[i].for;
            if (selected === id) {
                labelsArray[i].elementRef.nativeElement.classList.add('selected');
                setTimeout(function () {
                    labelsArray[i].selected = true;
                }, 0);
            }
            else {
                labelsArray[i].elementRef.nativeElement.classList.remove('selected');
                labelsArray[i].selected = false;
            }
        };
        for (var i = 0; i < labelsArray.length; i++) {
            _loop_2(i);
        }
        for (var i = 0; i < this.articles.length; i++) {
            var id = this.articles[i].getAttribute('id');
            if (selected === id) {
                this.articles[i].classList.add('selected');
            }
            else {
                this.articles[i].classList.remove('selected');
            }
        }
    };
    ContentTabComponent.prototype.hideLabelsIfNecessary = function (showAllFirst) {
        var labelsDiv = this.elementRef.nativeElement.querySelector('div.labels');
        if (showAllFirst) {
            this.showAllLabels(labelsDiv);
        }
        var height = labelsDiv.offsetHeight;
        var defaultHeight = this.elementRef.nativeElement.querySelector('.labels .border').offsetHeight;
        if (height > defaultHeight) {
            this.createHiddenLabelsMenuElement();
            var hasMoreNonActiveLabels = this.hideLastNonActiveLabel(labelsDiv);
            if (hasMoreNonActiveLabels) {
                this.hideLabelsIfNecessary();
            }
        }
    };
    ContentTabComponent.prototype.hideTabsContentIfAllAreDisabled = function () {
        if (!this.labels.toArray().find(function (label) { return !label.disabled; })) {
            this.tabContents.toArray().forEach(function (tabContent) { return (tabContent.hide = true); });
        }
    };
    ContentTabComponent.prototype.showAllLabels = function (parentElement) {
        if (!this.hiddenLabelsMenu)
            return;
        var length = this.hiddenLabelsMenu.children.length;
        for (var i = 0; i < length; i++) {
            parentElement.prepend(this.hiddenLabelsMenu.children[0]);
        }
        this.hiddenLabels.removeChild(this.hiddenLabelsMenu);
        this.hiddenLabelsMenu = undefined;
        this.sort(parentElement);
    };
    ContentTabComponent.prototype.sort = function (parentElement) {
        var array = parentElement.children;
        array = Array.from(array).sort(function (a, b) {
            return a.dataset.order - b.dataset.order;
        });
        for (var i = 0; i < array.length; i++) {
            parentElement.append(array[i]);
        }
    };
    /**
     * Removes the last non-active label from view and adds it to the three-dots menu
     * @returns boolean indicating if there are more non-active labels in view
     */
    ContentTabComponent.prototype.hideLastNonActiveLabel = function (parentElement) {
        var hasMoreNonActiveLabels = true;
        var tabArray = __spread(parentElement.children).filter(function (child) {
            return !child.classList.contains('border') &&
                !child.classList.contains('three-dots') &&
                !child.classList.contains('selected');
        });
        this.hiddenLabelsMenu.prepend(tabArray.pop());
        if (tabArray.length === 0) {
            hasMoreNonActiveLabels = false;
        }
        return hasMoreNonActiveLabels;
    };
    ContentTabComponent.prototype.createHiddenLabelsMenuElement = function () {
        if (this.hiddenLabelsMenu)
            return;
        this.hiddenLabelsMenu = document.createElement('div');
        this.hiddenLabelsMenu.classList.add('menu');
        this.hiddenLabels.append(this.hiddenLabelsMenu);
    };
    ContentTabComponent.prototype.toggleHiddenLabels = function (state) {
        if (!this.hiddenLabels)
            return;
        if (this.hiddenLabelsMenu) {
            var rectangle = this.hiddenLabels.getBoundingClientRect();
            var position = rectangle.x + rectangle.width - 2;
            this.hiddenLabelsMenu.style['max-width'] = position + 'px';
        }
        var opened = this.hiddenLabels.classList.contains('opened');
        if (state === true) {
            this.hiddenLabels.classList.add('opened');
        }
        else if (state === false) {
            this.hiddenLabels.classList.remove('opened');
        }
        else if (opened) {
            this.hiddenLabels.classList.remove('opened');
        }
        else {
            this.hiddenLabels.classList.add('opened');
        }
    };
    ContentTabComponent.prototype.getSelectedLabel = function () {
        var _this = this;
        return this.labels && this.labels.find(function (label) { return _this.selected === label.for; });
    };
    ContentTabComponent.prototype.selectNeighbourContentTab = function (contentTabLabel, direction) {
        var visibleLabelsArray = Array.prototype.slice.call(this.labelsWrapper.nativeElement.querySelectorAll('bmw-content-tab-label > .bmw-component-headline-text'));
        if (contentTabLabel === this.elementRef.nativeElement.querySelector('.three-dots')) {
            switch (direction) {
                case 3 /* Left */:
                    this.selectAndFocusContentTab(visibleLabelsArray.length - 1);
                    break;
                case 1 /* Right */:
                    this.selectAndFocusContentTab(0);
                    break;
                default:
                    break;
            }
        }
        else {
            var targetedTabLabel_1 = visibleLabelsArray.find(function (tab) { return tab === contentTabLabel; });
            if (visibleLabelsArray.length > 0) {
                if (targetedTabLabel_1) {
                    if (this.hiddenLabelsMenu &&
                        ((targetedTabLabel_1 === visibleLabelsArray[0] && direction === 3 /* Left */) ||
                            (targetedTabLabel_1 === visibleLabelsArray[visibleLabelsArray.length - 1] && direction === 1 /* Right */))) {
                        this.elementRef.nativeElement.querySelector('.three-dots').focus();
                    }
                    else {
                        var beforeChangeTabIndex = visibleLabelsArray.findIndex(function (tabLabel) { return tabLabel === targetedTabLabel_1; });
                        var tabToSelectIndex = this.getNeighbourContentTabLabelIndex(beforeChangeTabIndex, direction);
                        if (tabToSelectIndex >= 0) {
                            this.selectAndFocusContentTab(tabToSelectIndex);
                        }
                        else {
                            throw new Error('Could not find a tab to select');
                        }
                    }
                }
                else {
                    throw new Error('The specified target does not correspond to a tab´s label container');
                }
            }
            else {
                throw new Error('There are no content tab labels defined');
            }
        }
    };
    ContentTabComponent.prototype.selectAndFocusContentTab = function (tabToSelectIndex) {
        var visibleContentTabLabelsArray = Array.prototype.slice.call(this.labelsWrapper.nativeElement.querySelectorAll('bmw-content-tab-label'));
        var tabToSelectID = visibleContentTabLabelsArray[tabToSelectIndex].getAttribute('for');
        this.setSelected(tabToSelectID);
        if (this.guardSelectionChange) {
            this.requestLabelSelection(tabToSelectID);
        }
        else {
            this.updateLabelSelection(tabToSelectID);
        }
        visibleContentTabLabelsArray[tabToSelectIndex].querySelector('.bmw-component-headline-text').focus();
    };
    ContentTabComponent.prototype.getNeighbourContentTabLabelIndex = function (contentTabLabelIndex, direction) {
        var visibleContentTabLabelsArray = Array.prototype.slice.call(this.labelsWrapper.nativeElement.querySelectorAll('bmw-content-tab-label'));
        var neighbourContentTabLabelIndex = -1;
        if (visibleContentTabLabelsArray.find(function (label) { return !label.classList.contains('disabled'); })) {
            switch (direction) {
                case 3 /* Left */:
                    if (contentTabLabelIndex === 0) {
                        neighbourContentTabLabelIndex = visibleContentTabLabelsArray.length - 1;
                    }
                    else {
                        neighbourContentTabLabelIndex = contentTabLabelIndex - 1;
                    }
                    break;
                case 1 /* Right */:
                    if (contentTabLabelIndex === visibleContentTabLabelsArray.length - 1) {
                        neighbourContentTabLabelIndex = 0;
                    }
                    else {
                        neighbourContentTabLabelIndex = contentTabLabelIndex + 1;
                    }
                    break;
                default:
                    break;
            }
            if (visibleContentTabLabelsArray[neighbourContentTabLabelIndex].classList.contains('disabled') ||
                this.isContentTabLabelHidden(visibleContentTabLabelsArray[neighbourContentTabLabelIndex].getAttribute('for'))) {
                neighbourContentTabLabelIndex = this.getNeighbourContentTabLabelIndex(neighbourContentTabLabelIndex, direction);
            }
        }
        else {
            throw new Error('There are no enabled tabs available');
        }
        return neighbourContentTabLabelIndex;
    };
    ContentTabComponent.prototype.getFocusedTabOptionID = function () {
        var focusedTabOption = Array.prototype.slice
            .call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'))
            .find(function (tabOption) { return tabOption.classList.contains('focused'); });
        return focusedTabOption ? focusedTabOption.attributes.for.nodeValue : '';
    };
    ContentTabComponent.prototype.isContentTabLabelHidden = function (contentTabID) {
        var isTabLabelHidden = false;
        if (this.hiddenLabelsMenu) {
            var hiddenLabelsIDs = Array.prototype.slice
                .call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'))
                .map(function (hiddenLabel) { return hiddenLabel.getAttribute('for'); });
            isTabLabelHidden = hiddenLabelsIDs.indexOf(contentTabID) > -1;
        }
        return isTabLabelHidden;
    };
    ContentTabComponent.prototype.focusMenuTabOption = function (direction) {
        if (this.hiddenLabels.classList.contains('opened')) {
            if (this.hiddenLabelsMenu) {
                var hiddenTabOptions = Array.prototype.slice.call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'));
                if (hiddenTabOptions.length &&
                    hiddenTabOptions.some(function (tabOption) { return !tabOption.classList.contains('disabled'); })) {
                    var focusedTabOptionIndex = hiddenTabOptions.findIndex(function (tabOption) {
                        return tabOption.classList.contains('focused');
                    });
                    hiddenTabOptions.forEach(function (tabOption) { return tabOption.classList.remove('focused'); });
                    switch (direction) {
                        case 0 /* Up */:
                            this.setPreviousTabOptionAsFocused(focusedTabOptionIndex);
                            break;
                        case 2 /* Down */:
                            this.setNextTabOptionAsFocused(focusedTabOptionIndex);
                            break;
                        default:
                            break;
                    }
                }
            }
            else {
                throw new Error('There are no options in the three-dots container');
            }
        }
    };
    ContentTabComponent.prototype.setNextTabOptionAsFocused = function (tabOptionIndex) {
        var hiddenTabOptions = Array.prototype.slice.call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'));
        if (tabOptionIndex !== -1 && tabOptionIndex !== hiddenTabOptions.length - 1) {
            tabOptionIndex = tabOptionIndex + 1;
        }
        else {
            tabOptionIndex = 0;
        }
        if (hiddenTabOptions[tabOptionIndex].classList.contains('disabled')) {
            this.setNextTabOptionAsFocused(tabOptionIndex);
        }
        else {
            hiddenTabOptions[tabOptionIndex].classList.add('focused');
            hiddenTabOptions[tabOptionIndex].querySelector('label').focus();
        }
    };
    ContentTabComponent.prototype.setPreviousTabOptionAsFocused = function (tabOptionIndex) {
        var hiddenTabOptions = Array.prototype.slice.call(this.hiddenLabelsMenu.querySelectorAll('bmw-content-tab-label'));
        if (tabOptionIndex !== -1 && tabOptionIndex !== 0) {
            tabOptionIndex = tabOptionIndex - 1;
        }
        else {
            tabOptionIndex = hiddenTabOptions.length - 1;
        }
        if (hiddenTabOptions[tabOptionIndex].classList.contains('disabled')) {
            this.setPreviousTabOptionAsFocused(tabOptionIndex);
        }
        else {
            hiddenTabOptions[tabOptionIndex].classList.add('focused');
            hiddenTabOptions[tabOptionIndex].querySelector('label').focus();
        }
    };
    ContentTabComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ContentChildren(ContentTabLabelComponent)
    ], ContentTabComponent.prototype, "labels", void 0);
    __decorate([
        ContentChildren(ContentTabContentComponent)
    ], ContentTabComponent.prototype, "tabContents", void 0);
    __decorate([
        ViewChild('contentTabWrapper')
    ], ContentTabComponent.prototype, "contentTabWrapper", void 0);
    __decorate([
        ViewChild('labelsWrapper')
    ], ContentTabComponent.prototype, "labelsWrapper", void 0);
    __decorate([
        Input()
    ], ContentTabComponent.prototype, "justIcon", void 0);
    __decorate([
        Input()
    ], ContentTabComponent.prototype, "withIcon", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], ContentTabComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], ContentTabComponent.prototype, "guardSelectionChange", void 0);
    __decorate([
        HostBinding('class.expanding'), Input()
    ], ContentTabComponent.prototype, "expandContent", void 0);
    __decorate([
        Output()
    ], ContentTabComponent.prototype, "selectionChange", void 0);
    __decorate([
        Output()
    ], ContentTabComponent.prototype, "requestSelectionChange", void 0);
    __decorate([
        HostListener('window:hashchange')
    ], ContentTabComponent.prototype, "onHashChange", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], ContentTabComponent.prototype, "onKeyDown", null);
    ContentTabComponent = __decorate([
        Component({
            selector: 'bmw-content-tab',
            template: "<div [ngClass]=\"{ wrapper: true, 'wrapper--expanding': expandContent }\" #contentTabWrapper>\n  <div [ngClass]=\"{ labels: true, 'labels--expanding': expandContent }\" role=\"tablist\" #labelsWrapper>\n    <ng-content select=\"bmw-content-tab-label\"></ng-content>\n    <div class=\"three-dots\" (click)=\"toggleHiddenLabels()\" tabindex=\"-1\"></div>\n    <div class=\"border\"></div>\n  </div>\n  <ng-content select=\"bmw-content-tab-content\"></ng-content>\n</div>\n",
            styles: [":host{min-height:0;flex-direction:column;display:flex}:host.expanding{height:100%}.three-dots{position:absolute;top:0;right:0;display:inline-block;order:2;box-sizing:content-box;height:calc(var(--content-tabs__label__default__height));z-index:2}.three-dots:empty{display:none}.three-dots:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}.three-dots ::ng-deep .menu{display:none;position:absolute;background-color:var(--content-tabs__more-dots__menu__background-color);top:100%;right:0;z-index:var(--content-tabs__z-index-base);border:solid 1px var(--content-tabs__more-dots__menu__border-color)}.three-dots ::ng-deep .menu ::ng-deep bmw-content-tab-label{display:block;max-width:100%}.three-dots ::ng-deep .menu ::ng-deep bmw-content-tab-label.focused{background-color:var(--combo-box__dropdown-item__hover__background-color)}.three-dots.opened ::ng-deep .menu{display:inline-block}.three-dots::after{display:inline-block;line-height:1;font-size:var(--content-tabs__more-dots__menu__font-size);padding:var(--content-tabs__label__icon__padding);padding-bottom:calc(var(--content-tabs__label__icon__padding) - 2px);font-family:iwp;color:var(--content-tabs__labels__default__color);content:'\\ea22';cursor:pointer}.labels{padding-right:var(--content-tabs__label__default__height);position:relative;display:flex;flex:1 0 auto;flex-wrap:wrap}.labels:focus{outline:0}.labels--expanding{flex:0 1 auto}.labels .border{position:absolute;width:100%;left:0;top:0;height:calc(var(--content-tabs__label__default__height) + 2px);box-sizing:border-box;border-bottom:2px solid var(--content-tabs__labels__default__border-color)}.wrapper{min-width:calc(100px + var(--content-tabs__label__default__height));min-height:0;flex-direction:column;display:flex}.wrapper--expanding{flex:1 0 auto;height:100%}"]
        })
    ], ContentTabComponent);
    return ContentTabComponent;
}());
export { ContentTabComponent };
//# sourceMappingURL=data:application/json;base64,