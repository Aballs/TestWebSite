import { __decorate } from "tslib";
import { Component, ElementRef, Input, ViewChild, HostBinding, SimpleChanges, Output, EventEmitter, OnChanges } from '@angular/core';
var ContentTabLabelComponent = /** @class */ (function () {
    function ContentTabLabelComponent(elementRef) {
        this.elementRef = elementRef;
        this.change = new EventEmitter();
        // Boolean flag to pre-select this label and the respective content.
        // If multiple tabs per tabset have the selected input set to true, the last one of them will be selected.
        this.selected = false;
        this.disabled = false;
        this.role = 'tab';
    }
    ContentTabLabelComponent.prototype.ngOnChanges = function () {
        this.change.emit();
    };
    ContentTabLabelComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], ContentTabLabelComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], ContentTabLabelComponent.prototype, "for", void 0);
    __decorate([
        Output()
    ], ContentTabLabelComponent.prototype, "change", void 0);
    __decorate([
        HostBinding('attr.aria-expanded'),
        HostBinding('attr.aria-selected'),
        Input()
    ], ContentTabLabelComponent.prototype, "selected", void 0);
    __decorate([
        HostBinding('attr.aria-disabled'),
        Input()
    ], ContentTabLabelComponent.prototype, "disabled", void 0);
    __decorate([
        ViewChild('label')
    ], ContentTabLabelComponent.prototype, "label", void 0);
    __decorate([
        HostBinding('attr.role')
    ], ContentTabLabelComponent.prototype, "role", void 0);
    ContentTabLabelComponent = __decorate([
        Component({
            selector: 'bmw-content-tab-label',
            template: "<label #label class=\"bmw-component-headline-text\" [tabindex]=\"selected && !disabled ? 0 : -1\">\n  <i [ngClass]=\"[icon || '']\"></i\n  ><span>\n    <ng-content></ng-content>\n  </span>\n</label>\n",
            styles: ["label{display:block;min-width:var(--content-tabs__label__default__min-width);padding:var(--content-tabs__label__default__padding);padding-bottom:calc(var(--content-tabs__label__default__padding));text-align:center;box-sizing:border-box;border-bottom:2px solid transparent;height:calc(var(--content-tabs__label__default__height) + 2px);z-index:2;cursor:pointer}label span{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:block}label:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}:host.just-icon label{font-family:iwp;font-size:var(--content-tabs__label__icon__font-size);min-width:auto;padding:var(--content-tabs__label__icon__padding);padding-bottom:calc(var(--content-tabs__label__icon__padding));margin-right:var(--content-tabs__label__icon__margin-right)}:host.just-icon label i{display:flex;height:var(--content-tabs__label__icon__font-size)}:host.just-icon label span{display:none}:host.with-icon label{padding-left:var(--content-tabs__label__with-icon__padding-left);position:relative}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){:host.with-icon label{padding-left:30px}}:host.with-icon label i{position:absolute;display:block;left:var(--content-tabs__icon__with-icon__padding-left);top:calc(50% - var(--content-tabs__label__with-icon__icon-size)/ 2 + 1px);font-size:var(--content-tabs__label__with-icon__icon-size)}:host label i{display:none}:host.selected label{border-bottom:2px solid var(--content-tabs__labels__selected__color)}:host.selected label.bmw-component-headline-text{color:var(--content-tabs__labels__selected__color)}label:hover.bmw-component-headline-text{color:var(--content-tabs__labels__hover__color)}:host{display:inline-flex;max-width:100%}:host.disabled{opacity:.5;cursor:no-drop;pointer-events:none}"]
        })
    ], ContentTabLabelComponent);
    return ContentTabLabelComponent;
}());
export { ContentTabLabelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC10YWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29udGVudC10YWIvY29udGVudC10YWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxhQUFhLEVBQ2IsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFPdkI7SUE2QkUsa0NBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFuQi9CLFdBQU0sR0FBZ0MsSUFBSSxZQUFZLEVBQWlCLENBQUM7UUFFbEYsb0VBQW9FO1FBQ3BFLDBHQUEwRztRQUkxRyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBSWpCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFNakIsU0FBSSxHQUFHLEtBQUssQ0FBQztJQUUrQixDQUFDO0lBRTdDLDhDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7O2dCQUo4QixVQUFVOztJQXpCekM7UUFEQyxLQUFLLEVBQUU7MERBQ0s7SUFJYjtRQURDLEtBQUssRUFBRTt5REFDSTtJQUVGO1FBQVQsTUFBTSxFQUFFOzREQUF5RTtJQU9sRjtRQUhDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztRQUNqQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7UUFDakMsS0FBSyxFQUFFOzhEQUNTO0lBSWpCO1FBRkMsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1FBQ2pDLEtBQUssRUFBRTs4REFDUztJQUdqQjtRQURDLFNBQVMsQ0FBQyxPQUFPLENBQUM7MkRBQ0Q7SUFHbEI7UUFEQyxXQUFXLENBQUMsV0FBVyxDQUFDOzBEQUNaO0lBM0JGLHdCQUF3QjtRQUxwQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLG9OQUFpRDs7U0FFbEQsQ0FBQztPQUNXLHdCQUF3QixDQWtDcEM7SUFBRCwrQkFBQztDQUFBLEFBbENELElBa0NDO1NBbENZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbiAgSG9zdEJpbmRpbmcsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Jtdy1jb250ZW50LXRhYi1sYWJlbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb250ZW50LXRhYi1sYWJlbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2NvbnRlbnQtdGFiLWxhYmVsLmNvbXBvbmVudC5sZXNzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudFRhYkxhYmVsQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLy8gVGhlIENTUyBjbGFzcyBvZiBhbiBpY29uLlxuICAvLyBOb3RlIHRoYXQgdGhlIGljb24gd29uJ3QgYmUgc2hvd24gdW5sZXNzIHRoZSB3aXRoSWNvbiBmbGFnIGlzIHNldCB0byB0cnVlIG9uIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICBASW5wdXQoKVxuICBpY29uOiBzdHJpbmc7XG5cbiAgLy8gVGhlIGlkIG9mIHRoZSBibXctY29udGVudC10YWItY29udGVudCBjb21wb25lbnQgZm9yIHRoaXMgbGFiZWwuXG4gIEBJbnB1dCgpXG4gIGZvcjogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxTaW1wbGVDaGFuZ2VzPiA9IG5ldyBFdmVudEVtaXR0ZXI8U2ltcGxlQ2hhbmdlcz4oKTtcblxuICAvLyBCb29sZWFuIGZsYWcgdG8gcHJlLXNlbGVjdCB0aGlzIGxhYmVsIGFuZCB0aGUgcmVzcGVjdGl2ZSBjb250ZW50LlxuICAvLyBJZiBtdWx0aXBsZSB0YWJzIHBlciB0YWJzZXQgaGF2ZSB0aGUgc2VsZWN0ZWQgaW5wdXQgc2V0IHRvIHRydWUsIHRoZSBsYXN0IG9uZSBvZiB0aGVtIHdpbGwgYmUgc2VsZWN0ZWQuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWV4cGFuZGVkJylcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtc2VsZWN0ZWQnKVxuICBASW5wdXQoKVxuICBzZWxlY3RlZCA9IGZhbHNlO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWRpc2FibGVkJylcbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBAVmlld0NoaWxkKCdsYWJlbCcpXG4gIGxhYmVsOiBFbGVtZW50UmVmO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgcm9sZSA9ICd0YWInO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlLmVtaXQoKTtcbiAgfVxufVxuIl19