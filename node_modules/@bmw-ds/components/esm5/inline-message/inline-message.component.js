import { __decorate } from "tslib";
import { Component, OnInit, Input, Output, EventEmitter, HostBinding, OnChanges, HostListener, ElementRef } from '@angular/core';
var SUPPORTED_TYPES = ['info', 'success', 'warning', 'error'];
var InlineMessageComponent = /** @class */ (function () {
    function InlineMessageComponent(_el) {
        this._el = _el;
        this._type = '';
        this._messages = [];
        this._showCloseButton = true;
        this.closeEvent = new EventEmitter();
        this.closed = false;
    }
    Object.defineProperty(InlineMessageComponent.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            if (SUPPORTED_TYPES.indexOf(value) === -1) {
                console.warn("Invalid or unsupported type: " + value);
                this._type = 'info';
            }
            else {
                this._type = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineMessageComponent.prototype, "messages", {
        get: function () {
            return this._messages;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._messages = [value];
            }
            else {
                this._messages = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineMessageComponent.prototype, "showCloseButton", {
        get: function () {
            return this._showCloseButton;
        },
        set: function (value) {
            if (value === false) {
                this._showCloseButton = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    InlineMessageComponent.prototype.onKeydown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                if (event.target === this._el.nativeElement.querySelector('.close')) {
                    this.close();
                    event.preventDefault();
                }
                break;
        }
    };
    InlineMessageComponent.prototype.ngOnInit = function () {
        this.checkProperties();
    };
    InlineMessageComponent.prototype.ngOnChanges = function () {
        this.checkProperties();
    };
    InlineMessageComponent.prototype.checkProperties = function () {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    };
    InlineMessageComponent.prototype.close = function () {
        this.closeEvent.emit();
        this.closed = true;
    };
    InlineMessageComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], InlineMessageComponent.prototype, "type", null);
    __decorate([
        Input()
    ], InlineMessageComponent.prototype, "messages", null);
    __decorate([
        Input()
    ], InlineMessageComponent.prototype, "showCloseButton", null);
    __decorate([
        Input()
    ], InlineMessageComponent.prototype, "groupHeadline", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], InlineMessageComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], InlineMessageComponent.prototype, "closeEvent", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], InlineMessageComponent.prototype, "onKeydown", null);
    InlineMessageComponent = __decorate([
        Component({
            selector: 'bmw-inline-message',
            template: "<div *ngIf=\"!closed\">\n  <div class=\"background\" [ngClass]=\"[type]\">\n    <div class=\"content bmw-component-text \" role=\"alert\" [class.disable-close]=\"!showCloseButton\">\n      <i class=\"iwp-icon- icon\"></i>\n      <p *ngIf=\"messages.length === 0\">\n        <ng-content></ng-content>\n      </p>\n      <p *ngIf=\"messages.length === 1\">\n        {{ messages[0] }}\n      </p>\n      <div *ngIf=\"messages.length > 1\">\n        <p class=\"multimessage__type\">{{ groupHeadline || type }} ({{ messages.length }})</p>\n        <ul>\n          <li *ngFor=\"let message of messages\">{{ message }}</li>\n        </ul>\n      </div>\n      <ng-container *ngIf=\"showCloseButton\">\n        <i class=\"iwp-icon- close\" (click)=\"close()\" tabindex=\"0\" aria-label=\"Close notification\"></i>\n      </ng-container>\n    </div>\n  </div>\n</div>\n",
            styles: ["div.background{border:2px solid var(--inline-message__default__border-color);background-color:#fff;box-sizing:border-box;position:relative}div.background div.content{position:relative;height:100%;background-color:var(--inline-message__default__background-color)}div.background div.content p{padding:calc(var(--inline-message__default__padding) - 2px);padding-left:calc(2 * var(--inline-message__icon__padding) - 2px + var(--inline-message__icon__font-size));margin:0;overflow:hidden;text-overflow:ellipsis}div.background div.content:not(.disable-close) p{padding-right:calc(2 * var(--inline-message__icon__padding) - 2px + var(--inline-message__close__font-size))}div.background div.content i.icon{position:absolute;top:calc(var(--inline-message__default__padding) + var(--typography__component-text__line-height)/ 2 - var(--inline-message__icon__font-size)/ 2 - 2px);left:calc(var(--inline-message__icon__padding) - 2px);font-size:var(--inline-message__icon__font-size);line-height:var(--inline-message__icon__font-size)}div.background div.content i.icon::before{content:'\\e802';color:var(--inline-message__default__border-color)}div.background div.content i.close::after{position:absolute;content:'\\e93e';font-size:var(--inline-message__close__font-size);padding:calc(var(--inline-message__close__padding) - 2px);top:0;right:0;cursor:pointer}div.background div.content i.close:focus::after{outline:solid 1px;outline-color:var(--color-bmw-highlight)}div.background div.content .multimessage__type{text-transform:capitalize;font-weight:700}div.background div.content ul{margin:0;padding-left:calc(2 * var(--inline-message__icon__padding) - 2px + var(--inline-message__icon__font-size));padding-bottom:calc(var(--inline-message__default__padding) - 2px);padding-right:calc(var(--inline-message__default__padding) - 2px);list-style-position:inside}div.background div.content ul li{overflow:hidden;text-overflow:ellipsis}div.background.success{border-color:var(--inline-message__success__border-color)}div.background.success div.content{background-color:var(--inline-message__success__background-color)}div.background.success .content i.icon::before{content:'\\e9d8';color:var(--inline-message__success__border-color)}div.background.warning{border-color:var(--inline-message__warning__border-color)}div.background.warning div.content{background-color:var(--inline-message__warning__background-color)}div.background.warning .content i.icon::before{content:'\\e803';color:var(--inline-message__warning__border-color)}div.background.error{border-color:var(--inline-message__error__border-color)}div.background.error div.content{background-color:var(--inline-message__error__background-color)}div.background.error .content i.icon::before{content:'\\e801';color:var(--inline-message__error__border-color)}"]
        })
    ], InlineMessageComponent);
    return InlineMessageComponent;
}());
export { InlineMessageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiaW5saW5lLW1lc3NhZ2UvaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixXQUFXLEVBQ1gsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsSUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQU9oRTtJQXNERSxnQ0FBb0IsR0FBZTtRQUFmLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFyRHpCLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDWCxjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBK0NsQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUVyQyxXQUFNLEdBQUcsS0FBSyxDQUFDO0lBRXVCLENBQUM7SUFqRHZDLHNCQUFJLHdDQUFJO2FBQVI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzthQVdELFVBQVMsS0FBYTtZQUNwQixJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0NBQWdDLEtBQU8sQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQzthQUNyQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUNwQjtRQUNILENBQUM7OztPQWxCQTtJQUVELHNCQUFJLDRDQUFRO2FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzthQWlCRCxVQUFhLEtBQXdCO1lBQ25DLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO2dCQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7YUFDeEI7UUFDSCxDQUFDOzs7T0F2QkE7SUFFRCxzQkFBSSxtREFBZTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQy9CLENBQUM7YUFzQkQsVUFBb0IsS0FBYztZQUNoQyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7YUFDL0I7UUFDSCxDQUFDOzs7T0ExQkE7SUEwQ0QsMENBQVMsR0FBVCxVQUFVLEtBQW9CO1FBQzVCLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUN4QyxRQUFRLEdBQUcsRUFBRTtZQUNYLEtBQUssT0FBTyxDQUFDO1lBQ2IsS0FBSyxhQUFhLENBQUM7WUFDbkIsS0FBSyxFQUFFLENBQUM7WUFDUixLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssRUFBRTtnQkFDTCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUNuRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUN4QjtnQkFDRCxNQUFNO1NBQ1Q7SUFDSCxDQUFDO0lBRUQseUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsNENBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsZ0RBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2lCQUNwQixRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUNaLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFDRCxzQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDOztnQkFyQ3dCLFVBQVU7O0lBcENuQztRQURDLEtBQUssRUFBRTtzREFRUDtJQUdEO1FBREMsS0FBSyxFQUFFOzBEQU9QO0lBR0Q7UUFEQyxLQUFLLEVBQUU7aUVBS1A7SUFFUTtRQUFSLEtBQUssRUFBRTtpRUFBdUI7SUFJL0I7UUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3RCLEtBQUssRUFBRTtzREFDRztJQUdYO1FBREMsTUFBTSxFQUFFOzhEQUM0QjtJQU9yQztRQURDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzsyREFlbkM7SUF2RVUsc0JBQXNCO1FBTGxDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsdzJCQUE4Qzs7U0FFL0MsQ0FBQztPQUNXLHNCQUFzQixDQTRGbEM7SUFBRCw2QkFBQztDQUFBLEFBNUZELElBNEZDO1NBNUZZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBPbkNoYW5nZXMsXG4gIEhvc3RMaXN0ZW5lcixcbiAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgU1VQUE9SVEVEX1RZUEVTID0gWydpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZycsICdlcnJvciddO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdibXctaW5saW5lLW1lc3NhZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5saW5lLW1lc3NhZ2UuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9pbmxpbmUtbWVzc2FnZS5jb21wb25lbnQubGVzcyddXG59KVxuZXhwb3J0IGNsYXNzIElubGluZU1lc3NhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIHByb3RlY3RlZCBfdHlwZSA9ICcnO1xuICBwcm90ZWN0ZWQgX21lc3NhZ2VzID0gW107XG4gIHByb3RlY3RlZCBfc2hvd0Nsb3NlQnV0dG9uID0gdHJ1ZTtcblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIGdldCBtZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXM7XG4gIH1cblxuICBnZXQgc2hvd0Nsb3NlQnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zaG93Q2xvc2VCdXR0b247XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgdHlwZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKFNVUFBPUlRFRF9UWVBFUy5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgIGNvbnNvbGUud2FybihgSW52YWxpZCBvciB1bnN1cHBvcnRlZCB0eXBlOiAke3ZhbHVlfWApO1xuICAgICAgdGhpcy5fdHlwZSA9ICdpbmZvJztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdHlwZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBtZXNzYWdlcyh2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fbWVzc2FnZXMgPSBbdmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tZXNzYWdlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBzaG93Q2xvc2VCdXR0b24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLl9zaG93Q2xvc2VCdXR0b24gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBncm91cEhlYWRsaW5lOiBzdHJpbmc7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgQElucHV0KClcbiAgaWQ6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgY2xvc2VFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNsb3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsOiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxuICBvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBrZXkgPSBldmVudC5jb2RlIHx8IGV2ZW50LmtleUNvZGU7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgIGNhc2UgJ051bXBhZEVudGVyJzpcbiAgICAgIGNhc2UgMTM6XG4gICAgICBjYXNlICdTcGFjZSc6XG4gICAgICBjYXNlIDMyOlxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG9zZScpKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jaGVja1Byb3BlcnRpZXMoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuY2hlY2tQcm9wZXJ0aWVzKCk7XG4gIH1cblxuICBjaGVja1Byb3BlcnRpZXMoKSB7XG4gICAgaWYgKCF0aGlzLmlkKSB7XG4gICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKVxuICAgICAgICAudG9TdHJpbmcoMzYpXG4gICAgICAgIC5zdWJzdHJpbmcoMik7XG4gICAgfVxuICB9XG4gIGNsb3NlKCkge1xuICAgIHRoaXMuY2xvc2VFdmVudC5lbWl0KCk7XG4gICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICB9XG59XG4iXX0=