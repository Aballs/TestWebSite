import { __decorate, __param } from "tslib";
import { AfterContentInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, EventEmitter, forwardRef, Input, OnDestroy, OnInit, Optional, Output, QueryList, HostListener, ElementRef, Self } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
// RadiobuttonGroupComponent and RadiobuttonComponent exist in the same file in order to prevent a circular dependency
var RadiobuttonGroupComponent = /** @class */ (function () {
    function RadiobuttonGroupComponent(control, _changeDetectorRef) {
        this.control = control;
        this._changeDetectorRef = _changeDetectorRef;
        this._stateChangeSubject = new Subject();
        this._disabled = false;
        this._required = false;
        this._selected = null;
        this._value = null;
        this.groupValueChange = new EventEmitter();
        this.isDirty = false;
        this.isTouched = false;
        this._onChange = function () { };
        this._onTouched = function () { };
        if (this.control) {
            this.control.valueAccessor = this;
        }
        var id = Math.random()
            .toString(36)
            .substring(2);
        this._name = "bmw-radiobutton-group-" + id;
    }
    Object.defineProperty(RadiobuttonGroupComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = value;
            this._stateChangeSubject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonGroupComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (value) {
            this._required = value;
            this._stateChangeSubject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonGroupComponent.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
            this._stateChangeSubject.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonGroupComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            if (this._value !== newValue) {
                // make sure this is set first before setting values and checked props on children
                this._value = newValue;
                this._updateSelectedRadioFromValue();
                this._checkSelectedRadioButton();
                this.validate();
            }
        },
        enumerable: true,
        configurable: true
    });
    RadiobuttonGroupComponent.prototype.onKeydown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                if (this.value) {
                    this._setNextNeighbourRadioButton(event);
                }
                break;
            case 'ArrowUp':
            case 38:
                if (this.value) {
                    this._setPreviousNeighbourRadioButton(event);
                }
                break;
            case 'Space':
            case 32:
                if (!this.value) {
                    var focusedRadioButton = this.radios.find(function (radio) { return radio.elementRef.nativeElement.querySelector('input') === event.target; });
                    focusedRadioButton._onInputChange(event);
                }
                event.preventDefault();
                break;
        }
    };
    RadiobuttonGroupComponent.prototype.ngAfterContentInit = function () {
        this._updateSelectedRadioFromValue();
        this._checkSelectedRadioButton();
    };
    RadiobuttonGroupComponent.prototype.ngOnDestroy = function () {
        this._stateChangeSubject.complete();
    };
    RadiobuttonGroupComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    RadiobuttonGroupComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    RadiobuttonGroupComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    // this is called by child components
    RadiobuttonGroupComponent.prototype.change = function (value) {
        this.value = value;
        this._onChange(value);
        this.isDirty = true;
        if (this._onTouched) {
            this._onTouched();
        }
        this.isTouched = true;
        this.groupValueChange.emit({ source: this._selected, value: this._value });
        this.validate();
    };
    RadiobuttonGroupComponent.prototype.validate = function () {
        var _this = this;
        var _a;
        if (this.radios) {
            if ((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueAccessor) {
                var _b = this.control, touched = _b.touched, dirty = _b.dirty, invalid = _b.invalid;
                this.invalid = invalid ? dirty || touched : false;
            }
            else {
                this.invalid = (this.isDirty || this.isTouched) && this.required && !this._value;
            }
            this.radios.forEach(function (radio) {
                radio.invalid = _this.invalid;
            });
        }
    };
    RadiobuttonGroupComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    RadiobuttonGroupComponent.prototype._updateSelectedRadioFromValue = function () {
        var _this = this;
        var isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this.radios && !isAlreadySelected) {
            this._selected = null;
            this.radios.forEach(function (radio) {
                radio.checked = _this.value === radio.value;
                if (radio.checked) {
                    _this._selected = radio;
                    radio.focusable = true;
                }
                else if (_this.value) {
                    radio.focusable = false;
                }
            });
        }
    };
    RadiobuttonGroupComponent.prototype._checkSelectedRadioButton = function () {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    };
    RadiobuttonGroupComponent.prototype._setNextNeighbourRadioButton = function (event) {
        var radiosArray = this.radios.toArray();
        var currentRadioButtonIndex = radiosArray.findIndex(function (radioButton) { return radioButton.checked; });
        if (currentRadioButtonIndex === radiosArray.length - 1) {
            radiosArray[0]._onInputChange(event);
        }
        else {
            radiosArray[currentRadioButtonIndex + 1]._onInputChange(event);
        }
    };
    RadiobuttonGroupComponent.prototype._setPreviousNeighbourRadioButton = function (event) {
        var radiosArray = this.radios.toArray();
        var currentRadioButtonIndex = radiosArray.findIndex(function (radioButton) { return radioButton.checked; });
        if (currentRadioButtonIndex === 0) {
            radiosArray[radiosArray.length - 1]._onInputChange(event);
        }
        else {
            radiosArray[currentRadioButtonIndex - 1]._onInputChange(event);
        }
    };
    RadiobuttonGroupComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input('disabled')
    ], RadiobuttonGroupComponent.prototype, "disabled", null);
    __decorate([
        Input()
    ], RadiobuttonGroupComponent.prototype, "required", null);
    __decorate([
        Input()
    ], RadiobuttonGroupComponent.prototype, "name", null);
    __decorate([
        Input()
    ], RadiobuttonGroupComponent.prototype, "value", null);
    __decorate([
        Output()
    ], RadiobuttonGroupComponent.prototype, "groupValueChange", void 0);
    __decorate([
        ContentChildren(forwardRef(function () { return RadiobuttonComponent; }), { descendants: true })
    ], RadiobuttonGroupComponent.prototype, "radios", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], RadiobuttonGroupComponent.prototype, "onKeydown", null);
    RadiobuttonGroupComponent = __decorate([
        Component({
            selector: 'bmw-radiobutton-group',
            template: '<ng-content></ng-content>',
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __param(0, Self()), __param(0, Optional())
    ], RadiobuttonGroupComponent);
    return RadiobuttonGroupComponent;
}());
export { RadiobuttonGroupComponent };
var RadiobuttonComponent = /** @class */ (function () {
    function RadiobuttonComponent(radioGroup, elementRef, _changeDetectorRef) {
        this.radioGroup = radioGroup;
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._name = null;
        this._value = null;
        this._checked = false;
        this._disabled = false;
        this._required = false;
        this._focusable = true;
        this.valueChange = new EventEmitter();
        this._invalid = false;
        this.onChangeCallback = function (_) { };
        this.onTouchedCallback = function () { };
    }
    RadiobuttonComponent_1 = RadiobuttonComponent;
    Object.defineProperty(RadiobuttonComponent.prototype, "name", {
        get: function () {
            return this.radioGroup ? this.radioGroup.name : this._name;
        },
        set: function (value) {
            if (this._name !== value) {
                this._name = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (value !== this._value) {
                this._value = value;
                this.onChangeCallback(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonComponent.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            if (this._checked !== value) {
                this._checked = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonComponent.prototype, "disabled", {
        get: function () {
            return this._disabled || (this.radioGroup && this.radioGroup.disabled);
        },
        set: function (value) {
            this._disabled = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonComponent.prototype, "required", {
        get: function () {
            return this._required || (this.radioGroup && this.radioGroup.required);
        },
        set: function (value) {
            this._required = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonComponent.prototype, "focusable", {
        get: function () {
            return this._focusable;
        },
        set: function (value) {
            this._focusable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadiobuttonComponent.prototype, "invalid", {
        get: function () {
            return this._invalid;
        },
        set: function (value) {
            this._invalid = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    RadiobuttonComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
        if (this.radioGroup) {
            this.name = this.radioGroup.name;
            this._parentChangeSubscription = this.radioGroup._stateChangeSubject.subscribe(function () {
                _this._changeDetectorRef.markForCheck();
            });
        }
    };
    RadiobuttonComponent.prototype.ngOnDestroy = function () {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
        }
    };
    RadiobuttonComponent.prototype.writeValue = function (value) {
        if (value === this._value) {
            this._checked = true;
            this._changeDetectorRef.markForCheck();
        }
    };
    RadiobuttonComponent.prototype.registerOnChange = function (onChange) {
        this.onChangeCallback = onChange;
    };
    RadiobuttonComponent.prototype.registerOnTouched = function (onTouched) {
        this.onTouchedCallback = onTouched;
    };
    RadiobuttonComponent.prototype.touch = function () {
        this.onTouchedCallback();
    };
    RadiobuttonComponent.prototype._onInputChange = function (event) {
        event.stopPropagation();
        this._checked = true;
        this.valueChange.emit({ source: this, value: this._value });
        this.onChangeCallback(this.value);
        if (this.radioGroup && this.value !== this.radioGroup.value) {
            this.radioGroup.change(this.value);
        }
    };
    RadiobuttonComponent.prototype._onInputClick = function (event) {
        event.stopPropagation();
    };
    var RadiobuttonComponent_1;
    RadiobuttonComponent.ctorParameters = function () { return [
        { type: RadiobuttonGroupComponent, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], RadiobuttonComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], RadiobuttonComponent.prototype, "name", null);
    __decorate([
        Input()
    ], RadiobuttonComponent.prototype, "value", null);
    __decorate([
        Input()
    ], RadiobuttonComponent.prototype, "checked", null);
    __decorate([
        Input()
    ], RadiobuttonComponent.prototype, "disabled", null);
    __decorate([
        Input()
    ], RadiobuttonComponent.prototype, "required", null);
    __decorate([
        Output()
    ], RadiobuttonComponent.prototype, "valueChange", void 0);
    RadiobuttonComponent = RadiobuttonComponent_1 = __decorate([
        Component({
            selector: 'bmw-radiobutton',
            template: "<div class=\"radiobutton-container\" [class.disabled]=\"disabled\">\n  <input\n    type=\"radio\"\n    [attr.name]=\"name\"\n    [id]=\"id\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    (blur)=\"touch()\"\n    (change)=\"_onInputChange($event)\"\n    (click)=\"_onInputClick($event)\"\n    [tabindex]=\"focusable ? 0 : -1\"\n    [class.invalid]=\"invalid\"\n  />\n  <label [for]=\"id\" [class.disabled]=\"disabled\">\n    <span class=\"checkmark\"></span>\n    <div class=\"label bmw-component-text\">\n      <ng-content></ng-content>\n    </div>\n  </label>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return RadiobuttonComponent_1; }),
                    multi: true
                }
            ],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block}:host .radiobutton-container{display:block;position:relative;padding-left:var(--radiobutton__padding-left);cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}:host .radiobutton-container.disabled{cursor:no-drop}:host .radiobutton-container label{cursor:inherit}:host .radiobutton-container label.disabled{opacity:.5;pointer-events:none}:host .radiobutton-container label.disabled .bmw-component-text{opacity:.5}:host .radiobutton-container div.label{padding-top:calc((var(--radiobutton__height) - var(--radiobutton__line-height))/ 2);padding-bottom:calc((var(--radiobutton__height) - var(--radiobutton__line-height))/ 2);position:relative;color:var(--radiobutton__color)}:host .radiobutton-container input{position:absolute;opacity:0;width:.1px;height:.1px}:host .radiobutton-container input:focus+label .checkmark{box-shadow:0 0 0 1px var(--color-bmw-highlight);outline:transparent solid 1px}:host .radiobutton-container .checkmark{position:absolute;top:calc(50% - var(--radiobutton__height)/ 2);left:0;height:var(--radiobutton__radius);width:var(--radiobutton__radius);border-radius:50%;box-sizing:border-box;border:1px solid var(--radiobutton__border-color);background-color:var(--radiobutton__background-color)}:host .radiobutton-container .checkmark:after{content:'';position:absolute;top:var(--radiobutton__inner-padding);left:var(--radiobutton__inner-padding);width:var(--radiobutton__inner-radius);height:var(--radiobutton__inner-radius);border-radius:50%;background:var(--radiobutton__color);display:none}:host .radiobutton-container input+label:hover .checkmark{background-color:var(--radiobutton__hover__color)}:host .radiobutton-container input:checked+label span.checkmark:after{display:block}::ng-deep bmw-radiobutton-group.ng-invalid.ng-touched .radiobutton-container input+label div,::ng-deep bmw-radiobutton-group.ng-invalid.ng-touched .radiobutton-container input+label span{border-color:var(--radiobutton__error__color)!important;color:var(--radiobutton__error__color)!important}"]
        }),
        __param(0, Optional())
    ], RadiobuttonComponent);
    return RadiobuttonComponent;
}());
export { RadiobuttonComponent };
//# sourceMappingURL=data:application/json;base64,