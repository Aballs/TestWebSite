import { __assign, __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, HostListener, ViewChild, isDevMode } from '@angular/core';
var TableComponent = /** @class */ (function () {
    function TableComponent() {
        this.hideHeader = false;
        this.zebra = false;
        this.stickHeader = false;
        this.tableSorted = new EventEmitter();
        this.isLoading = false;
    }
    TableComponent.prototype.onScroll = function () {
        if (this.stickHeader) {
            if (this.headerContainer.nativeElement.getBoundingClientRect().top <= 0 &&
                this.tableContainer.nativeElement.getBoundingClientRect().bottom > 0 &&
                this.tableContainer.nativeElement.getBoundingClientRect().top < 0) {
                if (this.isIE()) {
                    this.headerContainer.nativeElement.classList.add('fixed');
                    this.headerContainer.nativeElement.setAttribute('style', "\n              left: -" + window.pageXOffset + "px;\n            ");
                }
            }
            else {
                if (this.isIE()) {
                    this.headerContainer.nativeElement.classList.remove('fixed');
                }
            }
            if (this.isIE()) {
                this.setElementsWidthRecursivelyBecauseHTMLTablesAreHardToDealWith(this.tableContainer.nativeElement);
            }
        }
    };
    TableComponent.prototype.shouldHaveStickHeader = function () {
        return this.stickHeader && !this.isIE();
    };
    TableComponent.prototype.ngOnInit = function () {
        var _a, _b, _c;
        if ((_a = this.data) === null || _a === void 0 ? void 0 : _a.length) {
            this.rowsAfterSort = this.data.map(function (i) { return (__assign({}, i)); });
        }
        // keep the legacy input
        else if ((_b = this.rowData) === null || _b === void 0 ? void 0 : _b.length) {
            if (isDevMode()) {
                console.warn('<bmw-table> `rowData` input is deprecated. Please use `data` instead');
            }
            this.rowsAfterSort = this.rowData.map(function (i) { return (__assign({}, i)); });
        }
        // keep the legacy input
        if ((_c = this.columnDefs) === null || _c === void 0 ? void 0 : _c.length) {
            if (isDevMode()) {
                console.warn('<bmw-table> `columnDefs` input is deprecated. Please use `columns` instead');
            }
            this.columns = this.columnDefs;
        }
    };
    TableComponent.prototype.ngOnChanges = function (changes) {
        if (changes['data']) {
            this.rowsAfterSort = this.data.map(function (i) { return (__assign({}, i)); });
        }
        // keep the legacy input
        else if (changes['rowData']) {
            this.rowsAfterSort = this.rowData.map(function (i) { return (__assign({}, i)); });
        }
        // keep the legacy input
        else if (changes['columnDefs']) {
            this.columns = this.columnDefs;
        }
    };
    TableComponent.prototype.ngAfterContentInit = function () {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    };
    TableComponent.prototype.applySortToRows = function (header) {
        this.isLoading = true;
        if (header.sort === 'asc') {
            this.rowsAfterSort = this.rowsAfterSort.sort(function (a, b) {
                return a[header.field] > b[header.field] ? 1 : a[header.field] === b[header.field] ? 0 : -1;
            });
        }
        else if (header.sort === 'desc') {
            this.rowsAfterSort = this.rowsAfterSort.sort(function (a, b) {
                return a[header.field] < b[header.field] ? 1 : a[header.field] === b[header.field] ? 0 : -1;
            });
        }
        this.tableSorted.emit(header);
        this.isLoading = false;
    };
    TableComponent.prototype.toggleSort = function (header) {
        if (header.sorted) {
            if (header.sort === null || header.sort === 'asc') {
                header.sort = 'desc';
            }
            else {
                header.sort = 'asc';
            }
        }
        else {
            if (!header.sort) {
                header.sort = 'asc';
            }
        }
    };
    TableComponent.prototype.sortRowsByProperty = function (property) {
        var _this = this;
        var _a;
        if ((_a = this.columns) === null || _a === void 0 ? void 0 : _a.some(function (col) { return col.field === property && col.sortable === true; })) {
            this.columns.forEach(function (header) {
                if (header.sortable && header.field === property) {
                    _this.toggleSort(header);
                    _this.applySortToRows(header);
                    header.sorted = true;
                }
                else {
                    header.sort = null;
                    header.sorted = false;
                }
            });
        }
    };
    TableComponent.prototype.setElementsWidthRecursivelyBecauseHTMLTablesAreHardToDealWith = function (element) {
        this.setElementInlineWidth(element);
        for (var i = 0; i < element.childNodes.length; i++) {
            this.setElementsWidthRecursivelyBecauseHTMLTablesAreHardToDealWith(element.childNodes[i]);
        }
    };
    TableComponent.prototype.setElementInlineWidth = function (element) {
        if (element.getBoundingClientRect) {
            var width = element.getBoundingClientRect().width;
            element.setAttribute('style', "\n    width: " + width + "px !important;\n    max-width: " + width + "px !important;\n    ");
        }
    };
    TableComponent.prototype.isIE = function () {
        var result = false;
        if (window.navigator.userAgent.indexOf('MSIE ') > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))
            result = true;
        return result;
    };
    __decorate([
        Input()
    ], TableComponent.prototype, "columnDefs", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "columns", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "rowData", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "hideHeader", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "zebra", void 0);
    __decorate([
        Input()
    ], TableComponent.prototype, "stickHeader", void 0);
    __decorate([
        Output()
    ], TableComponent.prototype, "tableSorted", void 0);
    __decorate([
        ViewChild('tableContainer')
    ], TableComponent.prototype, "tableContainer", void 0);
    __decorate([
        ViewChild('headerContainer')
    ], TableComponent.prototype, "headerContainer", void 0);
    __decorate([
        HostListener('window:scroll')
    ], TableComponent.prototype, "onScroll", null);
    TableComponent = __decorate([
        Component({
            selector: 'bmw-table',
            template: "<table #tableContainer [ngClass]=\"{ zebra: zebra }\">\n  <thead #headerContainer [ngClass]=\"{ fixed: shouldHaveStickHeader() }\">\n    <tr class=\"header\" *ngIf=\"!hideHeader\">\n      <th\n        class=\"header-cell\"\n        [ngClass]=\"{ 'header-cell-sortable': column.sortable }\"\n        *ngFor=\"let column of columns\"\n        (click)=\"sortRowsByProperty(column.field)\"\n      >\n        <div class=\"header-cell-label\">\n          <span>{{ column.headerName }}</span>\n          <i\n            class=\"header-icon iwp-icon-gen_sort_list_asc\"\n            *ngIf=\"column.sortable && (column.sort === 'asc' || column.sort === null)\"\n            [ngClass]=\"{ sortInactive: !column.sorted }\"\n          ></i>\n          <i\n            class=\"header-icon iwp-icon-gen_sort_list_desc\"\n            *ngIf=\"column.sortable && column.sort === 'desc'\"\n            [ngClass]=\"{ sortInactive: !column.sorted }\"\n          ></i>\n        </div>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"row\" *ngFor=\"let row of rowsAfterSort\">\n      <td class=\"row-cell\" *ngFor=\"let column of columns\">\n        {{ row[column.field] }}\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
            styles: [":host{display:block;min-width:100%}table{min-width:100%;color:var(--color-bmw-basic4);font-family:Arial;font-size:var(--typography__regular-text__font-size);line-height:var(--typography__regular-text__line-height);background-color:var(--color-bmw-basic5);border-collapse:separate;border-spacing:0}table *{box-sizing:border-box;outline:0}table * :after,table * :before{outline:0;box-sizing:border-box}table .iwp-icon-gen_sort_list_asc:before{content:' \\e982'}table .iwp-icon-gen_sort_list_desc:before{content:' \\e983'}table thead.fixed .header-cell{position:sticky;position:-webkit-sticky;top:0;background-color:var(--table__header-cell__default__background-color);border-right:1px solid var(--table__header-cell__default__border-right-color)}table .header{font-family:bmwgroup;font-size:var(--typography__table-headline-text__font-size);line-height:var(--typography__table-headline-text__line-height);font-weight:700;background-color:var(--table__header-cell__default__background-color);color:var(--color-bmw-basic4);margin-bottom:-1px;border-bottom-color:var(--color-bmw-basic5);height:var(--table__header__default__height);flex-direction:row}table .header-cell{padding:var(--spacing-bmw-xs);border-right:1px solid var(--table__header-cell__default__border-right-color)}table .header-cell-label{display:flex;flex:1 1 auto;overflow:hidden;align-items:center;text-overflow:ellipsis;-ms-grid-row-align:stretch;align-self:stretch}table .header-cell-label>span{padding-right:var(--spacing-bmw-xs);text-align:left}table .header-cell-sortable{cursor:pointer}table .header-cell-sortable .header-icon{font-family:iwp;display:block;speak:none;font-size:var(--table__icons__font-size);color:var(--color-bmw-basic4);font-style:normal;font-weight:400;font-variant:normal;text-transform:none;-webkit-font-smoothing:antialiased}table .header-cell-sortable .header-icon.sortInactive{color:var(--color-bmw-basic4);opacity:.4}table .header-cell-sortable:hover{background-color:var(--table__header-cell__hover__background-color)}table .header-cell::after{display:none}table.zebra .row:nth-child(even){background-color:var(--table__row__zebra__background-color)}table.zebra .row:nth-child(even):hover{background-color:var(--table__row__hover__background-color)}table .row{background-color:var(--table__row__default__background-color);height:var(--table__row__default__height)}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){table thead.fixed{position:fixed;top:0;right:0;pointer-events:none}table thead.fixed+tbody:before{content:'\\200C';display:block;line-height:var(--table__cell__height)}table .row{box-shadow:inset 0 -1px 0 0 var(--table__row__border-bottom-color)}}table .row:hover{background-color:var(--table__row__hover__background-color)}table .row-cell{font-family:Arial;font-size:var(--typography__component-text__font-size);line-height:var(--typography__component-text__line-height);color:var(--color-bmw-basic4);padding:calc(var(--table__cell__padding) - 1px) var(--spacing-bmw-xs);outline:0;border-bottom:1px solid var(--table__row__border-bottom-color)}table .row-cell>*{height:var(--table__cell__height);display:flex;align-items:center}"]
        })
    ], TableComponent);
    return TableComponent;
}());
export { TableComponent };
//# sourceMappingURL=data:application/json;base64,