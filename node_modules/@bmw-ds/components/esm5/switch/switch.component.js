import { __decorate, __param } from "tslib";
import { Component, AfterViewInit, Input, ViewChild, ElementRef, Self, Optional, HostBinding } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(control, elementRef) {
        this.control = control;
        this.elementRef = elementRef;
        this.required = false;
        this.disabled = false;
        this.checked = false;
        this.isDirty = false;
        this.isTouched = false;
        this.onChangeCallback = function () { };
        this.onTouchedCallback = function () { };
        if (this.control) {
            this.control.valueAccessor = this;
        }
    }
    SwitchComponent.prototype.writeValue = function (value) {
        this.checked = value;
    };
    SwitchComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    SwitchComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    SwitchComponent.prototype.setDisabledState = function (disable) {
        this.disabled = disable;
    };
    SwitchComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        Promise.resolve().then(function () {
            if (!_this.id)
                _this.id = Math.random()
                    .toString(36)
                    .substring(2);
            if (!_this.name)
                _this.name = 'switch-' + _this.id;
        });
    };
    SwitchComponent.prototype.onTouched = function () {
        this.onTouchedCallback();
    };
    SwitchComponent.prototype.toggle = function (event) {
        var _a;
        if (this.disabled)
            return;
        var checkedValue = event.target.checked;
        this.onChangeCallback(checkedValue);
        this.onTouched();
        this.isDirty = true;
        this.isTouched = true;
        if ((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueAccessor) {
            var _b = this.control, touched = _b.touched, dirty = _b.dirty, invalid = _b.invalid;
            this.invalid = invalid ? dirty || touched : false;
        }
        else {
            this.invalid = (this.isDirty || this.isTouched) && this.required === true && this.checked === false;
        }
    };
    SwitchComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: ElementRef }
    ]; };
    __decorate([
        ViewChild('input')
    ], SwitchComponent.prototype, "input", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "required", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], SwitchComponent.prototype, "labelPosition", void 0);
    __decorate([
        HostBinding('class.disabled'),
        Input()
    ], SwitchComponent.prototype, "disabled", void 0);
    __decorate([
        HostBinding('attr.checked'),
        Input()
    ], SwitchComponent.prototype, "checked", void 0);
    SwitchComponent = __decorate([
        Component({
            selector: 'bmw-switch',
            template: "<label\n  [for]=\"id\"\n  class=\"switch\"\n  [ngClass]=\"{ 'label-position-right': labelPosition === 'right', 'label-position-left': labelPosition === 'left' }\"\n>\n  <input\n    type=\"checkbox\"\n    [attr.name]=\"name\"\n    [id]=\"id\"\n    (change)=\"toggle($event)\"\n    [required]=\"required\"\n    [tabindex]=\"disabled ? -1 : 0\"\n    [(ngModel)]=\"checked\"\n    [attr.disabled]=\"disabled ? true : null\"\n    [attr.aria-checked]=\"checked\"\n    #input\n  />\n  <div class=\"track\"></div>\n  <span class=\"label bmw-component-text\"><ng-content></ng-content></span>\n</label>\n",
            styles: [":host{display:block;outline:0;white-space:nowrap;max-width:100%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.switch{position:relative;display:flex;flex:1;align-items:center;cursor:pointer;height:calc(var(--switch__knob__default__height) + 2 * var(--switch__default__border-width))}.switch .track{height:var(--switch__track__default__height);width:var(--switch__track__default__width);flex-shrink:0;position:relative;background-color:var(--switch__track__default__background-color);border:var(--switch__default__border-width) solid var(--switch__track__default__border-color);border-radius:var(--switch__track__default__border-radius);margin-right:var(--spacing-bmw-xs);transition:background-color .1s ease-in-out}.switch .track:before{position:absolute;content:'';display:flex;font-family:iwp;font-size:var(--switch__checked__knob__default__font-size);align-items:center;justify-content:center;height:var(--switch__knob__default__height);width:var(--switch__knob__default__width);top:50%;transform:translateY(-50%);left:calc(var(--switch__default__border-width) * -1);background-color:var(--switch__knob__default__background-color);border:var(--switch__default__border-width) solid var(--switch__knob__default__border-color);border-radius:var(--switch__knob__default__border-radius);transition:transform .1s ease-in-out}.switch .label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.switch input{clip:rect(0,0,0,0);margin:1px;width:1px;height:1px;position:absolute;overflow:hidden;outline:0;border:0}.switch input:checked+.track{background-color:var(--switch__checked__track__default__background-color);border-color:var(--switch__checked__track__default__background-color)}.switch input:checked+.track:before{transform:translate(var(--switch__knob__default__travel),-50%);content:'\\e9cd';color:var(--switch__checked__knob__default__color)}.switch input:focus+.track:before{box-shadow:0 0 0 1px var(--color-bmw-basic5),0 0 0 3px var(--color-bmw-highlight)}.switch:hover .track:before{border-color:var(--switch__knob__default__hover__border-color)}.switch.label-position-left .track{order:2;margin-right:0;margin-left:var(--spacing-bmw-xs)}.switch.label-position-left .label,.switch.label-position-right .track{order:1}.switch.label-position-right .label{order:2}:host.disabled .switch{opacity:.5;cursor:no-drop!important}:host.disabled .switch:hover .track:before{border-color:var(--switch__knob__default__border-color)}"]
        }),
        __param(0, Self()), __param(0, Optional())
    ], SwitchComponent);
    return SwitchComponent;
}());
export { SwitchComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInN3aXRjaC9zd2l0Y2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFXakU7SUE0QkUseUJBQXdDLE9BQWtCLEVBQVMsVUFBc0I7UUFBakQsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUFTLGVBQVUsR0FBVixVQUFVLENBQVk7UUF0QnpGLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFTakIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUlqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBR1IsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBRWxCLHFCQUFnQixHQUF5QixjQUFPLENBQUMsQ0FBQztRQUNsRCxzQkFBaUIsR0FBZSxjQUFPLENBQUMsQ0FBQztRQUcvQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELG9DQUFVLEdBQVYsVUFBVyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCwwQ0FBZ0IsR0FBaEIsVUFBaUIsRUFBd0I7UUFDdkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsMkNBQWlCLEdBQWpCLFVBQWtCLEVBQU87UUFDdkIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsMENBQWdCLEdBQWhCLFVBQWtCLE9BQWdCO1FBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFRCx5Q0FBZSxHQUFmO1FBQUEsaUJBUUM7UUFQQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFJLENBQUMsRUFBRTtnQkFDVixLQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7cUJBQ3BCLFFBQVEsQ0FBQyxFQUFFLENBQUM7cUJBQ1osU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxLQUFJLENBQUMsSUFBSTtnQkFBRSxLQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1DQUFTLEdBQVQ7UUFDRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsZ0NBQU0sR0FBTixVQUFPLEtBQVU7O1FBQ2YsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFFMUIsSUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFFMUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUV0QixVQUFJLElBQUksQ0FBQyxPQUFPLDBDQUFFLGFBQWEsRUFBRTtZQUN6QixJQUFBLGlCQUEwQyxFQUF4QyxvQkFBTyxFQUFFLGdCQUFLLEVBQUUsb0JBQXdCLENBQUM7WUFDakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUNuRDthQUFNO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDO1NBQ3JHO0lBQ0gsQ0FBQzs7Z0JBdERnRCxTQUFTLHVCQUE3QyxJQUFJLFlBQUksUUFBUTtnQkFBa0QsVUFBVTs7SUExQnpGO1FBREMsU0FBUyxDQUFDLE9BQU8sQ0FBQztrREFDRDtJQUVsQjtRQURDLEtBQUssRUFBRTtpREFDSztJQUViO1FBREMsS0FBSyxFQUFFO3FEQUNTO0lBRWpCO1FBREMsS0FBSyxFQUFFOytDQUNHO0lBR1g7UUFEQyxLQUFLLEVBQUU7MERBQ3dDO0lBSWhEO1FBRkMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1FBQzdCLEtBQUssRUFBRTtxREFDUztJQUlqQjtRQUZDLFdBQVcsQ0FBQyxjQUFjLENBQUM7UUFDM0IsS0FBSyxFQUFFO29EQUNRO0lBbkJMLGVBQWU7UUFMM0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsNmxCQUFzQzs7U0FFdkMsQ0FBQztRQTZCYSxXQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsV0FBQSxRQUFRLEVBQUUsQ0FBQTtPQTVCcEIsZUFBZSxDQW1GM0I7SUFBRCxzQkFBQztDQUFBLEFBbkZELElBbUZDO1NBbkZZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEFmdGVyVmlld0luaXQsIElucHV0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIFNlbGYsIE9wdGlvbmFsLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGNvbnN0IGVudW0gTGFiZWxQb3NpdGlvbiB7XG4gIFJpZ2h0ID0gJ3JpZ2h0JyxcbiAgTGVmdCA9ICdsZWZ0J1xufVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LXN3aXRjaCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2l0Y2guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zd2l0Y2guY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTd2l0Y2hDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gIEBWaWV3Q2hpbGQoJ2lucHV0JylcbiAgaW5wdXQ6IEVsZW1lbnRSZWY7XG4gIEBJbnB1dCgpXG4gIG5hbWU6IHN0cmluZztcbiAgQElucHV0KClcbiAgcmVxdWlyZWQgPSBmYWxzZTtcbiAgQElucHV0KClcbiAgaWQ6IHN0cmluZztcblxuICBASW5wdXQoKVxuICBsYWJlbFBvc2l0aW9uOiAncmlnaHQnIHwgJ2xlZnQnIHwgTGFiZWxQb3NpdGlvbjtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRpc2FibGVkJylcbiAgQElucHV0KClcbiAgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuY2hlY2tlZCcpXG4gIEBJbnB1dCgpXG4gIGNoZWNrZWQgPSBmYWxzZTtcblxuICBpbnZhbGlkOiBib29sZWFuO1xuICBwcml2YXRlIGlzRGlydHkgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc1RvdWNoZWQgPSBmYWxzZTtcblxuICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkID0gKCkgPT4ge307XG4gIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICBjb25zdHJ1Y3RvcihAU2VsZigpIEBPcHRpb25hbCgpIHByaXZhdGUgY29udHJvbDogTmdDb250cm9sLCBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHRoaXMuY29udHJvbC52YWx1ZUFjY2Vzc29yID0gdGhpcztcbiAgICB9XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5jaGVja2VkID0gdmFsdWU7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYm9vbGVhbikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGU/KGRpc2FibGU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5pZClcbiAgICAgICAgdGhpcy5pZCA9IE1hdGgucmFuZG9tKClcbiAgICAgICAgICAudG9TdHJpbmcoMzYpXG4gICAgICAgICAgLnN1YnN0cmluZygyKTtcbiAgICAgIGlmICghdGhpcy5uYW1lKSB0aGlzLm5hbWUgPSAnc3dpdGNoLScgKyB0aGlzLmlkO1xuICAgIH0pO1xuICB9XG5cbiAgb25Ub3VjaGVkKCkge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2soKTtcbiAgfVxuXG4gIHRvZ2dsZShldmVudDogYW55KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcblxuICAgIGNvbnN0IGNoZWNrZWRWYWx1ZSA9IGV2ZW50LnRhcmdldC5jaGVja2VkO1xuXG4gICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKGNoZWNrZWRWYWx1ZSk7XG5cbiAgICB0aGlzLm9uVG91Y2hlZCgpO1xuXG4gICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLmlzVG91Y2hlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5jb250cm9sPy52YWx1ZUFjY2Vzc29yKSB7XG4gICAgICBjb25zdCB7IHRvdWNoZWQsIGRpcnR5LCBpbnZhbGlkIH0gPSB0aGlzLmNvbnRyb2w7XG4gICAgICB0aGlzLmludmFsaWQgPSBpbnZhbGlkID8gZGlydHkgfHwgdG91Y2hlZCA6IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmludmFsaWQgPSAodGhpcy5pc0RpcnR5IHx8IHRoaXMuaXNUb3VjaGVkKSAmJiB0aGlzLnJlcXVpcmVkID09PSB0cnVlICYmIHRoaXMuY2hlY2tlZCA9PT0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=