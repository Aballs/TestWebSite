import { __decorate } from "tslib";
import { AfterContentChecked, AfterContentInit, Component, ContentChildren, EventEmitter, HostBinding, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, HostListener, ElementRef } from '@angular/core';
import { PanelComponent } from '../panel/panel.component';
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent(elem) {
        this.elem = elem;
        this.activePanelId = null;
        this.activePanelIdChange = new EventEmitter();
        this.subscriptions = [];
    }
    AccordionComponent.prototype.onKeydown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                var targetedPanel_1 = Array.prototype.slice
                    .call(this.elem.nativeElement.querySelectorAll('.panel'))
                    .find(function (panel) { return panel === event.target; });
                if (targetedPanel_1) {
                    this.setActivePanel(this.panels.find(function (panel) { return panel.labelsDiv.nativeElement === targetedPanel_1; }).id, targetedPanel_1.classList.contains('opened'));
                }
                event.stopImmediatePropagation();
                break;
        }
    };
    AccordionComponent.prototype.ngOnInit = function () {
        if (typeof this.id === 'undefined') {
            this.id = this.createId();
        }
    };
    AccordionComponent.prototype.ngOnChanges = function () {
        if (!this.panels)
            return;
        this.setActivePanel(this.activePanelId);
    };
    AccordionComponent.prototype.ngAfterContentInit = function () {
        this.panels.changes.subscribe(this.setupPanels.bind(this));
        this.setupPanels();
    };
    AccordionComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    AccordionComponent.prototype.setupPanels = function () {
        var _this = this;
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = this.panels.map(function (panel) {
            return panel.toggleEvent.subscribe(function (event) {
                _this.setActivePanel(panel.id, event.opened);
            });
        });
        if (this.activePanelId) {
            return this.setActivePanel(this.activePanelId);
        }
    };
    AccordionComponent.prototype.setActivePanel = function (activePanelId, opened) {
        var _this = this;
        if (opened === void 0) { opened = true; }
        this.panels.forEach(function (panel) {
            if (panel.id !== activePanelId && _this.canTogglePanel(panel)) {
                panel.opened = false;
            }
            if (panel.id === activePanelId) {
                panel.opened = opened;
                _this.activePanelId = opened ? activePanelId : null;
                _this.activePanelIdChange.emit(_this.activePanelId);
            }
        });
    };
    AccordionComponent.prototype.canTogglePanel = function (panel) {
        return !panel.disabled && !panel.nonCollapsible;
    };
    AccordionComponent.prototype.createId = function () {
        return Math.random()
            .toString(36)
            .substring(2);
    };
    AccordionComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ContentChildren(PanelComponent)
    ], AccordionComponent.prototype, "panels", void 0);
    __decorate([
        Input()
    ], AccordionComponent.prototype, "activePanelId", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], AccordionComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], AccordionComponent.prototype, "activePanelIdChange", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], AccordionComponent.prototype, "onKeydown", null);
    AccordionComponent = __decorate([
        Component({
            selector: 'bmw-accordion',
            template: "<ng-content></ng-content>\n",
            styles: [":host{display:block}:host ::ng-deep bmw-panel{margin-bottom:var(--spacing-bmw-xs)}"]
        })
    ], AccordionComponent);
    return AccordionComponent;
}());
export { AccordionComponent };
//# sourceMappingURL=data:application/json;base64,