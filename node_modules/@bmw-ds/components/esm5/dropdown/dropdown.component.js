import { __decorate } from "tslib";
import { AfterContentInit, Component, ContentChildren, EventEmitter, forwardRef, HostBinding, HostListener, Input, OnDestroy, OnInit, Output, QueryList, ElementRef, isDevMode } from '@angular/core';
import { DropdownItemComponent } from './dropdown-item.component';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var DropdownComponent = /** @class */ (function () {
    function DropdownComponent(_el) {
        this._el = _el;
        this.valueChange = new EventEmitter();
        this.opened = false;
        // this is emitted in ngOnDestroy
        this._destroy = new Subject();
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    DropdownComponent_1 = DropdownComponent;
    Object.defineProperty(DropdownComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            var _this = this;
            if (newValue !== this._value) {
                this._value = newValue;
                this._onChange(newValue);
                if (this.childDropdownMenuItems) {
                    this.childDropdownMenuItems.forEach(function (item) {
                        if (_this._value === item.value) {
                            item.selected = true;
                            _this.label = item.label;
                            _this.selectedItem = item;
                        }
                        else {
                            item.selected = false;
                        }
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    DropdownComponent.prototype.ngOnInit = function () {
        if (isDevMode()) {
            console.warn('Warning - <bmw-dropdown> component is deprecated and will be removed in the near future.');
            console.warn('Please use <bmw-combobox> instead https://designsystem.bmwgroup.net/components/form-combo-box');
        }
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    };
    DropdownComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // do this in the next cycle to avoid issues with dynamic component creation
        // TODO refactor this hack: call change detection when needed
        setTimeout(function () {
            _this._prepareItems();
            _this._validate();
            _this.childDropdownMenuItems.changes.pipe(takeUntil(_this._destroy)).subscribe(function () {
                _this._prepareItems();
            });
            _this._setGridClasses();
        });
    };
    DropdownComponent.prototype.ngOnDestroy = function () {
        this._destroy.next();
        this._destroy.complete();
    };
    DropdownComponent.prototype.onKeydown = function (event) {
        var keyName = event.key;
        event.preventDefault();
        if (keyName.slice(-4) === 'Down') {
            this.toggle(true);
            if (this._hovered === this.childDropdownMenuItems.length - 1)
                return;
            typeof this._hovered !== 'undefined' ? this._hovered++ : (this._hovered = 0);
            this._hover(this._hovered);
        }
        else if (keyName.slice(-2) === 'Up') {
            this.toggle(true);
            if (this._hovered === 0)
                return;
            typeof this._hovered !== 'undefined' ? this._hovered-- : (this._hovered = this.childDropdownMenuItems.length - 1);
            this._hover(this._hovered);
        }
        else if (keyName === 'Enter') {
            var item = this.childDropdownMenuItems[this._hovered];
            if (!item.disabled) {
                this._select(item.value);
                this.toggle(false);
            }
        }
        else if (keyName.slice(0, 3) === 'Esc') {
            this.toggle(false);
        }
    };
    DropdownComponent.prototype.onClickOutside = function ($e) {
        if ($e && !this._el.nativeElement.contains($e)) {
            this.toggle(false);
        }
    };
    DropdownComponent.prototype._prepareItems = function () {
        var _this = this;
        this.childDropdownMenuItems.forEach(function (item) {
            if (_this._value === item.value) {
                _this._select(item.value);
            }
            if (item.clicked.observers.length > 0) {
                return;
            }
            item.clicked.pipe(takeUntil(_this._destroy)).subscribe(function (selectedItem) {
                _this._select(selectedItem.value);
            });
        });
    };
    DropdownComponent.prototype.click = function (event) {
        this.toggle();
    };
    DropdownComponent.prototype.blur = function () {
        this._onTouched();
    };
    DropdownComponent.prototype.toggle = function (state) {
        if (typeof state !== 'undefined') {
            this.opened = state;
        }
        else {
            this.opened = !this.opened;
        }
    };
    DropdownComponent.prototype._validate = function () {
        var _this = this;
        if (typeof this.valid !== 'undefined' && this.valid !== null) {
            this.isValid = this.valid;
        }
        else {
            setTimeout(function () {
                var invalid = Array.from(_this._el.nativeElement.classList).includes('ng-invalid');
                _this.isValid = (_this.required !== true || _this._value) && !invalid;
            });
        }
    };
    DropdownComponent.prototype._select = function (value) {
        var _this = this;
        this.value = value;
        this.childDropdownMenuItems.forEach(function (item) {
            if (item.value === value) {
                item.selected = true;
                _this.label = item.label;
                _this.selectedItem = item;
            }
            else {
                item.selected = false;
            }
        });
        this.valueChange.emit(value);
        this._validate();
    };
    DropdownComponent.prototype._hover = function (selectedItemIndex) {
        this.childDropdownMenuItems.forEach(function (item, index) {
            if (index === selectedItemIndex) {
                item.keyboardFocus = true;
            }
            else {
                item.keyboardFocus = false;
            }
        });
    };
    DropdownComponent.prototype._setGridClasses = function () {
        var _this = this;
        var listOfClasses = Array.from(this._el.nativeElement.classList);
        this.gridClasses = listOfClasses.filter(function (item) { return item.match(/bmw__grid__cell--.*/); });
        if (this.gridClasses.length) {
            var wrapperClassList_1 = this._el.nativeElement.querySelector('div.dropdown-outer-wrapper').classList;
            wrapperClassList_1.value.split(' ').forEach(function (className) {
                if (className.match(/bmw__grid__cell--.*/)) {
                    wrapperClassList_1.remove(className);
                }
            });
            this.gridClasses.forEach(function (className) {
                _this._el.nativeElement.querySelector('div.dropdown-outer-wrapper').classList.add(className);
                _this._el.nativeElement.classList.remove(className);
            });
        }
    };
    DropdownComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    DropdownComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    DropdownComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    DropdownComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    var DropdownComponent_1;
    DropdownComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ContentChildren(DropdownItemComponent)
    ], DropdownComponent.prototype, "childDropdownMenuItems", void 0);
    __decorate([
        Input()
    ], DropdownComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], DropdownComponent.prototype, "required", void 0);
    __decorate([
        Input()
    ], DropdownComponent.prototype, "valid", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], DropdownComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], DropdownComponent.prototype, "valueChange", void 0);
    __decorate([
        Input()
    ], DropdownComponent.prototype, "value", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], DropdownComponent.prototype, "onKeydown", null);
    __decorate([
        HostListener('document:click', ['$event.target'])
    ], DropdownComponent.prototype, "onClickOutside", null);
    DropdownComponent = DropdownComponent_1 = __decorate([
        Component({
            selector: 'bmw-dropdown',
            template: "<div class=\"dropdown-wrapper\" [ngClass]=\"{ bmw__grid__inner: gridClasses?.length, disabled: disabled }\">\n  <ng-content select=\"bmw-label\"></ng-content>\n  <div class=\"dropdown-outer-wrapper bmw__grid__cell bmw__grid__cell--span-2 bmw__grid__cell--span-4-mobile\">\n    <div tabindex=\"0\" (click)=\"click($event)\" (blur)=\"blur()\" class=\"wrapper\" [class.invalid]=\"!isValid\">\n      <div class=\"select\" [class.open]=\"opened\">\n        <span *ngIf=\"selectedItem\" class=\"[placeholder]\"> {{ selectedItem.label }}</span>\n\n        <span *ngIf=\"!selectedItem\" class=\"placeholder\"> <ng-content select=\"label\"></ng-content> </span>\n      </div>\n      <div [class.open]=\"opened\" class=\"dropdown-menu\">\n        <ng-content select=\"bmw-dropdown-item\"></ng-content>\n      </div>\n    </div>\n    <ng-content select=\"bmw-error-message\"></ng-content>\n  </div>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    multi: true,
                    useExisting: forwardRef(function () { return DropdownComponent_1; })
                }
            ],
            styles: [".bmw__grid__inner.disabled{cursor:no-drop}.bmw__grid__inner.disabled div.wrapper{border:none;pointer-events:none}.bmw__grid__inner.disabled div.wrapper .select{border-bottom:1px solid var(--dropdown__disabled__color)}.bmw__grid__inner.disabled div.wrapper span.placeholder{color:var(--dropdown__disabled__color)!important}.bmw__grid__inner.disabled ::ng-deep label{cursor:no-drop;color:var(--inputfield__disabled__color)}:host:not(.ignore-invalid) .bmw__grid__inner:not(.disabled){grid-row-gap:0}:host:not(.ignore-invalid) .bmw__grid__inner:not(.disabled) div.wrapper.invalid{border:none}:host:not(.ignore-invalid) .bmw__grid__inner:not(.disabled) div.wrapper.invalid .select{border-bottom:1px solid!important;background-color:var(--dropdown__error__background-color)!important}div.wrapper{border:none;position:relative;height:var(--inputfield__default__height);cursor:pointer}div.wrapper:focus,div.wrapper:hover{outline:0}div.wrapper .select{width:100%;position:relative;display:block;border-bottom:1px solid var(--dropdown__default__border-bottom-color);padding-left:var(--dropdown__default__padding-left);padding-right:var(--dropdown__default__padding-right);box-sizing:border-box;background-color:var(--dropdown__default__background-color)}div.wrapper .select:hover{border-bottom-color:var(--dropdown__focus__border-bottom-color)}::ng-deep .reversed div.wrapper .select{background-color:var(--dropdown__reversed__background-color)!important}div.wrapper .select span{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;height:var(--inputfield__default__height);width:100%;min-width:100%;line-height:var(--inputfield__default__height);font-size:var(--dropdown__default__font-size);font-family:Arial;color:var(--inputfield__default__color)}div.wrapper .select span.placeholder{color:var(--dropdown__placeholder__color)}div.wrapper .select span::after{content:'\\e92f';font-family:iwp;position:absolute;right:calc(var(--dropdown__arrow__line-height)/ 2 - var(--dropdown__arrow__font-size)/ 2 + var(--dropdown__arrow__padding-right));font-size:var(--dropdown__arrow__font-size);line-height:var(--dropdown__arrow__line-height);top:calc(50% - var(--dropdown__arrow__line-height)/ 2 - 1px)}div.wrapper .select.open span::after{content:'\\e932'}:host{position:relative}:host ::ng-deep label{cursor:inherit}div.dropdown-menu{display:none;position:absolute;z-index:var(--dropdown__menu__z-index);overflow-y:auto;width:calc(100% - 2px);max-height:calc(5.66 * (var(--inputfield__default__height)));border:solid 1px var(--dropdown__dropdown-menu__border-color);border-top:none;top:calc(var(--inputfield__default__height) + 1px)}div.dropdown-menu.open{display:block}.show-error :host.ng-invalid.ng-dirty div.wrapper .select{border-bottom:1px solid var(--dropdown__error__color);background-color:var(--dropdown__error__background-color)!important}"]
        })
    ], DropdownComponent);
    return DropdownComponent;
}());
export { DropdownComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiZHJvcGRvd24vZHJvcGRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLE1BQU0sRUFDTixTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFjekU7SUFvREUsMkJBQW9CLEdBQWU7UUFBZixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBbkNuQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFdEMsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUtmLGlDQUFpQztRQUNoQixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUN4QyxjQUFTLEdBQXlCLGNBQU8sQ0FBQyxDQUFDO1FBQzNDLGVBQVUsR0FBYyxjQUFPLENBQUMsQ0FBQztJQXlCSCxDQUFDOzBCQXBENUIsaUJBQWlCO0lBNkI1QixzQkFBSSxvQ0FBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7YUFHRCxVQUFVLFFBQWE7WUFEdkIsaUJBaUJDO1lBZkMsSUFBSSxRQUFRLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDNUIsSUFBSSxDQUFD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LEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7SUFFRCxzQ0FBVSxHQUFWLFVBQVcsS0FBVTtRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDOzs7Z0JBdEt3QixVQUFVOztJQTlDbkM7UUFEQyxlQUFlLENBQUMscUJBQXFCLENBQUM7cUVBQ2tCO0lBRXpEO1FBREMsS0FBSyxFQUFFO3VEQUNVO0lBRWxCO1FBREMsS0FBSyxFQUFFO3VEQUNVO0lBRWxCO1FBREMsS0FBSyxFQUFFO29EQUNPO0lBR2Y7UUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3RCLEtBQUssRUFBRTtpREFDRztJQUVYO1FBREMsTUFBTSxFQUFFOzBEQUM2QjtJQWlCdEM7UUFEQyxLQUFLLEVBQUU7a0RBaUJQO0lBcUNEO1FBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3NEQXVCbkM7SUFHRDtRQURDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDOzJEQUtqRDtJQXBIVSxpQkFBaUI7UUFaN0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIsNjRCQUF3QztZQUV4QyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsS0FBSyxFQUFFLElBQUk7b0JBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsbUJBQWlCLEVBQWpCLENBQWlCLENBQUM7aUJBQ2pEO2FBQ0Y7O1NBQ0YsQ0FBQztPQUNXLGlCQUFpQixDQTJON0I7SUFBRCx3QkFBQztDQUFBLEFBM05ELElBMk5DO1NBM05ZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIEVsZW1lbnRSZWYsXG4gIGlzRGV2TW9kZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERyb3Bkb3duSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vZHJvcGRvd24taXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdibXctZHJvcGRvd24nLFxuICB0ZW1wbGF0ZVVybDogJy4vZHJvcGRvd24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9kcm9wZG93bi5jb21wb25lbnQubGVzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRHJvcGRvd25Db21wb25lbnQpXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIERyb3Bkb3duQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgLy8gcmVmZXJlbmNlIHRvIHRoZSBzZWxlY3RlZCBkcm9wZG93bi1pdGVtXG4gIC8vIHVzZWQgdG8gc2hvdyB0aGUgY29ycmVjdCBsYWJlbCB3aGVuIGEgcmVzZXQgb3B0aW9uIGlzIHVzZWRcbiAgc2VsZWN0ZWRJdGVtOiBEcm9wZG93bkl0ZW1Db21wb25lbnQ7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihEcm9wZG93bkl0ZW1Db21wb25lbnQpXG4gIGNoaWxkRHJvcGRvd25NZW51SXRlbXM6IFF1ZXJ5TGlzdDxEcm9wZG93bkl0ZW1Db21wb25lbnQ+O1xuICBASW5wdXQoKVxuICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgQElucHV0KClcbiAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpXG4gIHZhbGlkOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICBASW5wdXQoKVxuICBpZDogc3RyaW5nO1xuICBAT3V0cHV0KClcbiAgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgaXNWYWxpZDogYm9vbGVhbjtcbiAgb3BlbmVkID0gZmFsc2U7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGdyaWRDbGFzc2VzOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSBfdmFsdWU6IGFueTtcbiAgcHJpdmF0ZSBfaG92ZXJlZDogbnVtYmVyO1xuICAvLyB0aGlzIGlzIGVtaXR0ZWQgaW4gbmdPbkRlc3Ryb3lcbiAgcHJpdmF0ZSByZWFkb25seSBfZGVzdHJveSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgX29uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZCA9ICgpID0+IHt9O1xuICBwcml2YXRlIF9vblRvdWNoZWQ6ICgpID0+IGFueSA9ICgpID0+IHt9O1xuXG4gIGdldCB2YWx1ZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCB2YWx1ZShuZXdWYWx1ZTogYW55KSB7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSB0aGlzLl92YWx1ZSkge1xuICAgICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuX29uQ2hhbmdlKG5ld1ZhbHVlKTtcbiAgICAgIGlmICh0aGlzLmNoaWxkRHJvcGRvd25NZW51SXRlbXMpIHtcbiAgICAgICAgdGhpcy5jaGlsZERyb3Bkb3duTWVudUl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBpdGVtLnZhbHVlKSB7XG4gICAgICAgICAgICBpdGVtLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBpdGVtLmxhYmVsO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZyAtIDxibXctZHJvcGRvd24+IGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlLicpO1xuICAgICAgY29uc29sZS53YXJuKCdQbGVhc2UgdXNlIDxibXctY29tYm9ib3g+IGluc3RlYWQgaHR0cHM6Ly9kZXNpZ25zeXN0ZW0uYm13Z3JvdXAubmV0L2NvbXBvbmVudHMvZm9ybS1jb21iby1ib3gnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gZG8gdGhpcyBpbiB0aGUgbmV4dCBjeWNsZSB0byBhdm9pZCBpc3N1ZXMgd2l0aCBkeW5hbWljIGNvbXBvbmVudCBjcmVhdGlvblxuICAgIC8vIFRPRE8gcmVmYWN0b3IgdGhpcyBoYWNrOiBjYWxsIGNoYW5nZSBkZXRlY3Rpb24gd2hlbiBuZWVkZWRcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX3ByZXBhcmVJdGVtcygpO1xuICAgICAgdGhpcy5fdmFsaWRhdGUoKTtcblxuICAgICAgdGhpcy5jaGlsZERyb3Bkb3duTWVudUl0ZW1zLmNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuX3ByZXBhcmVJdGVtcygpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9zZXRHcmlkQ2xhc3NlcygpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fZGVzdHJveS5uZXh0KCk7XG4gICAgdGhpcy5fZGVzdHJveS5jb21wbGV0ZSgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uS2V5ZG93bihldmVudCkge1xuICAgIGNvbnN0IGtleU5hbWUgPSBldmVudC5rZXk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoa2V5TmFtZS5zbGljZSgtNCkgPT09ICdEb3duJykge1xuICAgICAgdGhpcy50b2dnbGUodHJ1ZSk7XG4gICAgICBpZiAodGhpcy5faG92ZXJlZCA9PT0gdGhpcy5jaGlsZERyb3Bkb3duTWVudUl0ZW1zLmxlbmd0aCAtIDEpIHJldHVybjtcbiAgICAgIHR5cGVvZiB0aGlzLl9ob3ZlcmVkICE9PSAndW5kZWZpbmVkJyA/IHRoaXMuX2hvdmVyZWQrKyA6ICh0aGlzLl9ob3ZlcmVkID0gMCk7XG4gICAgICB0aGlzLl9ob3Zlcih0aGlzLl9ob3ZlcmVkKTtcbiAgICB9IGVsc2UgaWYgKGtleU5hbWUuc2xpY2UoLTIpID09PSAnVXAnKSB7XG4gICAgICB0aGlzLnRvZ2dsZSh0cnVlKTtcbiAgICAgIGlmICh0aGlzLl9ob3ZlcmVkID09PSAwKSByZXR1cm47XG4gICAgICB0eXBlb2YgdGhpcy5faG92ZXJlZCAhPT0gJ3VuZGVmaW5lZCcgPyB0aGlzLl9ob3ZlcmVkLS0gOiAodGhpcy5faG92ZXJlZCA9IHRoaXMuY2hpbGREcm9wZG93bk1lbnVJdGVtcy5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMuX2hvdmVyKHRoaXMuX2hvdmVyZWQpO1xuICAgIH0gZWxzZSBpZiAoa2V5TmFtZSA9PT0gJ0VudGVyJykge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY2hpbGREcm9wZG93bk1lbnVJdGVtc1t0aGlzLl9ob3ZlcmVkXTtcbiAgICAgIGlmICghaXRlbS5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLl9zZWxlY3QoaXRlbS52YWx1ZSk7XG4gICAgICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleU5hbWUuc2xpY2UoMCwgMykgPT09ICdFc2MnKSB7XG4gICAgICB0aGlzLnRvZ2dsZShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudC50YXJnZXQnXSlcbiAgb25DbGlja091dHNpZGUoJGUpIHtcbiAgICBpZiAoJGUgJiYgIXRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoJGUpKSB7XG4gICAgICB0aGlzLnRvZ2dsZShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcHJlcGFyZUl0ZW1zKCkge1xuICAgIHRoaXMuY2hpbGREcm9wZG93bk1lbnVJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKHRoaXMuX3ZhbHVlID09PSBpdGVtLnZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdChpdGVtLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW0uY2xpY2tlZC5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGl0ZW0uY2xpY2tlZC5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95KSkuc3Vic2NyaWJlKHNlbGVjdGVkSXRlbSA9PiB7XG4gICAgICAgIHRoaXMuX3NlbGVjdChzZWxlY3RlZEl0ZW0udmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjbGljayhldmVudDogTW91c2VFdmVudCkge1xuICAgIHRoaXMudG9nZ2xlKCk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMuX29uVG91Y2hlZCgpO1xuICB9XG5cbiAgdG9nZ2xlKHN0YXRlPzogYm9vbGVhbikge1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9wZW5lZCA9IHN0YXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZW5lZCA9ICF0aGlzLm9wZW5lZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF92YWxpZGF0ZSgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsaWQgIT09ICd1bmRlZmluZWQnICYmIHRoaXMudmFsaWQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuaXNWYWxpZCA9IHRoaXMudmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnZhbGlkID0gQXJyYXkuZnJvbSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdCkuaW5jbHVkZXMoJ25nLWludmFsaWQnKTtcblxuICAgICAgICB0aGlzLmlzVmFsaWQgPSAodGhpcy5yZXF1aXJlZCAhPT0gdHJ1ZSB8fCB0aGlzLl92YWx1ZSkgJiYgIWludmFsaWQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9zZWxlY3QodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmNoaWxkRHJvcGRvd25NZW51SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICBpdGVtLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gaXRlbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodmFsdWUpO1xuICAgIHRoaXMuX3ZhbGlkYXRlKCk7XG4gIH1cblxuICBwcml2YXRlIF9ob3ZlcihzZWxlY3RlZEl0ZW1JbmRleCkge1xuICAgIHRoaXMuY2hpbGREcm9wZG93bk1lbnVJdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSBzZWxlY3RlZEl0ZW1JbmRleCkge1xuICAgICAgICBpdGVtLmtleWJvYXJkRm9jdXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5rZXlib2FyZEZvY3VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9zZXRHcmlkQ2xhc3NlcygpIHtcbiAgICBjb25zdCBsaXN0T2ZDbGFzc2VzID0gQXJyYXkuZnJvbSgodGhpcy5fZWwubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0KTtcbiAgICB0aGlzLmdyaWRDbGFzc2VzID0gbGlzdE9mQ2xhc3Nlcy5maWx0ZXIoKGl0ZW06IHN0cmluZykgPT4gaXRlbS5tYXRjaCgvYm13X19ncmlkX19jZWxsLS0uKi8pKTtcbiAgICBpZiAodGhpcy5ncmlkQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHdyYXBwZXJDbGFzc0xpc3QgPSB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5kcm9wZG93bi1vdXRlci13cmFwcGVyJykuY2xhc3NMaXN0O1xuICAgICAgd3JhcHBlckNsYXNzTGlzdC52YWx1ZS5zcGxpdCgnICcpLmZvckVhY2goKGNsYXNzTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChjbGFzc05hbWUubWF0Y2goL2Jtd19fZ3JpZF9fY2VsbC0tLiovKSkge1xuICAgICAgICAgIHdyYXBwZXJDbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5ncmlkQ2xhc3Nlcy5mb3JFYWNoKChjbGFzc05hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5kcm9wZG93bi1vdXRlci13cmFwcGVyJykuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG4iXX0=