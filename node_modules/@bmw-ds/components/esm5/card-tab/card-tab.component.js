import { __decorate } from "tslib";
import { Component, OnInit, ElementRef, ContentChildren, QueryList, AfterViewInit, EventEmitter } from '@angular/core';
import { CardTabLabelComponent } from './card-tab-label.component';
var CardTabComponent = /** @class */ (function () {
    function CardTabComponent(elementRef) {
        this.elementRef = elementRef;
    }
    CardTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.warn('Beware, this component is not prepared for production usage!');
        this.hiddenLabels = this.elementRef.nativeElement.querySelector('.three-dots');
        this.hiddenLabels.addEventListener('focusout', function (e) {
            var leavingParent = !_this.hiddenLabels.contains(e.relatedTarget);
            if (leavingParent) {
                _this.toggleHiddenLabels(false);
            }
        });
        this.enableKeyboardControl();
        this.setResizeTrigger();
        setTimeout(function () {
            _this.hideLabelsIfNecessary();
        }, 10);
    };
    CardTabComponent.prototype.ngAfterViewInit = function () {
        this.prepareLabels();
    };
    CardTabComponent.prototype.prepareLabels = function () {
        var _this = this;
        this.articles = this.elementRef.nativeElement.querySelectorAll('bmw-card-tab-content');
        this.labels.toArray().forEach(function (labelElement, i) {
            var label = labelElement.elementRef.nativeElement.querySelector('label');
            var closeEmitter = new EventEmitter();
            closeEmitter.emit = function (closeId) {
                _this.remove(closeId);
            };
            var clickEmitter = new EventEmitter();
            clickEmitter.emit = function (clickId) {
                _this.setSelected(clickId);
                _this.toggleHiddenLabels(false);
            };
            labelElement.emitClose = closeEmitter;
            labelElement.emitClick = clickEmitter;
            label.dataset.order = i;
            var id = labelElement.for;
            if (typeof labelElement.selected !== 'undefined') {
                _this.setSelected(id);
            }
        });
        if (!this.selected && this.labels.toArray()[0]) {
            Promise.resolve().then(function () {
                _this.setSelected(_this.labels.toArray()[0].for);
            });
        }
    };
    CardTabComponent.prototype.setResizeTrigger = function () {
        var _this = this;
        var resizeTimer;
        window.addEventListener('resize', function () {
            clearTimeout(resizeTimer);
            var that = _this;
            resizeTimer = setTimeout(function () {
                that.hideLabelsIfNecessary(true);
            }, 10);
        });
    };
    CardTabComponent.prototype.setSelected = function (selected) {
        var _this = this;
        this.selected = selected;
        this.labels.toArray().forEach(function (labelElement, i) {
            var id = labelElement.for;
            if (selected === id) {
                labelElement.selected = true;
            }
            else {
                labelElement.selected = false;
            }
        });
        for (var i = 0; i < this.articles.length; i++) {
            var id = this.articles[i].getAttribute('id');
            if (selected === id) {
                this.articles[i].classList.add('selected');
            }
            else {
                this.articles[i].classList.remove('selected');
            }
        }
        setTimeout(function () {
            _this.hideLabelsIfNecessary(true);
        });
    };
    CardTabComponent.prototype.remove = function (removedId) {
        this.labels['_results'].forEach(function (labelElement, i) {
            var id = labelElement.for;
            if (removedId === id) {
                labelElement.destroy();
            }
        });
        for (var i = 0; i < this.articles.length; i++) {
            var id = this.articles[i].getAttribute('id');
            if (removedId === id) {
                this.articles[i].parentElement.removeChild(this.articles[i]);
            }
        }
        if (this.selected === removedId && this.labels.toArray().filter(function (e) { return e.destroyed === false; }).length > 0) {
            this.setSelected(this.labels.toArray().filter(function (e) { return e.destroyed === false; })[0].for);
        }
        this.hideLabelsIfNecessary(true);
    };
    CardTabComponent.prototype.enableKeyboardControl = function () {
        var _this = this;
        this.elementRef.nativeElement.querySelector('.labels').addEventListener('keydown', function (event) {
            event.preventDefault();
            var keyName = event.key;
            if (keyName.slice(-5) === 'Right') {
                for (var i = 0; i < _this.labels.length - 1; i++) {
                    var id = _this.labels[i].getAttribute('for');
                    if (id === _this.selected && _this.labels[i + 1].getAttribute('disabled') === null) {
                        _this.setSelected(_this.labels[i + 1].getAttribute('for'));
                        if (_this.labels[i + 1].parentElement.classList.contains('menu')) {
                            _this.toggleHiddenLabels(true);
                        }
                        break;
                    }
                }
            }
            if (keyName.slice(-4) === 'Left') {
                for (var i = 1; i < _this.labels.length; i++) {
                    var id = _this.labels[i].getAttribute('for');
                    if (id === _this.selected && _this.labels[i - 1].getAttribute('disabled') === null) {
                        _this.setSelected(_this.labels[i - 1].getAttribute('for'));
                        if (_this.labels[i - 1].parentElement.classList.contains('menu')) {
                            _this.toggleHiddenLabels(true);
                        }
                        break;
                    }
                }
            }
            if (keyName.slice(0, 3) === 'Esc' || keyName === 'Enter') {
                _this.toggleHiddenLabels(false);
                _this.hideLabelsIfNecessary(true);
            }
        });
    };
    CardTabComponent.prototype.hideLabelsIfNecessary = function (showAllFirst) {
        var labelsDiv = this.elementRef.nativeElement.querySelector('div.labels');
        if (showAllFirst) {
            this.showAllLabels(labelsDiv);
        }
        var height = labelsDiv.offsetHeight;
        var defaultHeight = this.elementRef.nativeElement.querySelector('.labels .height-limiter').offsetHeight;
        if (height > defaultHeight) {
            this.createHiddenLabelsMenuElement();
            var id = this.hideLastNonActiveLabel(labelsDiv);
            if (id > 0) {
                this.hideLabelsIfNecessary();
            }
        }
    };
    CardTabComponent.prototype.showAllLabels = function (parentElement) {
        if (!this.hiddenLabelsMenu)
            return;
        var length = this.hiddenLabelsMenu.children.length;
        for (var i = 0; i < length; i++) {
            parentElement.append(this.hiddenLabelsMenu.children[0]);
        }
        this.hiddenLabels.removeChild(this.hiddenLabelsMenu);
        this.hiddenLabelsMenu = undefined;
        this.sort(parentElement);
    };
    CardTabComponent.prototype.sort = function (parentElement) {
        var array = parentElement.children;
        array = Array.from(array).sort(function (a, b) {
            if (!a.querySelector('label'))
                return -1;
            if (!b.querySelector('label'))
                return 1;
            return a.querySelector('label').dataset.order - b.querySelector('label').dataset.order;
        });
        for (var i = 0; i < array.length; i++) {
            parentElement.append(array[i]);
        }
    };
    CardTabComponent.prototype.hideLastNonActiveLabel = function (parentElement) {
        var lastID = parentElement.querySelectorAll('.labels > bmw-card-tab-label').length - 1;
        var lastChild = parentElement.querySelectorAll('.labels > bmw-card-tab-label')[lastID];
        if (lastChild.querySelector('.selected') !== null) {
            lastID--;
            lastChild = parentElement.querySelectorAll('.labels > bmw-card-tab-label')[lastID];
        }
        if (lastChild.classList.contains('height-limiter') || lastChild.classList.contains('three-dots')) {
            return -1;
        }
        this.hiddenLabelsMenu.prepend(lastChild);
        return lastID;
    };
    CardTabComponent.prototype.createHiddenLabelsMenuElement = function () {
        if (this.hiddenLabelsMenu)
            return;
        this.hiddenLabelsMenu = document.createElement('div');
        this.hiddenLabelsMenu.classList.add('menu');
        this.hiddenLabels.append(this.hiddenLabelsMenu);
    };
    CardTabComponent.prototype.toggleHiddenLabels = function (state) {
        if (!this.hiddenLabels)
            return;
        var opened = this.hiddenLabels.classList.contains('opened');
        if (this.hiddenLabelsMenu && (state === true || opened === false)) {
            var rectangle = this.hiddenLabels.getBoundingClientRect();
            var position = rectangle.x + rectangle.width - 2;
            this.hiddenLabelsMenu.style['max-width'] = position + 'px';
        }
        if (state === true) {
            this.hiddenLabels.classList.add('opened');
        }
        else if (state === false) {
            this.hiddenLabels.classList.remove('opened');
        }
        else if (opened) {
            this.hiddenLabels.classList.remove('opened');
        }
        else {
            this.hiddenLabels.classList.add('opened');
        }
    };
    CardTabComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        ContentChildren(CardTabLabelComponent)
    ], CardTabComponent.prototype, "labels", void 0);
    CardTabComponent = __decorate([
        Component({
            selector: 'bmw-card-tab',
            template: "<div class=\"wrapper\">\n  <div class=\"labels\" tabindex=\"0\">\n    <div class=\"three-dots\" (click)=\"toggleHiddenLabels()\" tabindex=\"0\"></div>\n    <div class=\"height-limiter\"></div>\n    <ng-content select=\"bmw-card-tab-label\"></ng-content>\n  </div>\n  <ng-content select=\"bmw-card-tab-content\"></ng-content>\n</div>\n",
            styles: [".three-dots{position:absolute;bottom:0;right:0;display:inline-block;order:2;box-sizing:card-box;height:var(--card-tabs__label__default__height)}.three-dots:empty{display:none}.three-dots:focus{outline:0;background-color:var(--card-tabs__more-dots__selected__background-color)}.three-dots .menu{display:none;position:absolute;background-color:var(--card-tabs__more-dots__menu__background-color);top:100%;right:0;z-index:var(--card-tabs__menu__z-index);border:solid 2px var(--card-tabs__more-dots__menu__border-color)}.three-dots .menu ::ng-deep bmw-card-tab-label{display:block;max-width:100%}.three-dots.opened .menu{display:inline-block}.three-dots::after{display:inline-block;line-height:var(--card-tabs__label__icon__font-size);font-size:var(--card-tabs__label__icon__font-size);padding:var(--card-tabs__label__icon__padding);padding-bottom:calc(var(--card-tabs__label__icon__padding) - 2px);font-family:iwp;color:var(--card-tabs__labels__default__color);content:'\\ea22'}.labels{padding-right:var(--card-tabs__label__default__height);position:relative;display:flex;flex:1 0 auto;flex-wrap:wrap}.labels:focus{outline:0}.labels .height-limiter{position:absolute;width:100%;z-index:-9;left:0;top:0;height:calc(var(--card-tabs__label__default__height) + 2px);box-sizing:border-box}.wrapper{min-width:calc(100px + var(--card-tabs__label__default__height))}"]
        })
    ], CardTabComponent);
    return CardTabComponent;
}());
export { CardTabComponent };
//# sourceMappingURL=data:application/json;base64,