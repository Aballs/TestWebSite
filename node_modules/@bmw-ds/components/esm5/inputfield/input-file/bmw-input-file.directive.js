import { __decorate, __param } from "tslib";
import { Directive, Renderer2, ElementRef, AfterViewInit, HostListener, OnChanges, Input, Injector, SimpleChanges, Optional } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NgControl, FormControl } from '@angular/forms';
var BmwInputFileDirective = /** @class */ (function () {
    function BmwInputFileDirective(injector, _renderer, _el, control) {
        this.injector = injector;
        this._renderer = _renderer;
        this._el = _el;
        this.control = control;
        this.destroy$ = new Subject();
        this.btnLabel = 'Browse';
    }
    BmwInputFileDirective.prototype.onMouseOver = function () {
        this._renderer.addClass(this.browseBtn, 'active');
    };
    BmwInputFileDirective.prototype.onMouseLeave = function () {
        this._renderer.removeClass(this.browseBtn, 'active');
    };
    BmwInputFileDirective.prototype.onChange = function () {
        if (this._el.nativeElement.files.length) {
            var fileName = this._el.nativeElement.files[0].name;
            this._renderer.setAttribute(this.visibleInput, 'value', fileName);
        }
        else {
            this._renderer.setAttribute(this.visibleInput, 'value', '');
        }
        this.checkForRequired();
    };
    BmwInputFileDirective.prototype.checkForRequired = function () {
        var _this = this;
        setTimeout(function () {
            var classList = _this._el.nativeElement.classList;
            if (_this._el.nativeElement.required && classList.contains('ng-invalid') && classList.contains('ng-touched')) {
                _this.visibleInput.classList.add('ng-invalid');
                _this.visibleInput.classList.add('ng-touched');
            }
            else {
                _this.visibleInput.classList.remove('ng-invalid');
                _this.visibleInput.classList.remove('ng-touched');
            }
        }, 0);
    };
    BmwInputFileDirective.prototype._getInputGridClass = function (el) {
        return el.classList.value.split(' ').find(function (className) { return className.includes('bmw__grid__cell'); });
    };
    BmwInputFileDirective.prototype.ngOnChanges = function (changes) {
        if (this.visibleInput && this.browseBtn) {
            this.checkForRequired();
            if (changes.btnLabel) {
                this.updateButtonLabel();
            }
        }
    };
    BmwInputFileDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this._el.nativeElement.nextElementSibling)
            return;
        var gridClass = this._getInputGridClass(this._el.nativeElement);
        this._renderer.addClass(this._el.nativeElement.nextElementSibling, gridClass);
        this.browseBtn = this._el.nativeElement.nextElementSibling.querySelector('button');
        this.visibleInput = this._el.nativeElement.nextElementSibling.querySelector('input');
        if (this._el.nativeElement.attributes['aria-label']) {
            this.visibleInput.setAttribute('aria-label', this._el.nativeElement.attributes['aria-label'].value);
        }
        var clickOnButton$ = fromEvent(this.browseBtn, 'click').pipe(takeUntil(this.destroy$));
        var clickOnInput$ = fromEvent(this.visibleInput, 'click').pipe(takeUntil(this.destroy$));
        var keydownOnInput$ = fromEvent(this.visibleInput, 'keydown').pipe(takeUntil(this.destroy$));
        var ngControl = this.injector.get(NgControl, null);
        if (ngControl) {
            this.inputControl = ngControl.control;
        }
        clickOnButton$.subscribe(function () {
            var _a;
            _this._el.nativeElement.click();
            (_a = _this.inputControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
        });
        clickOnInput$.subscribe(function () {
            var _a;
            _this._el.nativeElement.click();
            (_a = _this.inputControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
        });
        keydownOnInput$.subscribe(function (event) {
            var _a;
            if (event.code === 'Space' || event.keyCode === 32) {
                _this._el.nativeElement.click();
                (_a = _this.inputControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
            }
        });
        if (this.control) {
            this.control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(function (value) {
                if (!value) {
                    _this.onChange();
                }
            });
        }
        this.checkForRequired();
        this.updateButtonLabel();
    };
    BmwInputFileDirective.prototype.updateButtonLabel = function () {
        this.browseBtn.querySelector('div').innerText = this.btnLabel;
    };
    BmwInputFileDirective.prototype.destroy = function () {
        this.destroy$.next();
    };
    BmwInputFileDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], BmwInputFileDirective.prototype, "btnLabel", void 0);
    __decorate([
        HostListener('mouseover')
    ], BmwInputFileDirective.prototype, "onMouseOver", null);
    __decorate([
        HostListener('mouseleave')
    ], BmwInputFileDirective.prototype, "onMouseLeave", null);
    __decorate([
        HostListener('change')
    ], BmwInputFileDirective.prototype, "onChange", null);
    BmwInputFileDirective = __decorate([
        Directive({
            selector: 'input[bmwInputFile]'
        }),
        __param(3, Optional())
    ], BmwInputFileDirective);
    return BmwInputFileDirective;
}());
export { BmwInputFileDirective };
//# sourceMappingURL=data:application/json;base64,