import { __decorate, __param } from "tslib";
import { InputfieldComponent } from './inputfield.component';
import { BaseInput } from './base-input';
import { Directive, HostBinding, Input, ElementRef, AfterViewInit, Output, EventEmitter, Host, Optional } from '@angular/core';
var SUPPORTED_TYPES = ['text', 'file', 'number', 'password'];
var BmwInputDirective = /** @class */ (function () {
    function BmwInputDirective(_el, _inputField) {
        this._el = _el;
        this._inputField = _inputField;
        this.classBmwInput = true;
        this._type = 'text';
        this.disableToggle = new EventEmitter();
    }
    BmwInputDirective_1 = BmwInputDirective;
    Object.defineProperty(BmwInputDirective.prototype, "isDisabled", {
        // when we bind to attr.disabled we need to set it to 'disabled'
        // or remove it with null because disabled="false" is not the right way
        // to enable the input again, especially the :disabled pseudo selector in css
        // would still be in effect
        get: function () {
            return this.disabled ? 'disabled' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BmwInputDirective.prototype, "disabled", {
        get: function () {
            return this._inputField && this._inputField.disabled ? true : this._disabled;
        },
        set: function (value) {
            this._disabled = value;
            this.disableToggle.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BmwInputDirective.prototype, "withIcon", {
        set: function (value) {
            if (value) {
                this._el.nativeElement.classList.add('with-icon');
            }
            else {
                this._el.nativeElement.classList.remove('with-icon');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BmwInputDirective.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BmwInputDirective.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            if (SUPPORTED_TYPES.indexOf(value) === -1) {
                throw new Error("Invalid or unsupported type: " + value);
            }
            this._type = value;
        },
        enumerable: true,
        configurable: true
    });
    BmwInputDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var list = Array.from(this._el.nativeElement.classList);
        this.placeholder = this._el.nativeElement.placeholder;
        Promise.resolve().then(function () {
            _this.classes = list
                .map(function (item) {
                if (item.match(/bmw__grid__cell.*/)) {
                    return item;
                }
                return null;
            })
                .filter(function (item) { return item; });
        });
    };
    var BmwInputDirective_1;
    BmwInputDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: InputfieldComponent, decorators: [{ type: Optional }, { type: Host }] }
    ]; };
    __decorate([
        HostBinding('class.bmw-input')
    ], BmwInputDirective.prototype, "classBmwInput", void 0);
    __decorate([
        HostBinding('attr.disabled')
    ], BmwInputDirective.prototype, "isDisabled", null);
    __decorate([
        Input()
    ], BmwInputDirective.prototype, "disabled", null);
    __decorate([
        HostBinding('tabindex')
    ], BmwInputDirective.prototype, "tabIndex", void 0);
    __decorate([
        Output()
    ], BmwInputDirective.prototype, "disableToggle", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], BmwInputDirective.prototype, "id", null);
    __decorate([
        Input()
    ], BmwInputDirective.prototype, "type", null);
    BmwInputDirective = BmwInputDirective_1 = __decorate([
        Directive({
            selector: 'input[bmwInput], textarea[bmwInput]',
            providers: [
                {
                    provide: BaseInput,
                    useExisting: BmwInputDirective_1
                }
            ]
        }),
        __param(1, Optional()), __param(1, Host())
    ], BmwInputDirective);
    return BmwInputDirective;
}());
export { BmwInputDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm13LWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BibXctZHMvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImlucHV0ZmllbGQvYm13LWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsVUFBVSxFQUNWLGFBQWEsRUFDYixNQUFNLEVBQ04sWUFBWSxFQUNaLElBQUksRUFDSixRQUFRLEVBQ1QsTUFBTSxlQUFlLENBQUM7QUFFdkIsSUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQVcvRDtJQUlFLDJCQUFvQixHQUFlLEVBQThCLFdBQWdDO1FBQTdFLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFBOEIsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO1FBR2pHLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBd0JYLFVBQUssR0FBRyxNQUFNLENBQUM7UUFlekIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0lBMUN3RCxDQUFDOzBCQUoxRixpQkFBaUI7SUFjNUIsc0JBQUkseUNBQVU7UUFMZCxnRUFBZ0U7UUFDaEUsdUVBQXVFO1FBQ3ZFLDZFQUE2RTtRQUM3RSwyQkFBMkI7YUFFM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNDLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksdUNBQVE7YUFJWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxD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aUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXRmaWVsZENvbXBvbmVudCB9IGZyb20gJy4vaW5wdXRmaWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmFzZUlucHV0IH0gZnJvbSAnLi9iYXNlLWlucHV0JztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBFbGVtZW50UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdCxcbiAgT3B0aW9uYWxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IFNVUFBPUlRFRF9UWVBFUyA9IFsndGV4dCcsICdmaWxlJywgJ251bWJlcicsICdwYXNzd29yZCddO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtibXdJbnB1dF0sIHRleHRhcmVhW2Jtd0lucHV0XScsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEJhc2VJbnB1dCxcbiAgICAgIHVzZUV4aXN0aW5nOiBCbXdJbnB1dERpcmVjdGl2ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBCbXdJbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEJhc2VJbnB1dCB7XG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuO1xuICBwdWJsaWMgY2xhc3Nlczogc3RyaW5nW107XG4gIHB1YmxpYyBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZiwgQE9wdGlvbmFsKCkgQEhvc3QoKSBwcml2YXRlIF9pbnB1dEZpZWxkOiBJbnB1dGZpZWxkQ29tcG9uZW50KSB7fVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYm13LWlucHV0JylcbiAgY2xhc3NCbXdJbnB1dCA9IHRydWU7XG5cbiAgLy8gd2hlbiB3ZSBiaW5kIHRvIGF0dHIuZGlzYWJsZWQgd2UgbmVlZCB0byBzZXQgaXQgdG8gJ2Rpc2FibGVkJ1xuICAvLyBvciByZW1vdmUgaXQgd2l0aCBudWxsIGJlY2F1c2UgZGlzYWJsZWQ9XCJmYWxzZVwiIGlzIG5vdCB0aGUgcmlnaHQgd2F5XG4gIC8vIHRvIGVuYWJsZSB0aGUgaW5wdXQgYWdhaW4sIGVzcGVjaWFsbHkgdGhlIDpkaXNhYmxlZCBwc2V1ZG8gc2VsZWN0b3IgaW4gY3NzXG4gIC8vIHdvdWxkIHN0aWxsIGJlIGluIGVmZmVjdFxuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGlzYWJsZWQnKVxuICBnZXQgaXNEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiBudWxsO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICB0aGlzLmRpc2FibGVUb2dnbGUuZW1pdCh2YWx1ZSk7XG4gIH1cbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnB1dEZpZWxkICYmIHRoaXMuX2lucHV0RmllbGQuZGlzYWJsZWQgPyB0cnVlIDogdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ3RhYmluZGV4JylcbiAgdGFiSW5kZXg6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgX2lkOiBzdHJpbmc7XG4gIHByb3RlY3RlZCBfdHlwZSA9ICd0ZXh0JztcblxuICBzZXQgd2l0aEljb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnd2l0aC1pY29uJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnd2l0aC1pY29uJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIEBPdXRwdXQoKVxuICBkaXNhYmxlVG9nZ2xlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gIEBJbnB1dCgpXG4gIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHR5cGUodmFsdWU6IHN0cmluZykge1xuICAgIGlmIChTVVBQT1JURURfVFlQRVMuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3IgdW5zdXBwb3J0ZWQgdHlwZTogJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgdGhpcy5fdHlwZSA9IHZhbHVlO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IGxpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0KTtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlcjtcblxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jbGFzc2VzID0gbGlzdFxuICAgICAgICAubWFwKChpdGVtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAoaXRlbS5tYXRjaCgvYm13X19ncmlkX19jZWxsLiovKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==