import { __decorate } from "tslib";
import { Directive, ElementRef, AfterViewInit, Renderer2, OnDestroy, HostListener, HostBinding } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var BmwInputStepperDirective = /** @class */ (function () {
    function BmwInputStepperDirective(_el, _renderer) {
        this._el = _el;
        this._renderer = _renderer;
        this.destroy$ = new Subject();
    }
    BmwInputStepperDirective.prototype.onKeyDown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowDown':
            case 40:
                this.stepDown();
                event.preventDefault();
                break;
            case 'ArrowUp':
            case 38:
                this.stepUp();
                event.preventDefault();
                break;
        }
    };
    BmwInputStepperDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var parent = this._renderer.parentNode(this._el.nativeElement);
        this.increaseBtn = this._createButton('increase');
        this.increaseListener = this._renderer.listen(this.increaseBtn, 'click', this.stepUp.bind(this));
        var keydownOnIncreaseButton$ = fromEvent(this.increaseBtn, 'keydown').pipe(takeUntil(this.destroy$));
        this.decreaseBtn = this._createButton('decrease');
        this.decreaseListener = this._renderer.listen(this.decreaseBtn, 'click', this.stepDown.bind(this));
        var keydownOnDecreaseButton$ = fromEvent(this.decreaseBtn, 'keydown').pipe(takeUntil(this.destroy$));
        keydownOnIncreaseButton$.subscribe(function (event) {
            if (event.code === 'Enter' || event.keyCode === 13) {
                _this.stepUp();
                event.preventDefault();
            }
        });
        keydownOnDecreaseButton$.subscribe(function (event) {
            if (event.code === 'Enter' || event.keyCode === 13) {
                _this.stepDown();
                event.preventDefault();
            }
        });
        var container = this._createContainer();
        this._renderer.appendChild(container, this.increaseBtn);
        this._renderer.appendChild(container, this.decreaseBtn);
        this._renderer.appendChild(parent, container);
    };
    BmwInputStepperDirective.prototype._createContainer = function () {
        var container = this._renderer.createElement('div');
        this._renderer.addClass(container, 'stepper-controls');
        return container;
    };
    BmwInputStepperDirective.prototype._createButton = function (btnName) {
        var spanElement = this._renderer.createElement('span');
        this._renderer.addClass(spanElement, 'stepper-button');
        this._renderer.setAttribute(spanElement, 'tabindex', this._el.nativeElement.disabled ? '-1' : '0');
        this._renderer.addClass(spanElement, btnName);
        return spanElement;
    };
    BmwInputStepperDirective.prototype.ngOnDestroy = function () {
        this.increaseListener();
        this.decreaseListener();
    };
    BmwInputStepperDirective.prototype.stepUp = function () {
        if (!this._el.nativeElement.disabled) {
            this._el.nativeElement.stepUp();
            this._el.nativeElement.dispatchEvent(new Event('input', { bubbles: true }));
        }
    };
    BmwInputStepperDirective.prototype.stepDown = function () {
        if (!this._el.nativeElement.disabled) {
            this._el.nativeElement.stepDown();
            this._el.nativeElement.dispatchEvent(new Event('input', { bubbles: true }));
        }
    };
    BmwInputStepperDirective.prototype.destroy = function () {
        this.destroy$.next();
    };
    BmwInputStepperDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        HostListener('keydown', ['$event'])
    ], BmwInputStepperDirective.prototype, "onKeyDown", null);
    BmwInputStepperDirective = __decorate([
        Directive({
            selector: 'input[bmwInputStepper]'
        })
    ], BmwInputStepperDirective);
    return BmwInputStepperDirective;
}());
export { BmwInputStepperDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm13LWlucHV0LXN0ZXBwZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJtdy1kcy9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiaW5wdXRmaWVsZC9pbnB1dC1zdGVwcGVyL2Jtdy1pbnB1dC1zdGVwcGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLM0M7SUEwQkUsa0NBQW9CLEdBQWUsRUFBVSxTQUFvQjtRQUE3QyxRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVztRQXBCekQsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFvQjZCLENBQUM7SUFqQnJFLDRDQUFTLEdBQVQsVUFBVSxLQUFvQjtRQUM1QixJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDeEMsUUFBUSxHQUFHLEVBQUU7WUFDWCxLQUFLLFdBQVcsQ0FBQztZQUNqQixLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNoQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLE1BQU07WUFFUixLQUFLLFNBQVMsQ0FBQztZQUNmLEtBQUssRUFBRTtnQkFDTCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN2QixNQUFNO1NBQ1Q7SUFDSCxDQUFDO0lBSUQsa0RBQWUsR0FBZjtRQUFBLGlCQTZCQztRQTVCQyxJQUFN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QUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsd0JBQXdCO1NBQ25DLENBQUM7T0FDVyx3QkFBd0IsQ0ErRnBDO0lBQUQsK0JBQUM7Q0FBQSxBQS9GRCxJQStGQztTQS9GWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBIb3N0TGlzdGVuZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbYm13SW5wdXRTdGVwcGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgQm13SW5wdXRTdGVwcGVyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgaW5jcmVhc2VCdG46IEhUTUxFbGVtZW50O1xuICBkZWNyZWFzZUJ0bjogSFRNTEVsZW1lbnQ7XG4gIGluY3JlYXNlTGlzdGVuZXI6IEZ1bmN0aW9uO1xuICBkZWNyZWFzZUxpc3RlbmVyOiBGdW5jdGlvbjtcblxuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQuY29kZSB8fCBldmVudC5rZXlDb2RlO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgY2FzZSA0MDpcbiAgICAgICAgdGhpcy5zdGVwRG93bigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICBjYXNlIDM4OlxuICAgICAgICB0aGlzLnN0ZXBVcCgpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5fcmVuZGVyZXIucGFyZW50Tm9kZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50KTtcblxuICAgIHRoaXMuaW5jcmVhc2VCdG4gPSB0aGlzLl9jcmVhdGVCdXR0b24oJ2luY3JlYXNlJyk7XG4gICAgdGhpcy5pbmNyZWFzZUxpc3RlbmVyID0gdGhpcy5fcmVuZGVyZXIubGlzdGVuKHRoaXMuaW5jcmVhc2VCdG4sICdjbGljaycsIHRoaXMuc3RlcFVwLmJpbmQodGhpcykpO1xuICAgIGNvbnN0IGtleWRvd25PbkluY3JlYXNlQnV0dG9uJCA9IGZyb21FdmVudCh0aGlzLmluY3JlYXNlQnRuLCAna2V5ZG93bicpLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKTtcblxuICAgIHRoaXMuZGVjcmVhc2VCdG4gPSB0aGlzLl9jcmVhdGVCdXR0b24oJ2RlY3JlYXNlJyk7XG4gICAgdGhpcy5kZWNyZWFzZUxpc3RlbmVyID0gdGhpcy5fcmVuZGVyZXIubGlzdGVuKHRoaXMuZGVjcmVhc2VCdG4sICdjbGljaycsIHRoaXMuc3RlcERvd24uYmluZCh0aGlzKSk7XG4gICAgY29uc3Qga2V5ZG93bk9uRGVjcmVhc2VCdXR0b24kID0gZnJvbUV2ZW50KHRoaXMuZGVjcmVhc2VCdG4sICdrZXlkb3duJykucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpO1xuXG4gICAga2V5ZG93bk9uSW5jcmVhc2VCdXR0b24kLnN1YnNjcmliZSgoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5jb2RlID09PSAnRW50ZXInIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgIHRoaXMuc3RlcFVwKCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAga2V5ZG93bk9uRGVjcmVhc2VCdXR0b24kLnN1YnNjcmliZSgoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5jb2RlID09PSAnRW50ZXInIHx8IGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgIHRoaXMuc3RlcERvd24oKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX2NyZWF0ZUNvbnRhaW5lcigpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lciwgdGhpcy5pbmNyZWFzZUJ0bik7XG4gICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyLCB0aGlzLmRlY3JlYXNlQnRuKTtcblxuICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKHBhcmVudCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIF9jcmVhdGVDb250YWluZXIoKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX3JlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKGNvbnRhaW5lciwgJ3N0ZXBwZXItY29udHJvbHMnKTtcbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG5cbiAgX2NyZWF0ZUJ1dHRvbihidG5OYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3Qgc3BhbkVsZW1lbnQgPSB0aGlzLl9yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3Moc3BhbkVsZW1lbnQsICdzdGVwcGVyLWJ1dHRvbicpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZShzcGFuRWxlbWVudCwgJ3RhYmluZGV4JywgdGhpcy5fZWwubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA/ICctMScgOiAnMCcpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKHNwYW5FbGVtZW50LCBidG5OYW1lKTtcbiAgICByZXR1cm4gc3BhbkVsZW1lbnQ7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmluY3JlYXNlTGlzdGVuZXIoKTtcbiAgICB0aGlzLmRlY3JlYXNlTGlzdGVuZXIoKTtcbiAgfVxuXG4gIHN0ZXBVcCgpIHtcbiAgICBpZiAoIXRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuc3RlcFVwKCk7XG4gICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgc3RlcERvd24oKSB7XG4gICAgaWYgKCF0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmRpc2FibGVkKSB7XG4gICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LnN0ZXBEb3duKCk7XG4gICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgfVxufVxuIl19