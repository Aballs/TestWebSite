import { __decorate } from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, QueryList } from '@angular/core';
import { MasterDetailListRowEntryComponent } from '../master-detail-list-row-entry/master-detail-list-row-entry.component';
var MasterDetailListRowComponent = /** @class */ (function () {
    function MasterDetailListRowComponent(element) {
        this.element = element;
        this.updateEvent = new EventEmitter();
    }
    Object.defineProperty(MasterDetailListRowComponent.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            if (this._selected !== value) {
                this._selected = value;
                if (this._selected) {
                    this.updateScrollPosition();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    MasterDetailListRowComponent.prototype.click = function (event) {
        this.updateEvent.emit();
    };
    MasterDetailListRowComponent.prototype.ngOnInit = function () {
        if (!this.id)
            this.id = Math.random()
                .toString(36)
                .substring(2);
    };
    MasterDetailListRowComponent.prototype.updateScrollPosition = function () {
        this.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
    };
    MasterDetailListRowComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(), HostBinding('class.selected')
    ], MasterDetailListRowComponent.prototype, "selected", null);
    __decorate([
        ContentChildren(MasterDetailListRowEntryComponent)
    ], MasterDetailListRowComponent.prototype, "listEntities", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], MasterDetailListRowComponent.prototype, "id", void 0);
    __decorate([
        Output()
    ], MasterDetailListRowComponent.prototype, "updateEvent", void 0);
    __decorate([
        HostListener('click', ['$event'])
    ], MasterDetailListRowComponent.prototype, "click", null);
    MasterDetailListRowComponent = __decorate([
        Component({
            selector: 'bmw-master-detail-list-row',
            template: "<ng-content select=\"bmw-master-detail-list-row-entry\"></ng-content>\n",
            styles: [":host{background-color:var(--list-item__default__background-color);display:table-row-group;display:-ms-grid;display:grid;-ms-grid-columns:var(--list__item__col-size);grid-template-columns:var(--list__item__col-size);border-bottom:1px solid var(--list__item__border-bottom-color);padding:var(--spacing-bmw-xxs) var(--spacing-bmw-xs) var(--spacing-bmw-xs) var(--spacing-bmw-xs);cursor:pointer}:host:hover{background-color:var(--list__item__hover__background-color)}:host.selected{background-color:var(--list__item__selected__background-color)}@media screen and (min-width:37.49rem){:host{padding:0;display:table-row}}:host-context(bmw-master-detail-list.master-detail){display:-ms-grid;display:grid;-ms-grid-columns:var(--list__item__col-size);grid-template-columns:var(--list__item__col-size);border-bottom:1px solid var(--list__item__border-bottom-color);padding:var(--spacing-bmw-xxs) var(--spacing-bmw-xs) var(--spacing-bmw-xs) var(--spacing-bmw-xs)}"]
        })
    ], MasterDetailListRowComponent);
    return MasterDetailListRowComponent;
}());
export { MasterDetailListRowComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdGVyLWRldGFpbC1saXN0LXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYm13LWRzL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJtYXN0ZXItZGV0YWlsLWxpc3QvbWFzdGVyLWRldGFpbC1saXN0LXJvdy9tYXN0ZXItZGV0YWlsLWxpc3Qtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3RUFBd0UsQ0FBQztBQU8zSDtJQXlCRSxzQ0FBNkIsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUpoRCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFJWSxDQUFDO0lBeEJaLHNCQUFJLGtEQUFRO2FBU3BEO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7YUFYdUMsVUFBYSxLQUFjO1lBQ2pFLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ2xCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2lCQUM3QjthQUNGO1FBQ0gsQ0FBQzs7O09BQUE7SUFtQmtDLDRDQUFLLEdBQUwsVUFBTSxLQUFpQjtRQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCwrQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO2lCQUNwQixRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUNaLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsMkRBQW9CLEdBQXBCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7O2dCQWZxQyxVQUFVOztJQXhCUjtRQUF2QyxLQUFLLEVBQUUsRUFBRSxXQUFXLENBQUMsZ0JBQWdCLENBQUM7Z0VBT3RDO0lBT0Q7UUFEQyxlQUFlLENBQUMsaUNBQWlDLENBQUM7c0VBQ1E7SUFHM0Q7UUFGQyxXQUFXLENBQUMsU0FBUyxDQUFDO1FBQ3RCLEtBQUssRUFBRTs0REFDRztJQUdYO1FBREMsTUFBTSxFQUFFO3FFQUM4QjtJQU1KO1FBQWxDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs2REFFakM7SUE3QlUsNEJBQTRCO1FBTHhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw0QkFBNEI7WUFDdEMsbUZBQXNEOztTQUV2RCxDQUFDO09BQ1csNEJBQTRCLENBeUN4QztJQUFELG1DQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0F6Q1ksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXN0ZXJEZXRhaWxMaXN0Um93RW50cnlDb21wb25lbnQgfSBmcm9tICcuLi9tYXN0ZXItZGV0YWlsLWxpc3Qtcm93LWVudHJ5L21hc3Rlci1kZXRhaWwtbGlzdC1yb3ctZW50cnkuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYm13LW1hc3Rlci1kZXRhaWwtbGlzdC1yb3cnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFzdGVyLWRldGFpbC1saXN0LXJvdy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hc3Rlci1kZXRhaWwtbGlzdC1yb3cuY29tcG9uZW50Lmxlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNYXN0ZXJEZXRhaWxMaXN0Um93Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgQEhvc3RCaW5kaW5nKCdjbGFzcy5zZWxlY3RlZCcpIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLl9zZWxlY3RlZCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGVkID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy5fc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTY3JvbGxQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gIH1cblxuICBAQ29udGVudENoaWxkcmVuKE1hc3RlckRldGFpbExpc3RSb3dFbnRyeUNvbXBvbmVudClcbiAgbGlzdEVudGl0aWVzOiBRdWVyeUxpc3Q8TWFzdGVyRGV0YWlsTGlzdFJvd0VudHJ5Q29tcG9uZW50PjtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgQElucHV0KClcbiAgaWQ6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgdXBkYXRlRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSkgY2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLnVwZGF0ZUV2ZW50LmVtaXQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5pZClcbiAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAgIC50b1N0cmluZygzNilcbiAgICAgICAgLnN1YnN0cmluZygyKTtcbiAgfVxuXG4gIHVwZGF0ZVNjcm9sbFBvc2l0aW9uKCkge1xuICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ25lYXJlc3QnLCBpbmxpbmU6ICduZWFyZXN0JyB9KTtcbiAgfVxufVxuIl19