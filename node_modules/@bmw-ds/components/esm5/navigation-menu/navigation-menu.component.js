import { __decorate } from "tslib";
import { takeUntil } from 'rxjs/operators';
import { NavigationService } from './navigation.service';
import { Component, AfterContentInit, ContentChildren, QueryList, OnDestroy, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, ChangeDetectorRef } from '@angular/core';
import { NavigationMenuSubmenuItemComponent } from './navigation-menu-submenu-item.component';
import { NavigationMenuItemComponent } from './navigation-menu-item.component';
import { NavigationMenuSubmenuComponent } from './navigation-menu-submenu.component';
import { Subject } from 'rxjs';
var NavigationMenuComponent = /** @class */ (function () {
    function NavigationMenuComponent(elemRef, cdRef, _navService) {
        var _this = this;
        this.elemRef = elemRef;
        this.cdRef = cdRef;
        this._navService = _navService;
        this.onDestroy$ = new Subject();
        this._opened = false;
        /**
         * closes menu when user clicks outside (default = false)
         */
        this.closeOnClickOutside = false;
        this.itemSelectedEvent = new EventEmitter();
        this._navService.selectionChange.pipe(takeUntil(this.onDestroy$)).subscribe(function (item) {
            var _a;
            if (item instanceof NavigationMenuItemComponent) {
                _this.itemSelectedEvent.emit(item);
                item.onMouseOut(null);
                _this.opened = false;
            }
            else if (item instanceof NavigationMenuSubmenuItemComponent) {
                _this.itemSelectedEvent.emit(item);
                (_a = _this.items.find(function (navItem) { return navItem.popUp; })) === null || _a === void 0 ? void 0 : _a.onMouseOut(null);
                _this.opened = false;
            }
        });
    }
    Object.defineProperty(NavigationMenuComponent.prototype, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (value) {
            this._opened = value;
            this._navService.menuOpened.next(this._opened);
        },
        enumerable: true,
        configurable: true
    });
    NavigationMenuComponent.prototype.onFocusIn = function (event) {
        if (this.items.some(function (item) { return event.target === item.labelWrapper.nativeElement; })) {
            this.items.forEach(function (item) {
                if (event.target === item.labelWrapper.nativeElement) {
                    item.onMouseOver();
                }
                else {
                    item.popUp = false;
                }
            });
        }
    };
    NavigationMenuComponent.prototype.clickout = function (event) {
        if (this.closeOnClickOutside && !this.elemRef.nativeElement.contains(event.target) && this.opened) {
            this.opened = false;
        }
    };
    NavigationMenuComponent.prototype.onKeydown = function (event) {
        var key = event.code || event.keyCode;
        switch (key) {
            case 'ArrowRight':
            case 39:
                if (!this.opened) {
                    this.focusIntoSubmenu(event.target);
                    this.expandAllSubmenus();
                    event.preventDefault();
                    event.stopPropagation();
                }
                break;
            case 'Enter':
            case 'NumpadEnter':
            case 13:
            case 'Space':
            case 32:
                if (event.target === this.elemRef.nativeElement.querySelector('i.arrow')) {
                    this.opened = !this.opened;
                }
                else {
                    this.clickMenuItem(this.items.find(function (item) { return item.labelWrapper.nativeElement === event.target; }));
                }
                event.preventDefault();
                event.stopPropagation();
                break;
            case 'Escape':
            case 27:
                if (!this.opened) {
                    this.items.forEach(function (item) { return (item.popUp = false); });
                    event.preventDefault();
                }
                else {
                    this.opened = false;
                }
                break;
            case 'Tab':
            case 9:
                var focusedItem = this.items.find(function (item) { return event.target === item.labelWrapper.nativeElement; });
                if (focusedItem) {
                    focusedItem.popUp = false;
                }
                break;
        }
    };
    NavigationMenuComponent.prototype.ngAfterContentInit = function () {
        if (!this.id) {
            this.id = Math.random()
                .toString(36)
                .substring(2);
        }
    };
    NavigationMenuComponent.prototype.ngOnDestroy = function () {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    };
    NavigationMenuComponent.prototype.focusIntoSubmenu = function (target) {
        var focusedItem = this.items.find(function (item) { return target === item.labelWrapper.nativeElement; });
        if (focusedItem && focusedItem.popUp) {
            focusedItem.setNextSubmenuItemAsFocused();
        }
    };
    NavigationMenuComponent.prototype.clickMenuItem = function (menuItem) {
        if (menuItem) {
            menuItem.click(null);
            if (this.opened) {
                this.expandAllSubmenus();
            }
            else {
                menuItem.toggleSubmenuPopup();
            }
        }
    };
    NavigationMenuComponent.prototype.expandAllSubmenus = function () {
        this.submenus.forEach(function (submenu) { return (submenu.opened = true); });
    };
    NavigationMenuComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: NavigationService }
    ]; };
    __decorate([
        ContentChildren(NavigationMenuSubmenuItemComponent, { descendants: true })
    ], NavigationMenuComponent.prototype, "submenuItems", void 0);
    __decorate([
        ContentChildren(NavigationMenuSubmenuComponent, { descendants: true })
    ], NavigationMenuComponent.prototype, "submenus", void 0);
    __decorate([
        ContentChildren(NavigationMenuItemComponent)
    ], NavigationMenuComponent.prototype, "items", void 0);
    __decorate([
        HostBinding('attr.id'),
        Input()
    ], NavigationMenuComponent.prototype, "id", void 0);
    __decorate([
        Input()
    ], NavigationMenuComponent.prototype, "opened", null);
    __decorate([
        Input()
    ], NavigationMenuComponent.prototype, "closeOnClickOutside", void 0);
    __decorate([
        Output()
    ], NavigationMenuComponent.prototype, "itemSelectedEvent", void 0);
    __decorate([
        HostListener('focusin', ['$event'])
    ], NavigationMenuComponent.prototype, "onFocusIn", null);
    __decorate([
        HostListener('document:click', ['$event'])
    ], NavigationMenuComponent.prototype, "clickout", null);
    __decorate([
        HostListener('keydown', ['$event'])
    ], NavigationMenuComponent.prototype, "onKeydown", null);
    NavigationMenuComponent = __decorate([
        Component({
            selector: 'bmw-navigation-menu',
            template: "<div class=\"navigation-menu-wrapper\" [ngClass]=\"opened ? 'opened' : ''\">\n  <i\n    [ngClass]=\"opened ? 'iwp-icon-gen_arrow_left' : 'iwp-icon-gen_arrow_right'\"\n    class=\"arrow\"\n    (click)=\"opened = !opened\"\n    tabindex=\"0\"\n  ></i>\n  <div class=\"navigation-content\">\n    <ng-content select=\"bmw-navigation-menu-item\"></ng-content>\n  </div>\n</div>\n",
            providers: [NavigationService],
            styles: [":host{display:inline-block;height:100%;position:relative;box-sizing:border-box}.navigation-menu-wrapper{display:inline-flex;position:relative;padding-top:var(--navigation-menu__default__padding-top);box-shadow:1px 0 0 0 var(--navigation-menu__default__border-right-color);height:100%;background-color:var(--navigation-menu__default__background-color);box-sizing:border-box}.navigation-menu-wrapper.opened{width:var(--navigation-menu__opened__width);z-index:var(--navigation-menu__z-index)}.navigation-menu-wrapper.opened .navigation-content{box-sizing:border-box;width:100%;overflow:hidden;overflow-y:auto}.navigation-menu-wrapper .arrow{font-size:var(--navigation-menu__icon__font-size);position:absolute;width:var(--navigation-menu__icon__font-size);cursor:pointer;padding:var(--navigation-menu__icon__padding);margin-top:var(--navigation-menu__icon__padding-top);top:0;right:var(--navigation-menu__icon__padding)}.navigation-menu-wrapper .arrow:focus{outline:solid 1px;outline-color:var(--color-bmw-highlight);outline-offset:-1px}::ng-deep .chevron{font-size:var(--navigation-menu__chevron__font-size);cursor:pointer}"]
        })
    ], NavigationMenuComponent);
    return NavigationMenuComponent;
}());
export { NavigationMenuComponent };
//# sourceMappingURL=data:application/json;base64,