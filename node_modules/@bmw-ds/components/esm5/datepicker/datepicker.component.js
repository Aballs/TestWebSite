import { __decorate, __read, __spread, __values } from "tslib";
/**
 * DESY TEAM: regarding this files and components
 * This is literally copied from the prime-ng library with some minor changes
 * https://www.primefaces.org/primeng/
 * LICENSE: https://github.com/primefaces/primeng/blob/master/LICENSE.md
 */
/* tslint:disable */
import { Component, ElementRef, OnDestroy, OnInit, Input, Output, EventEmitter, forwardRef, Renderer2, ViewChild, ChangeDetectorRef, TemplateRef, NgZone, ChangeDetectionStrategy, HostBinding, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import { DomHandler } from './datepicker.dom-handler';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { InputfieldComponent } from '../inputfield/inputfield.component';
export var CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DatepickerComponent; }),
    multi: true
};
var DatepickerComponent = /** @class */ (function () {
    function DatepickerComponent(el, renderer, cd, zone) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.zone = zone;
        this.touched = false;
        this.invalid = false;
        this.dateFormat = 'mm/dd/yy';
        this.multipleSeparator = ',';
        this.rangeSeparator = '-';
        this.inline = false;
        this.showOtherMonths = true;
        this.selectOtherMonths = true;
        this.showIcon = true;
        this.icon = 'pi pi-calendar';
        this.shortYearCutoff = '+10';
        this.showTransitionOptions = '0ms ease-out';
        this.hideTransitionOptions = '0ms ease-in';
        // @Input()
        this.stepHour = 1;
        // @Input()
        this.stepMinute = 1;
        // @Input()
        this.stepSecond = 1;
        this.showOnFocus = true;
        this.showWeek = false;
        this.dataType = 'date';
        this.selectionMode = 'single';
        this.autoZIndex = true;
        this.baseZIndex = 0;
        this.keepInvalid = false;
        this.hideOnDateTimeSelect = true;
        this.numberOfMonths = 1;
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onInput = new EventEmitter();
        this.onTodayClick = new EventEmitter();
        this.onClearClick = new EventEmitter();
        this.onMonthChange = new EventEmitter();
        this.onYearChange = new EventEmitter();
        this.onClickOutside = new EventEmitter();
        this.onShow = new EventEmitter();
        // @ContentChildren(PrimeTemplate) templates: QueryList<any>;
        // Unsuported inputs
        // @Input()
        this.hourFormat = '24';
        // @Input()
        this.timeOnly = false;
        // @Input()
        this.showSeconds = false;
        // @Input()
        this.timeSeparator = ':';
        // @Input()
        this.view = 'date';
        // @Input()
        this.touchUI = false;
        this._locale = {
            firstDayOfWeek: 0,
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dayNamesMin: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
            monthNames: [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December'
            ],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            today: 'Today',
            clear: 'Clear',
            dateFormat: 'dd/mm/yy',
            weekHeader: 'CW'
        };
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.inputFieldValue = null;
        this.navigationState = null;
        this.convertTo24Hour = function (hours, pm) {
            if (this.hourFormat == '12') {
                if (hours === 12) {
                    return pm ? 12 : 0;
                }
                else {
                    return pm ? hours + 12 : hours;
                }
            }
            return hours;
        };
    }
    Object.defineProperty(DatepickerComponent.prototype, "content", {
        set: function (content) {
            var _this = this;
            this.contentViewChild = content;
            if (this.contentViewChild) {
                if (this.isMonthNavigate) {
                    Promise.resolve(null).then(function () { return _this.updateFocus(); });
                    this.isMonthNavigate = false;
                }
                else {
                    this.initFocusableCell();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "minDate", {
        get: function () {
            return this._minDate;
        },
        set: function (date) {
            this._minDate = date;
            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {
                this.createMonths(this.currentMonth, this.currentYear);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "maxDate", {
        get: function () {
            return this._maxDate;
        },
        set: function (date) {
            this._maxDate = date;
            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {
                this.createMonths(this.currentMonth, this.currentYear);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "disabledDates", {
        get: function () {
            return this._disabledDates;
        },
        set: function (disabledDates) {
            this._disabledDates = disabledDates;
            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {
                this.createMonths(this.currentMonth, this.currentYear);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "disabledDays", {
        get: function () {
            return this._disabledDays;
        },
        set: function (disabledDays) {
            this._disabledDays = disabledDays;
            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {
                this.createMonths(this.currentMonth, this.currentYear);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "yearRange", {
        get: function () {
            return this._yearRange;
        },
        set: function (yearRange) {
            this._yearRange = yearRange;
            if (yearRange) {
                var years = yearRange.split(':');
                var yearStart = parseInt(years[0]);
                var yearEnd = parseInt(years[1]);
                this.populateYearOptions(yearStart, yearEnd);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "showTime", {
        get: function () {
            return this._showTime;
        },
        set: function (showTime) {
            this._showTime = showTime;
            if (this.currentHour === undefined) {
                this.initTime(this.value || new Date());
            }
            this.updateInputfield();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        set: function (newLocale) {
            this._locale = newLocale;
            if (this.view === 'date') {
                this.createWeekDays();
                this.createMonths(this.currentMonth, this.currentYear);
            }
            else if (this.view === 'month') {
                this.createMonthPickerValues();
            }
        },
        enumerable: true,
        configurable: true
    });
    DatepickerComponent.prototype.ngOnInit = function () {
        var date = this.defaultDate || new Date();
        this.currentMonth = date.getMonth();
        this.currentYear = date.getFullYear();
        if (this.view === 'date') {
            this.createWeekDays();
            this.initTime(date);
            this.createMonths(this.currentMonth, this.currentYear);
            this.ticksTo1970 =
                ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) *
                    24 *
                    60 *
                    60 *
                    10000000;
        }
        else if (this.view === 'month') {
            this.createMonthPickerValues();
        }
    };
    DatepickerComponent.prototype.ngOnChanges = function (changes) {
        var _a;
        if ((_a = changes.dateFormat) === null || _a === void 0 ? void 0 : _a.currentValue) {
            this.updateInputfield();
        }
    };
    DatepickerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            /** this setTimeout is in order to prevent the expressionchanged(...)error
             * couldn't solve it without breaking all the other form input components
             * due to the way inputfield grabs their id input automatically to match
             * the corresponding form input label [for] attribute */
            _this.inputField.input.id = _this.inputId;
        }, 0);
    };
    DatepickerComponent.prototype.populateYearOptions = function (start, end) {
        this.yearOptions = [];
        for (var i = start; i <= end; i++) {
            this.yearOptions.push(i);
        }
    };
    DatepickerComponent.prototype.createWeekDays = function () {
        this.weekDays = [];
        var dayIndex = this.locale.firstDayOfWeek;
        for (var i = 0; i < 7; i++) {
            this.weekDays.push(this.locale.dayNamesMin[dayIndex]);
            dayIndex = dayIndex == 6 ? 0 : ++dayIndex;
        }
    };
    DatepickerComponent.prototype.createMonthPickerValues = function () {
        this.monthPickerValues = [];
        for (var i = 0; i <= 11; i++) {
            this.monthPickerValues.push(this.locale.monthNamesShort[i]);
        }
    };
    DatepickerComponent.prototype.createMonths = function (month, year) {
        this.months = this.months = [];
        for (var i = 0; i < this.numberOfMonths; i++) {
            var m = month + i;
            var y = year;
            if (m > 11) {
                m = (m % 11) - 1;
                y = year + 1;
            }
            this.months.push(this.createMonth(m, y));
        }
    };
    DatepickerComponent.prototype.getWeekNumber = function (date) {
        var checkDate = new Date(date.getTime());
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        var time = checkDate.getTime();
        checkDate.setMonth(0);
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate.getTime()) / 86400000) / 7) + 1;
    };
    DatepickerComponent.prototype.createMonth = function (month, year) {
        var dates = [];
        var firstDay = this.getFirstDayOfMonthIndex(month, year);
        var daysLength = this.getDaysCountInMonth(month, year);
        var prevMonthDaysLength = this.getDaysCountInPrevMonth(month, year);
        var dayNo = 1;
        var today = new Date();
        var weekNumbers = [];
        var monthRows = Math.ceil((daysLength + firstDay) / 7);
        for (var i = 0; i < monthRows; i++) {
            var week = [];
            if (i == 0) {
                for (var j = prevMonthDaysLength - firstDay + 1; j <= prevMonthDaysLength; j++) {
                    var prev = this.getPreviousMonthAndYear(month, year);
                    week.push({
                        day: j,
                        month: prev.month,
                        year: prev.year,
                        otherMonth: true,
                        today: this.isToday(today, j, prev.month, prev.year),
                        selectable: this.isSelectable(j, prev.month, prev.year, true)
                    });
                }
                var remainingDaysLength = 7 - week.length;
                for (var j = 0; j < remainingDaysLength; j++) {
                    week.push({
                        day: dayNo,
                        month: month,
                        year: year,
                        today: this.isToday(today, dayNo, month, year),
                        selectable: this.isSelectable(dayNo, month, year, false)
                    });
                    dayNo++;
                }
            }
            else {
                for (var j = 0; j < 7; j++) {
                    if (dayNo > daysLength) {
                        var next = this.getNextMonthAndYear(month, year);
                        week.push({
                            day: dayNo - daysLength,
                            month: next.month,
                            year: next.year,
                            otherMonth: true,
                            today: this.isToday(today, dayNo - daysLength, next.month, next.year),
                            selectable: this.isSelectable(dayNo - daysLength, next.month, next.year, true)
                        });
                    }
                    else {
                        week.push({
                            day: dayNo,
                            month: month,
                            year: year,
                            today: this.isToday(today, dayNo, month, year),
                            selectable: this.isSelectable(dayNo, month, year, false)
                        });
                    }
                    dayNo++;
                }
            }
            if (this.showWeek) {
                weekNumbers.push(this.getWeekNumber(new Date(week[0].year, week[0].month, week[0].day)));
            }
            dates.push(week);
        }
        return {
            month: month,
            year: year,
            dates: dates,
            weekNumbers: weekNumbers
        };
    };
    DatepickerComponent.prototype.initTime = function (date) {
        this.pm = date.getHours() > 11;
        if (this.showTime) {
            this.currentMinute = date.getMinutes();
            this.currentSecond = date.getSeconds();
            this.setCurrentHourPM(date.getHours());
        }
        else if (this.timeOnly) {
            this.currentMinute = 0;
            this.currentHour = 0;
            this.currentSecond = 0;
        }
    };
    DatepickerComponent.prototype.navBackward = function (event) {
        var _this = this;
        event.stopPropagation();
        if (this.disabled) {
            event.preventDefault();
            return;
        }
        this.isMonthNavigate = true;
        if (this.view === 'month') {
            this.decrementYear();
            setTimeout(function () {
                _this.updateFocus();
            }, 1);
        }
        else {
            if (this.currentMonth === 0) {
                this.currentMonth = 11;
                this.decrementYear();
            }
            else {
                this.currentMonth--;
            }
            this.onMonthChange.emit({ month: this.currentMonth + 1, year: this.currentYear });
            this.createMonths(this.currentMonth, this.currentYear);
        }
    };
    DatepickerComponent.prototype.navForward = function (event) {
        var _this = this;
        event.stopPropagation();
        if (this.disabled) {
            event.preventDefault();
            return;
        }
        this.isMonthNavigate = true;
        if (this.view === 'month') {
            this.incrementYear();
            setTimeout(function () {
                _this.updateFocus();
            }, 1);
        }
        else {
            if (this.currentMonth === 11) {
                this.currentMonth = 0;
                this.incrementYear();
            }
            else {
                this.currentMonth++;
            }
            this.onMonthChange.emit({ month: this.currentMonth + 1, year: this.currentYear });
            this.createMonths(this.currentMonth, this.currentYear);
        }
    };
    DatepickerComponent.prototype.decrementYear = function () {
        this.currentYear--;
        if (this.yearNavigator && this.currentYear < this.yearOptions[0]) {
            var difference = this.yearOptions[this.yearOptions.length - 1] - this.yearOptions[0];
            this.populateYearOptions(this.yearOptions[0] - difference, this.yearOptions[this.yearOptions.length - 1] - difference);
        }
    };
    DatepickerComponent.prototype.incrementYear = function () {
        this.currentYear++;
        if (this.yearNavigator && this.currentYear > this.yearOptions[this.yearOptions.length - 1]) {
            var difference = this.yearOptions[this.yearOptions.length - 1] - this.yearOptions[0];
            this.populateYearOptions(this.yearOptions[0] + difference, this.yearOptions[this.yearOptions.length - 1] + difference);
        }
    };
    DatepickerComponent.prototype.onDateSelect = function (event, dateMeta) {
        var _this = this;
        if (this.disabled || !dateMeta.selectable) {
            event.preventDefault();
            return;
        }
        if (this.isMultipleSelection() && this.isSelected(dateMeta)) {
            this.value = this.value.filter(function (date, i) {
                return !_this.isDateEquals(date, dateMeta);
            });
            if (this.value.length === 0) {
                this.value = null;
            }
            this.updateModel(this.value);
        }
        else {
            if (this.shouldSelectDate(dateMeta)) {
                this.selectDate(dateMeta);
            }
        }
        if (this.isSingleSelection() && this.hideOnDateTimeSelect) {
            setTimeout(function () {
                event.preventDefault();
                _this.hideOverlay();
                if (_this.mask) {
                    _this.disableModality();
                }
                _this.cd.markForCheck();
            }, 150);
        }
        this.updateInputfield();
        event.preventDefault();
    };
    DatepickerComponent.prototype.shouldSelectDate = function (dateMeta) {
        if (this.isMultipleSelection())
            return this.maxDateCount != null ? this.maxDateCount > (this.value ? this.value.length : 0) : true;
        else
            return true;
    };
    DatepickerComponent.prototype.onMonthSelect = function (event, index) {
        if (!DomHandler.hasClass(event.target, 'ui-state-disabled')) {
            this.onDateSelect(event, { year: this.currentYear, month: index, day: 1, selectable: true });
        }
    };
    DatepickerComponent.prototype.updateInputfield = function () {
        var formattedValue = '';
        if (this.value) {
            if (this.isSingleSelection()) {
                formattedValue = this.formatDateTime(this.value);
            }
            else if (this.isMultipleSelection()) {
                for (var i = 0; i < this.value.length; i++) {
                    var dateAsString = this.formatDateTime(this.value[i]);
                    formattedValue += dateAsString;
                    if (i !== this.value.length - 1) {
                        formattedValue += this.multipleSeparator + ' ';
                    }
                }
            }
            else if (this.isRangeSelection()) {
                if (this.value && this.value.length) {
                    var startDate = this.value[0];
                    var endDate = this.value[1];
                    formattedValue = this.formatDateTime(startDate);
                    if (endDate) {
                        formattedValue += ' ' + this.rangeSeparator + ' ' + this.formatDateTime(endDate);
                    }
                }
            }
        }
        this.inputFieldValue = formattedValue;
        this.updateFilledState();
        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {
            this.inputfieldViewChild.nativeElement.value = this.inputFieldValue;
        }
    };
    DatepickerComponent.prototype.formatDateTime = function (date) {
        var formattedValue = null;
        if (date) {
            if (this.timeOnly) {
                formattedValue = this.formatTime(date);
            }
            else {
                formattedValue = this.formatDate(date, this.getDateFormat());
                if (this.showTime) {
                    formattedValue += ' ' + this.formatTime(date);
                }
            }
        }
        return formattedValue;
    };
    DatepickerComponent.prototype.setCurrentHourPM = function (hours) {
        if (this.hourFormat == '12') {
            this.pm = hours > 11;
            if (hours >= 12) {
                this.currentHour = hours == 12 ? 12 : hours - 12;
            }
            else {
                this.currentHour = hours == 0 ? 12 : hours;
            }
        }
        else {
            this.currentHour = hours;
        }
    };
    DatepickerComponent.prototype.selectDate = function (dateMeta) {
        var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);
        if (this.showTime) {
            if (this.hourFormat == '12') {
                if (this.currentHour === 12)
                    date.setHours(this.pm ? 12 : 0);
                else
                    date.setHours(this.pm ? this.currentHour + 12 : this.currentHour);
            }
            else {
                date.setHours(this.currentHour);
            }
            date.setMinutes(this.currentMinute);
            date.setSeconds(this.currentSecond);
        }
        if (this.minDate && this.minDate > date) {
            date = this.minDate;
            this.setCurrentHourPM(date.getHours());
            this.currentMinute = date.getMinutes();
            this.currentSecond = date.getSeconds();
        }
        if (this.maxDate && this.maxDate < date) {
            date = this.maxDate;
            this.setCurrentHourPM(date.getHours());
            this.currentMinute = date.getMinutes();
            this.currentSecond = date.getSeconds();
        }
        if (this.isSingleSelection()) {
            this.updateModel(date);
        }
        else if (this.isMultipleSelection()) {
            this.updateModel(this.value ? __spread(this.value, [date]) : [date]);
        }
        else if (this.isRangeSelection()) {
            if (this.value && this.value.length) {
                var startDate = this.value[0];
                var endDate = this.value[1];
                if (!endDate && date.getTime() >= startDate.getTime()) {
                    endDate = date;
                    if (this.hideOnDateTimeSelect) {
                        this.hideOverlay();
                        if (this.mask) {
                            this.disableModality();
                        }
                        this.cd.markForCheck();
                    }
                }
                else {
                    startDate = date;
                    endDate = null;
                }
                this.updateModel([startDate, endDate]);
            }
            else {
                this.updateModel([date, null]);
            }
        }
        this.onSelect.emit(date);
    };
    DatepickerComponent.prototype.updateModel = function (value) {
        var _this = this;
        this.value = value;
        if (this.dataType == 'date') {
            this.onModelChange(this.value);
        }
        else if (this.dataType == 'string') {
            if (this.isSingleSelection()) {
                this.onModelChange(this.formatDateTime(this.value));
            }
            else {
                var stringArrValue = null;
                if (this.value) {
                    stringArrValue = this.value.map(function (date) { return _this.formatDateTime(date); });
                }
                this.onModelChange(stringArrValue);
            }
        }
    };
    DatepickerComponent.prototype.getFirstDayOfMonthIndex = function (month, year) {
        var day = new Date();
        day.setDate(1);
        day.setMonth(month);
        day.setFullYear(year);
        var dayIndex = day.getDay() + this.getSundayIndex();
        return dayIndex >= 7 ? dayIndex - 7 : dayIndex;
    };
    DatepickerComponent.prototype.getDaysCountInMonth = function (month, year) {
        return 32 - this.daylightSavingAdjust(new Date(year, month, 32)).getDate();
    };
    DatepickerComponent.prototype.getDaysCountInPrevMonth = function (month, year) {
        var prev = this.getPreviousMonthAndYear(month, year);
        return this.getDaysCountInMonth(prev.month, prev.year);
    };
    DatepickerComponent.prototype.getPreviousMonthAndYear = function (month, year) {
        var m, y;
        if (month === 0) {
            m = 11;
            y = year - 1;
        }
        else {
            m = month - 1;
            y = year;
        }
        return { month: m, year: y };
    };
    DatepickerComponent.prototype.getNextMonthAndYear = function (month, year) {
        var m, y;
        if (month === 11) {
            m = 0;
            y = year + 1;
        }
        else {
            m = month + 1;
            y = year;
        }
        return { month: m, year: y };
    };
    DatepickerComponent.prototype.getSundayIndex = function () {
        return this.locale.firstDayOfWeek > 0 ? 7 - this.locale.firstDayOfWeek : 0;
    };
    DatepickerComponent.prototype.isSelected = function (dateMeta) {
        var e_1, _a;
        if (this.value) {
            if (this.isSingleSelection()) {
                return this.isDateEquals(this.value, dateMeta);
            }
            else if (this.isMultipleSelection()) {
                var selected = false;
                try {
                    for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var date = _c.value;
                        selected = this.isDateEquals(date, dateMeta);
                        if (selected) {
                            break;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return selected;
            }
            else if (this.isRangeSelection()) {
                if (this.value[1])
                    return (this.isDateEquals(this.value[0], dateMeta) ||
                        this.isDateEquals(this.value[1], dateMeta) ||
                        this.isDateBetween(this.value[0], this.value[1], dateMeta));
                else
                    return this.isDateEquals(this.value[0], dateMeta);
            }
        }
        else {
            return false;
        }
    };
    DatepickerComponent.prototype.isMonthSelected = function (month) {
        var day = this.value ? (Array.isArray(this.value) ? this.value[0].getDate() : this.value.getDate()) : 1;
        return this.isSelected({ year: this.currentYear, month: month, day: day, selectable: true });
    };
    DatepickerComponent.prototype.isDateEquals = function (value, dateMeta) {
        if (value)
            return (value.getDate() === dateMeta.day && value.getMonth() === dateMeta.month && value.getFullYear() === dateMeta.year);
        else
            return false;
    };
    DatepickerComponent.prototype.isDateBetween = function (start, end, dateMeta) {
        var between = false;
        if (start && end) {
            var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);
            return start.getTime() <= date.getTime() && end.getTime() >= date.getTime();
        }
        return between;
    };
    DatepickerComponent.prototype.isSingleSelection = function () {
        return this.selectionMode === 'single';
    };
    DatepickerComponent.prototype.isRangeSelection = function () {
        return this.selectionMode === 'range';
    };
    DatepickerComponent.prototype.isMultipleSelection = function () {
        return this.selectionMode === 'multiple';
    };
    DatepickerComponent.prototype.isToday = function (today, day, month, year) {
        return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;
    };
    DatepickerComponent.prototype.isSelectable = function (day, month, year, otherMonth) {
        var validMin = true;
        var validMax = true;
        var validDate = true;
        var validDay = true;
        if (otherMonth && !this.selectOtherMonths) {
            return false;
        }
        if (this.minDate) {
            if (this.minDate.getFullYear() > year) {
                validMin = false;
            }
            else if (this.minDate.getFullYear() === year) {
                if (this.minDate.getMonth() > month) {
                    validMin = false;
                }
                else if (this.minDate.getMonth() === month) {
                    if (this.minDate.getDate() > day) {
                        validMin = false;
                    }
                }
            }
        }
        if (this.maxDate) {
            if (this.maxDate.getFullYear() < year) {
                validMax = false;
            }
            else if (this.maxDate.getFullYear() === year) {
                if (this.maxDate.getMonth() < month) {
                    validMax = false;
                }
                else if (this.maxDate.getMonth() === month) {
                    if (this.maxDate.getDate() < day) {
                        validMax = false;
                    }
                }
            }
        }
        if (this.disabledDates) {
            validDate = !this.isDateDisabled(day, month, year);
        }
        if (this.disabledDays) {
            validDay = !this.isDayDisabled(day, month, year);
        }
        return validMin && validMax && validDate && validDay;
    };
    DatepickerComponent.prototype.isDateDisabled = function (day, month, year) {
        var e_2, _a;
        if (this.disabledDates) {
            try {
                for (var _b = __values(this.disabledDates), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var disabledDate = _c.value;
                    if (disabledDate.getFullYear() === year &&
                        disabledDate.getMonth() === month &&
                        disabledDate.getDate() === day) {
                        return true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return false;
    };
    DatepickerComponent.prototype.isDayDisabled = function (day, month, year) {
        if (this.disabledDays) {
            var weekday = new Date(year, month, day);
            var weekdayNumber = weekday.getDay();
            return this.disabledDays.indexOf(weekdayNumber) !== -1;
        }
        return false;
    };
    DatepickerComponent.prototype.onInputFocus = function (event) {
        if (this.readonly) {
            return;
        }
        this.focus = true;
        if (this.showOnFocus) {
            this.showOverlay();
        }
        this.onFocus.emit(event);
    };
    DatepickerComponent.prototype.onInputClick = function () {
        if (this.readonly) {
            return;
        }
        if (this.overlay && this.autoZIndex) {
            this.overlay.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);
        }
        if (this.showOnFocus && !this.overlayVisible) {
            this.showOverlay();
        }
    };
    DatepickerComponent.prototype.onInputBlur = function (event) {
        if (this.readonly) {
            /** avoid side effects when input is readonly,
             * such as calling onModelTouched which will make angular add ng-touched
             * and have secondary effects on error validation display logic */
            return;
        }
        this.focus = false;
        this.onBlur.emit(event);
        if (!this.keepInvalid) {
            this.updateInputfield();
        }
        this.touched = true;
        this.onModelTouched();
    };
    DatepickerComponent.prototype.onButtonClick = function (event, inputfield) {
        if (!this.overlayVisible) {
            inputfield.focus();
            this.showOverlay();
        }
        else {
            this.hideOverlay();
        }
    };
    DatepickerComponent.prototype.onPrevButtonClick = function (event) {
        this.navigationState = { backward: true, button: true };
        this.navBackward(event);
    };
    DatepickerComponent.prototype.onNextButtonClick = function (event) {
        this.navigationState = { backward: false, button: true };
        this.navForward(event);
    };
    DatepickerComponent.prototype.onBMWButtonKeydown = function (event) {
        switch (event.which) {
            //tab
            case 9:
                if (!this.inline) {
                    this.trapFocus(event);
                }
                break;
            //escape
            case 27:
                this.overlayVisible = false;
                event.preventDefault();
                break;
            default:
                //Noop
                break;
        }
    };
    DatepickerComponent.prototype.onContainerButtonKeydown = function (event) {
        switch (event.which) {
            //tab
            case 9:
                if (!this.inline) {
                    this.trapFocus(event);
                }
                break;
            //escape
            case 27:
                this.overlayVisible = false;
                event.preventDefault();
                break;
            default:
                //Noop
                break;
        }
    };
    DatepickerComponent.prototype.onInputKeydown = function (event) {
        this.isKeydown = true;
        if (event.keyCode === 9 && this.contentViewChild) {
            this.trapFocus(event);
        }
        else if (event.keyCode === 27) {
            if (this.overlayVisible) {
                this.overlayVisible = false;
                event.preventDefault();
            }
        }
    };
    DatepickerComponent.prototype.onDateCellKeydown = function (event, date, groupIndex) {
        var cellContent = event.currentTarget;
        var cell = cellContent.parentElement;
        switch (event.which) {
            //down arrow
            case 40: {
                cellContent.tabIndex = '-1';
                var cellIndex = DomHandler.index(cell);
                var nextRow = cell.parentElement.nextElementSibling;
                if (nextRow) {
                    var focusCell = nextRow.children[cellIndex].children[0];
                    if (DomHandler.hasClass(focusCell, 'ui-state-disabled')) {
                        this.navigationState = { backward: false };
                        this.navForward(event);
                    }
                    else {
                        nextRow.children[cellIndex].children[0].tabIndex = '0';
                        nextRow.children[cellIndex].children[0].focus();
                    }
                }
                else {
                    this.navigationState = { backward: false };
                    this.navForward(event);
                }
                event.preventDefault();
                break;
            }
            //up arrow
            case 38: {
                cellContent.tabIndex = '-1';
                var cellIndex = DomHandler.index(cell);
                var prevRow = cell.parentElement.previousElementSibling;
                if (prevRow) {
                    var focusCell = prevRow.children[cellIndex].children[0];
                    if (DomHandler.hasClass(focusCell, 'ui-state-disabled')) {
                        this.navigationState = { backward: true };
                        this.navBackward(event);
                    }
                    else {
                        focusCell.tabIndex = '0';
                        focusCell.focus();
                    }
                }
                else {
                    this.navigationState = { backward: true };
                    this.navBackward(event);
                }
                event.preventDefault();
                break;
            }
            //left arrow
            case 37: {
                cellContent.tabIndex = '-1';
                var prevCell = cell.previousElementSibling;
                if (prevCell) {
                    var focusCell = prevCell.children[0];
                    if (DomHandler.hasClass(focusCell, 'ui-state-disabled') ||
                        DomHandler.hasClass(focusCell.parentElement, 'ui-datepicker-weeknumber')) {
                        this.navigateToMonth(true, groupIndex);
                    }
                    else {
                        focusCell.tabIndex = '0';
                        focusCell.focus();
                    }
                }
                else {
                    this.navigateToMonth(true, groupIndex);
                }
                event.preventDefault();
                break;
            }
            //right arrow
            case 39: {
                cellContent.tabIndex = '-1';
                var nextCell = cell.nextElementSibling;
                if (nextCell) {
                    var focusCell = nextCell.children[0];
                    if (DomHandler.hasClass(focusCell, 'ui-state-disabled')) {
                        this.navigateToMonth(false, groupIndex);
                    }
                    else {
                        focusCell.tabIndex = '0';
                        focusCell.focus();
                    }
                }
                else {
                    this.navigateToMonth(false, groupIndex);
                }
                event.preventDefault();
                break;
            }
            //enter
            case 13: {
                this.onDateSelect(event, date);
                event.preventDefault();
                break;
            }
            //escape
            case 27: {
                this.overlayVisible = false;
                event.preventDefault();
                break;
            }
            //tab
            case 9: {
                if (!this.inline) {
                    this.trapFocus(event);
                }
                break;
            }
            default:
                //no op
                break;
        }
    };
    DatepickerComponent.prototype.onMonthCellKeydown = function (event, index) {
        var cell = event.currentTarget;
        switch (event.which) {
            //arrows
            case 38:
            case 40: {
                cell.tabIndex = '-1';
                var cells = cell.parentElement.children;
                var cellIndex = DomHandler.index(cell);
                var nextCell = cells[event.which === 40 ? cellIndex + 3 : cellIndex - 3];
                if (nextCell) {
                    nextCell.tabIndex = '0';
                    nextCell.focus();
                }
                event.preventDefault();
                break;
            }
            //left arrow
            case 37: {
                cell.tabIndex = '-1';
                var prevCell = cell.previousElementSibling;
                if (prevCell) {
                    prevCell.tabIndex = '0';
                    prevCell.focus();
                }
                event.preventDefault();
                break;
            }
            //right arrow
            case 39: {
                cell.tabIndex = '-1';
                var nextCell = cell.nextElementSibling;
                if (nextCell) {
                    nextCell.tabIndex = '0';
                    nextCell.focus();
                }
                event.preventDefault();
                break;
            }
            //enter
            case 13: {
                this.onMonthSelect(event, index);
                event.preventDefault();
                break;
            }
            //escape
            case 27: {
                this.overlayVisible = false;
                event.preventDefault();
                break;
            }
            //tab
            case 9: {
                if (!this.inline) {
                    this.trapFocus(event);
                }
                break;
            }
            default:
                //no op
                break;
        }
    };
    DatepickerComponent.prototype.navigateToMonth = function (prev, groupIndex) {
        if (prev) {
            if (this.numberOfMonths === 1 || groupIndex === 0) {
                this.navigationState = { backward: true };
                this.navBackward(event);
            }
            else {
                var prevMonthContainer = this.contentViewChild.nativeElement.children[groupIndex - 1];
                var cells = DomHandler.find(prevMonthContainer, '.ui-datepicker-calendar td a');
                var focusCell = cells[cells.length - 1];
                focusCell.tabIndex = '0';
                focusCell.focus();
            }
        }
        else {
            if (this.numberOfMonths === 1 || groupIndex === this.numberOfMonths - 1) {
                this.navigationState = { backward: false };
                this.navForward(event);
            }
            else {
                var nextMonthContainer = this.contentViewChild.nativeElement.children[groupIndex + 1];
                var focusCell = DomHandler.findSingle(nextMonthContainer, '.ui-datepicker-calendar td a');
                focusCell.tabIndex = '0';
                focusCell.focus();
            }
        }
    };
    DatepickerComponent.prototype.updateFocus = function () {
        var cell;
        if (this.navigationState) {
            if (this.navigationState.button) {
                this.initFocusableCell();
                if (this.navigationState.backward)
                    DomHandler.findSingle(this.contentViewChild.nativeElement, '.ui-datepicker-prev').focus();
                else
                    DomHandler.findSingle(this.contentViewChild.nativeElement, '.ui-datepicker-next').focus();
            }
            else {
                if (this.navigationState.backward) {
                    var cells = DomHandler.find(this.contentViewChild.nativeElement, '.ui-datepicker-calendar td a');
                    cell = cells[cells.length - 1];
                }
                else {
                    cell = DomHandler.findSingle(this.contentViewChild.nativeElement, '.ui-datepicker-calendar td a');
                }
                if (cell) {
                    cell.tabIndex = '0';
                    cell.focus();
                }
            }
            this.navigationState = null;
        }
        else {
            this.initFocusableCell();
        }
    };
    DatepickerComponent.prototype.initFocusableCell = function () {
        var cell;
        if (this.view === 'month') {
            var cells = DomHandler.find(this.contentViewChild.nativeElement, '.ui-monthpicker .ui-monthpicker-month:not(.ui-state-disabled)');
            var selectedCell = DomHandler.findSingle(this.contentViewChild.nativeElement, '.ui-monthpicker .ui-monthpicker-month.ui-state-highlight');
            cells.forEach(function (cell) { return (cell.tabIndex = -1); });
            cell = selectedCell || cells[0];
            if (cells.length === 0) {
                var disabledCells = DomHandler.find(this.contentViewChild.nativeElement, '.ui-monthpicker .ui-monthpicker-month.ui-state-disabled[tabindex = "0"]');
                disabledCells.forEach(function (cell) { return (cell.tabIndex = -1); });
            }
        }
        else {
            cell = DomHandler.findSingle(this.contentViewChild.nativeElement, 'a.ui-state-active');
            if (!cell) {
                var todayCell = DomHandler.findSingle(this.contentViewChild.nativeElement, 'td.ui-datepicker-today a:not(.ui-state-disabled)');
                if (todayCell)
                    cell = todayCell;
                else
                    cell = DomHandler.findSingle(this.contentViewChild.nativeElement, '.ui-datepicker-calendar td a');
            }
        }
        if (cell) {
            cell.tabIndex = '0';
        }
    };
    DatepickerComponent.prototype.trapFocus = function (event) {
        event.preventDefault();
        var focusableElements = DomHandler.getFocusableElements(this.contentViewChild.nativeElement);
        if (focusableElements && focusableElements.length > 0) {
            if (!document.activeElement) {
                focusableElements[0].focus();
            }
            else {
                var focusedIndex = focusableElements.indexOf(document.activeElement);
                if (event.shiftKey) {
                    if (focusedIndex == -1 || focusedIndex === 0)
                        focusableElements[focusableElements.length - 1].focus();
                    else
                        focusableElements[focusedIndex - 1].focus();
                }
                else {
                    if (focusedIndex == -1 || focusedIndex === focusableElements.length - 1)
                        focusableElements[0].focus();
                    else
                        focusableElements[focusedIndex + 1].focus();
                }
            }
        }
    };
    DatepickerComponent.prototype.onMonthDropdownChange = function (m) {
        this.currentMonth = parseInt(m);
        this.onMonthChange.emit({ month: this.currentMonth + 1, year: this.currentYear });
        this.createMonths(this.currentMonth, this.currentYear);
    };
    DatepickerComponent.prototype.onYearDropdownChange = function (y) {
        this.currentYear = parseInt(y);
        this.onYearChange.emit({ month: this.currentMonth + 1, year: this.currentYear });
        this.createMonths(this.currentMonth, this.currentYear);
    };
    DatepickerComponent.prototype.validateTime = function (hour, minute, second, pm) {
        var value = this.value;
        var convertedHour = this.convertTo24Hour(hour, pm);
        if (this.isRangeSelection()) {
            value = this.value[1] || this.value[0];
        }
        if (this.isMultipleSelection()) {
            value = this.value[this.value.length - 1];
        }
        var valueDateString = value ? value.toDateString() : null;
        if (this.minDate && valueDateString && this.minDate.toDateString() === valueDateString) {
            if (this.minDate.getHours() > convertedHour) {
                return false;
            }
            if (this.minDate.getHours() === convertedHour) {
                if (this.minDate.getMinutes() > minute) {
                    return false;
                }
                if (this.minDate.getMinutes() === minute) {
                    if (this.minDate.getSeconds() > second) {
                        return false;
                    }
                }
            }
        }
        if (this.maxDate && valueDateString && this.maxDate.toDateString() === valueDateString) {
            if (this.maxDate.getHours() < convertedHour) {
                return false;
            }
            if (this.maxDate.getHours() === convertedHour) {
                if (this.maxDate.getMinutes() < minute) {
                    return false;
                }
                if (this.maxDate.getMinutes() === minute) {
                    if (this.maxDate.getSeconds() < second) {
                        return false;
                    }
                }
            }
        }
        return true;
    };
    DatepickerComponent.prototype.incrementHour = function (event) {
        var prevHour = this.currentHour;
        var newHour = this.currentHour + this.stepHour;
        var newPM = this.pm;
        if (this.hourFormat == '24')
            newHour = newHour >= 24 ? newHour - 24 : newHour;
        else if (this.hourFormat == '12') {
            // Before the AM/PM break, now after
            if (prevHour < 12 && newHour > 11) {
                newPM = !this.pm;
            }
            newHour = newHour >= 13 ? newHour - 12 : newHour;
        }
        if (this.validateTime(newHour, this.currentMinute, this.currentSecond, newPM)) {
            this.currentHour = newHour;
            this.pm = newPM;
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.onTimePickerElementMouseDown = function (event, type, direction) {
        if (!this.disabled) {
            this.repeat(event, null, type, direction);
            event.preventDefault();
        }
    };
    DatepickerComponent.prototype.onTimePickerElementMouseUp = function (event) {
        if (!this.disabled) {
            this.clearTimePickerTimer();
            this.updateTime();
        }
    };
    DatepickerComponent.prototype.onTimePickerElementMouseOut = function (event) {
        if (!this.disabled && this.timePickerTimer) {
            this.clearTimePickerTimer();
            this.updateTime();
        }
    };
    DatepickerComponent.prototype.repeat = function (event, interval, type, direction) {
        var _this = this;
        var i = interval || 500;
        this.clearTimePickerTimer();
        this.timePickerTimer = setTimeout(function () {
            _this.repeat(event, 100, type, direction);
        }, i);
        switch (type) {
            case 0:
                if (direction === 1)
                    this.incrementHour(event);
                else
                    this.decrementHour(event);
                break;
            case 1:
                if (direction === 1)
                    this.incrementMinute(event);
                else
                    this.decrementMinute(event);
                break;
            case 2:
                if (direction === 1)
                    this.incrementSecond(event);
                else
                    this.decrementSecond(event);
                break;
        }
        this.updateInputfield();
    };
    DatepickerComponent.prototype.clearTimePickerTimer = function () {
        if (this.timePickerTimer) {
            clearTimeout(this.timePickerTimer);
        }
    };
    DatepickerComponent.prototype.decrementHour = function (event) {
        var newHour = this.currentHour - this.stepHour;
        var newPM = this.pm;
        if (this.hourFormat == '24')
            newHour = newHour < 0 ? 24 + newHour : newHour;
        else if (this.hourFormat == '12') {
            // If we were at noon/midnight, then switch
            if (this.currentHour === 12) {
                newPM = !this.pm;
            }
            newHour = newHour <= 0 ? 12 + newHour : newHour;
        }
        if (this.validateTime(newHour, this.currentMinute, this.currentSecond, newPM)) {
            this.currentHour = newHour;
            this.pm = newPM;
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.incrementMinute = function (event) {
        var newMinute = this.currentMinute + this.stepMinute;
        newMinute = newMinute > 59 ? newMinute - 60 : newMinute;
        if (this.validateTime(this.currentHour, newMinute, this.currentSecond, this.pm)) {
            this.currentMinute = newMinute;
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.decrementMinute = function (event) {
        var newMinute = this.currentMinute - this.stepMinute;
        newMinute = newMinute < 0 ? 60 + newMinute : newMinute;
        if (this.validateTime(this.currentHour, newMinute, this.currentSecond, this.pm)) {
            this.currentMinute = newMinute;
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.incrementSecond = function (event) {
        var newSecond = this.currentSecond + this.stepSecond;
        newSecond = newSecond > 59 ? newSecond - 60 : newSecond;
        if (this.validateTime(this.currentHour, this.currentMinute, newSecond, this.pm)) {
            this.currentSecond = newSecond;
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.decrementSecond = function (event) {
        var newSecond = this.currentSecond - this.stepSecond;
        newSecond = newSecond < 0 ? 60 + newSecond : newSecond;
        if (this.validateTime(this.currentHour, this.currentMinute, newSecond, this.pm)) {
            this.currentSecond = newSecond;
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.updateTime = function () {
        var value = this.value;
        if (this.isRangeSelection()) {
            value = this.value[1] || this.value[0];
        }
        if (this.isMultipleSelection()) {
            value = this.value[this.value.length - 1];
        }
        value = value ? new Date(value.getTime()) : new Date();
        if (this.hourFormat == '12') {
            if (this.currentHour === 12)
                value.setHours(this.pm ? 12 : 0);
            else
                value.setHours(this.pm ? this.currentHour + 12 : this.currentHour);
        }
        else {
            value.setHours(this.currentHour);
        }
        value.setMinutes(this.currentMinute);
        value.setSeconds(this.currentSecond);
        if (this.isRangeSelection()) {
            if (this.value[1])
                value = [this.value[0], value];
            else
                value = [value, null];
        }
        if (this.isMultipleSelection()) {
            value = __spread(this.value.slice(0, -1), [value]);
        }
        this.updateModel(value);
        this.onSelect.emit(value);
        this.updateInputfield();
    };
    DatepickerComponent.prototype.toggleAMPM = function (event) {
        var newPM = !this.pm;
        if (this.validateTime(this.currentHour, this.currentMinute, this.currentSecond, newPM)) {
            this.pm = newPM;
            this.updateTime();
        }
        event.preventDefault();
    };
    DatepickerComponent.prototype.onUserInput = function (event) {
        // IE 11 Workaround for input placeholder : https://github.com/primefaces/primeng/issues/2026
        if (!this.isKeydown) {
            return;
        }
        this.isKeydown = false;
        var val = event.target.value;
        try {
            var value = this.parseValueFromString(val);
            if (this.isValidSelection(value)) {
                this.updateModel(value);
                this.updateUI();
            }
        }
        catch (err) {
            //invalid date
            this.updateModel(null);
        }
        this.filled = val != null && val.length;
        this.onInput.emit(event);
    };
    DatepickerComponent.prototype.isValidSelection = function (value) {
        var _this = this;
        var isValid = true;
        if (this.isSingleSelection()) {
            if (!this.isSelectable(value.getDate(), value.getMonth(), value.getFullYear(), false)) {
                isValid = false;
            }
        }
        else if (value.every(function (v) { return _this.isSelectable(v.getDate(), v.getMonth(), v.getFullYear(), false); })) {
            if (this.isRangeSelection()) {
                isValid = value.length > 1 && value[1] > value[0] ? true : false;
            }
        }
        return isValid;
    };
    DatepickerComponent.prototype.parseValueFromString = function (text) {
        var e_3, _a;
        if (!text || text.trim().length === 0) {
            return null;
        }
        var value;
        if (this.isSingleSelection()) {
            value = this.parseDateTime(text);
        }
        else if (this.isMultipleSelection()) {
            var tokens = text.split(this.multipleSeparator);
            value = [];
            try {
                for (var tokens_1 = __values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                    var token = tokens_1_1.value;
                    value.push(this.parseDateTime(token.trim()));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        else if (this.isRangeSelection()) {
            var tokens = text.split(' ' + this.rangeSeparator + ' ');
            value = [];
            for (var i = 0; i < tokens.length; i++) {
                value[i] = this.parseDateTime(tokens[i].trim());
            }
        }
        return value;
    };
    DatepickerComponent.prototype.parseDateTime = function (text) {
        var date;
        var parts = text.split(' ');
        if (this.timeOnly) {
            date = new Date();
            this.populateTime(date, parts[0], parts[1]);
        }
        else {
            var dateFormat = this.getDateFormat();
            if (this.showTime) {
                var ampm = this.hourFormat == '12' ? parts.pop() : null;
                var timeString = parts.pop();
                date = this.parseDate(parts.join(' '), dateFormat);
                this.populateTime(date, timeString, ampm);
            }
            else {
                date = this.parseDate(text, dateFormat);
            }
        }
        return date;
    };
    DatepickerComponent.prototype.populateTime = function (value, timeString, ampm) {
        if (this.hourFormat == '12' && !ampm) {
            throw 'Invalid Time';
        }
        this.pm = ampm === 'PM' || ampm === 'pm';
        var time = this.parseTime(timeString);
        value.setHours(time.hour);
        value.setMinutes(time.minute);
        value.setSeconds(time.second);
    };
    DatepickerComponent.prototype.updateUI = function () {
        var val = this.value || this.defaultDate || new Date();
        if (Array.isArray(val)) {
            val = val[0];
        }
        this.currentMonth = val.getMonth();
        this.currentYear = val.getFullYear();
        this.createMonths(this.currentMonth, this.currentYear);
        if (this.showTime || this.timeOnly) {
            this.setCurrentHourPM(val.getHours());
            this.currentMinute = val.getMinutes();
            this.currentSecond = val.getSeconds();
        }
    };
    DatepickerComponent.prototype.showOverlay = function () {
        if (!this.overlayVisible) {
            this.updateUI();
            this.overlayVisible = true;
            this.bindDocumentClickListener();
            this.unbindDocumentResizeListener();
        }
    };
    DatepickerComponent.prototype.hideOverlay = function () {
        this.overlayVisible = false;
        this.clearTimePickerTimer();
        this.unbindDocumentClickListener();
        this.unbindDocumentResizeListener();
        if (this.touchUI) {
            this.disableModality();
        }
    };
    DatepickerComponent.prototype.toggle = function () {
        if (!this.inline) {
            if (!this.overlayVisible) {
                this.showOverlay();
                this.inputfieldViewChild.nativeElement.focus();
            }
            else {
                this.hideOverlay();
            }
        }
    };
    DatepickerComponent.prototype.appendOverlay = function () {
        if (this.appendTo) {
            if (this.appendTo === 'body') {
                document.body.appendChild(this.overlay);
            }
            else {
                DomHandler.appendChild(this.overlay, this.appendTo);
            }
        }
    };
    DatepickerComponent.prototype.restoreOverlayAppend = function () {
        if (this.overlay && this.appendTo) {
            this.el.nativeElement.appendChild(this.overlay);
        }
    };
    DatepickerComponent.prototype.alignOverlay = function () {
        if (this.touchUI) {
            this.enableModality(this.overlay);
        }
        else {
            if (this.appendTo)
                DomHandler.absolutePosition(this.overlay, this.inputfieldViewChild.nativeElement);
            else
                DomHandler.relativePosition(this.overlay, this.inputfieldViewChild.nativeElement);
        }
    };
    DatepickerComponent.prototype.enableModality = function (element) {
        var _this = this;
        if (!this.mask) {
            this.mask = document.createElement('div');
            this.mask.style.zIndex = String(parseInt(element.style.zIndex) - 1);
            var maskStyleClass = 'ui-widget-overlay ui-datepicker-mask ui-datepicker-mask-scrollblocker';
            DomHandler.addMultipleClasses(this.mask, maskStyleClass);
            this.maskClickListener = this.renderer.listen(this.mask, 'click', function (event) {
                _this.disableModality();
            });
            document.body.appendChild(this.mask);
            DomHandler.addClass(document.body, 'ui-overflow-hidden');
        }
    };
    DatepickerComponent.prototype.disableModality = function () {
        if (this.mask) {
            document.body.removeChild(this.mask);
            var bodyChildren = document.body.children;
            var hasBlockerMasks = void 0;
            for (var i = 0; i < bodyChildren.length; i++) {
                var bodyChild = bodyChildren[i];
                if (DomHandler.hasClass(bodyChild, 'ui-datepicker-mask-scrollblocker')) {
                    hasBlockerMasks = true;
                    break;
                }
            }
            if (!hasBlockerMasks) {
                DomHandler.removeClass(document.body, 'ui-overflow-hidden');
            }
            this.unbindMaskClickListener();
            this.mask = null;
        }
    };
    DatepickerComponent.prototype.unbindMaskClickListener = function () {
        if (this.maskClickListener) {
            this.maskClickListener();
            this.maskClickListener = null;
        }
    };
    DatepickerComponent.prototype.writeValue = function (value) {
        this.value = value;
        if (this.value && typeof this.value === 'string') {
            this.value = this.parseValueFromString(this.value);
        }
        this.updateInputfield();
        this.updateUI();
    };
    DatepickerComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    DatepickerComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    DatepickerComponent.prototype.setDisabledState = function (val) {
        this.disabled = val;
    };
    DatepickerComponent.prototype.getDateFormat = function () {
        return this.dateFormat || this.locale.dateFormat;
    };
    // Ported from jquery-ui datepicker formatDate
    DatepickerComponent.prototype.formatDate = function (date, format) {
        if (!date) {
            return '';
        }
        var iFormat;
        var lookAhead = function (match) {
            var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
            if (matches) {
                iFormat++;
            }
            return matches;
        }, formatNumber = function (match, value, len) {
            var num = '' + value;
            if (lookAhead(match)) {
                while (num.length < len) {
                    num = '0' + num;
                }
            }
            return num;
        }, formatName = function (match, value, shortNames, longNames) {
            return lookAhead(match) ? longNames[value] : shortNames[value];
        };
        var output = '';
        var literal = false;
        if (date) {
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    }
                    else {
                        output += format.charAt(iFormat);
                    }
                }
                else {
                    switch (format.charAt(iFormat)) {
                        case 'd':
                            output += formatNumber('d', date.getDate(), 2);
                            break;
                        case 'D':
                            output += formatName('D', date.getDay(), this.locale.dayNamesShort, this.locale.dayNames);
                            break;
                        case 'o':
                            output += formatNumber('o', Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() -
                                new Date(date.getFullYear(), 0, 0).getTime()) /
                                86400000), 3);
                            break;
                        case 'm':
                            output += formatNumber('m', date.getMonth() + 1, 2);
                            break;
                        case 'M':
                            output += formatName('M', date.getMonth(), this.locale.monthNamesShort, this.locale.monthNames);
                            break;
                        case 'y':
                            output += lookAhead('y')
                                ? date.getFullYear()
                                : (date.getFullYear() % 100 < 10 ? '0' : '') + (date.getFullYear() % 100);
                            break;
                        case '@':
                            output += date.getTime();
                            break;
                        case '!':
                            output += date.getTime() * 10000 + this.ticksTo1970;
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                output += "'";
                            }
                            else {
                                literal = true;
                            }
                            break;
                        default:
                            output += format.charAt(iFormat);
                    }
                }
            }
        }
        return output;
    };
    DatepickerComponent.prototype.formatTime = function (date) {
        if (!date) {
            return '';
        }
        var output = '';
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        if (this.hourFormat == '12' && hours > 11 && hours != 12) {
            hours -= 12;
        }
        if (this.hourFormat == '12') {
            output += hours === 0 ? 12 : hours < 10 ? '0' + hours : hours;
        }
        else {
            output += hours < 10 ? '0' + hours : hours;
        }
        output += ':';
        output += minutes < 10 ? '0' + minutes : minutes;
        if (this.showSeconds) {
            output += ':';
            output += seconds < 10 ? '0' + seconds : seconds;
        }
        if (this.hourFormat == '12') {
            output += date.getHours() > 11 ? ' PM' : ' AM';
        }
        return output;
    };
    DatepickerComponent.prototype.parseTime = function (value) {
        var tokens = value.split(':');
        var validTokenLength = this.showSeconds ? 3 : 2;
        if (tokens.length !== validTokenLength) {
            throw 'Invalid time';
        }
        var h = parseInt(tokens[0]);
        var m = parseInt(tokens[1]);
        var s = this.showSeconds ? parseInt(tokens[2]) : null;
        if (isNaN(h) ||
            isNaN(m) ||
            h > 23 ||
            m > 59 ||
            (this.hourFormat == '12' && h > 12) ||
            (this.showSeconds && (isNaN(s) || s > 59))) {
            throw 'Invalid time';
        }
        else {
            if (this.hourFormat == '12') {
                if (h !== 12 && this.pm) {
                    h += 12;
                }
                else if (!this.pm && h === 12) {
                    h -= 12;
                }
            }
            return { hour: h, minute: m, second: s };
        }
    };
    // Ported from jquery-ui datepicker parseDate
    DatepickerComponent.prototype.parseDate = function (value, format) {
        if (format == null || value == null) {
            throw 'Invalid arguments';
        }
        value = typeof value === 'object' ? value.toString() : value + '';
        if (value === '') {
            return null;
        }
        var iFormat, dim, extra, iValue = 0, shortYearCutoff = typeof this.shortYearCutoff !== 'string'
            ? this.shortYearCutoff
            : (new Date().getFullYear() % 100) + parseInt(this.shortYearCutoff, 10), year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function (match) {
            var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
            if (matches) {
                iFormat++;
            }
            return matches;
        }, getNumber = function (match) {
            var isDoubled = lookAhead(match), size = match === '@' ? 14 : match === '!' ? 20 : match === 'y' && isDoubled ? 4 : match === 'o' ? 3 : 2, minSize = match === 'y' ? size : 1, digits = new RegExp('^\\d{' + minSize + ',' + size + '}'), num = value.substring(iValue).match(digits);
            if (!num) {
                throw 'Missing number at position ' + iValue;
            }
            iValue += num[0].length;
            return parseInt(num[0], 10);
        }, getName = function (match, shortNames, longNames) {
            var index = -1;
            var arr = lookAhead(match) ? longNames : shortNames;
            var names = [];
            for (var i = 0; i < arr.length; i++) {
                names.push([i, arr[i]]);
            }
            names.sort(function (a, b) {
                return -(a[1].length - b[1].length);
            });
            for (var i = 0; i < names.length; i++) {
                var name_1 = names[i][1];
                if (value.substr(iValue, name_1.length).toLowerCase() === name_1.toLowerCase()) {
                    index = names[i][0];
                    iValue += name_1.length;
                    break;
                }
            }
            if (index !== -1) {
                return index + 1;
            }
            else {
                throw 'Unknown name at position ' + iValue;
            }
        }, checkLiteral = function () {
            if (value.charAt(iValue) !== format.charAt(iFormat)) {
                throw 'Unexpected literal at position ' + iValue;
            }
            iValue++;
        };
        if (this.view === 'month') {
            day = 1;
        }
        for (iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal) {
                if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                    literal = false;
                }
                else {
                    checkLiteral();
                }
            }
            else {
                switch (format.charAt(iFormat)) {
                    case 'd':
                        day = getNumber('d');
                        break;
                    case 'D':
                        getName('D', this.locale.dayNamesShort, this.locale.dayNames);
                        break;
                    case 'o':
                        doy = getNumber('o');
                        break;
                    case 'm':
                        month = getNumber('m');
                        break;
                    case 'M':
                        month = getName('M', this.locale.monthNamesShort, this.locale.monthNames);
                        break;
                    case 'y':
                        year = getNumber('y');
                        break;
                    case '@':
                        date = new Date(getNumber('@'));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case '!':
                        date = new Date((getNumber('!') - this.ticksTo1970) / 10000);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "'":
                        if (lookAhead("'")) {
                            checkLiteral();
                        }
                        else {
                            literal = true;
                        }
                        break;
                    default:
                        checkLiteral();
                }
            }
        }
        if (iValue < value.length) {
            extra = value.substr(iValue);
            if (!/^\s+/.test(extra)) {
                throw 'Extra/unparsed characters found in date: ' + extra;
            }
        }
        if (year === -1) {
            year = new Date().getFullYear();
        }
        else if (year < 100) {
            year += new Date().getFullYear() - (new Date().getFullYear() % 100) + (year <= shortYearCutoff ? 0 : -100);
        }
        if (doy > -1) {
            month = 1;
            day = doy;
            do {
                dim = this.getDaysCountInMonth(year, month - 1);
                if (day <= dim) {
                    break;
                }
                month++;
                day -= dim;
            } while (true);
        }
        date = this.daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
            throw 'Invalid date'; // E.g. 31/02/00
        }
        return date;
    };
    DatepickerComponent.prototype.daylightSavingAdjust = function (date) {
        if (!date) {
            return null;
        }
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
    };
    DatepickerComponent.prototype.updateFilledState = function () {
        this.filled = this.inputFieldValue && this.inputFieldValue != '';
    };
    DatepickerComponent.prototype.onTodayButtonClick = function (event) {
        var date = new Date();
        var dateMeta = {
            day: date.getDate(),
            month: date.getMonth(),
            year: date.getFullYear(),
            otherMonth: date.getMonth() !== this.currentMonth || date.getFullYear() !== this.currentYear,
            today: true,
            selectable: true
        };
        this.onDateSelect(event, dateMeta);
        this.onTodayClick.emit(event);
    };
    DatepickerComponent.prototype.onClearButtonClick = function (event) {
        this.updateModel(null);
        this.updateInputfield();
        this.hideOverlay();
        this.onClearClick.emit(event);
    };
    DatepickerComponent.prototype.bindDocumentClickListener = function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.zone.runOutsideAngular(function () {
                _this.documentClickListener = _this.renderer.listen('document', 'click', function (event) {
                    if (_this.isOutsideClicked(event) && _this.overlayVisible) {
                        _this.zone.run(function () {
                            _this.hideOverlay();
                            _this.onClose.emit(event);
                            _this.onClickOutside.emit(event);
                            _this.cd.markForCheck();
                        });
                    }
                });
            });
        }
    };
    DatepickerComponent.prototype.unbindDocumentClickListener = function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    DatepickerComponent.prototype.bindDocumentResizeListener = function () {
        if (!this.documentResizeListener && !this.touchUI) {
            this.documentResizeListener = this.onWindowResize.bind(this);
            window.addEventListener('resize', this.documentResizeListener);
        }
    };
    DatepickerComponent.prototype.unbindDocumentResizeListener = function () {
        if (this.documentResizeListener) {
            window.removeEventListener('resize', this.documentResizeListener);
            this.documentResizeListener = null;
        }
    };
    DatepickerComponent.prototype.isOutsideClicked = function (event) {
        var _a, _b;
        return !(this.el.nativeElement.isSameNode(event.target) ||
            this.isNavIconClicked(event) ||
            this.el.nativeElement.contains(event.target) || ((_a = this.overlay) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = event.target.shadowRoot) === null || _b === void 0 ? void 0 : _b.contains(this.el.nativeElement)) ||
            (event.target.shadowRoot &&
                event.composedPath().find(function (elem) { return elem.localName === 'bmw-datepicker'; })));
    };
    DatepickerComponent.prototype.showError = function () {
        this.invalid = true;
        this.touched = true;
    };
    DatepickerComponent.prototype.isNavIconClicked = function (event) {
        return (DomHandler.hasClass(event.target, 'ui-datepicker-prev') ||
            DomHandler.hasClass(event.target, 'ui-datepicker-prev-icon') ||
            DomHandler.hasClass(event.target, 'ui-datepicker-next') ||
            DomHandler.hasClass(event.target, 'ui-datepicker-next-icon'));
    };
    DatepickerComponent.prototype.onWindowResize = function () {
        if (this.overlayVisible && !DomHandler.isAndroid()) {
            this.hideOverlay();
        }
    };
    DatepickerComponent.prototype.onOverlayHide = function () {
        this.unbindDocumentClickListener();
        this.unbindMaskClickListener();
        this.unbindDocumentResizeListener();
        this.overlay = null;
        this.disableModality();
    };
    DatepickerComponent.prototype.ngOnDestroy = function () {
        this.clearTimePickerTimer();
        this.restoreOverlayAppend();
        this.onOverlayHide();
        this.unbindDocumentClickListener();
        this.unbindDocumentResizeListener();
    };
    DatepickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    __decorate([
        HostBinding('class.ng-touched')
    ], DatepickerComponent.prototype, "touched", void 0);
    __decorate([
        HostBinding('class.ng-invalid'), Input()
    ], DatepickerComponent.prototype, "invalid", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "defaultDate", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "inputId", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "name", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "ariaLabelledBy", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "dateFormat", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "multipleSeparator", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "rangeSeparator", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "inline", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showOtherMonths", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "selectOtherMonths", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showIcon", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "icon", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "appendTo", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "readonly", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "shortYearCutoff", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "monthNavigator", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "yearNavigator", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showTransitionOptions", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "hideTransitionOptions", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "required", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showOnFocus", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showWeek", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "dataType", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "selectionMode", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "maxDateCount", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showButtonBar", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "autoZIndex", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "baseZIndex", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "keepInvalid", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "hideOnDateTimeSelect", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "numberOfMonths", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onFocus", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onBlur", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onClose", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onSelect", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onInput", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onTodayClick", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onClearClick", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onMonthChange", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onYearChange", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onClickOutside", void 0);
    __decorate([
        Output()
    ], DatepickerComponent.prototype, "onShow", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "tabIndex", void 0);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "tabindex", void 0);
    __decorate([
        ViewChild(InputfieldComponent, { static: false })
    ], DatepickerComponent.prototype, "inputField", void 0);
    __decorate([
        ViewChild('inputfield', { static: false })
    ], DatepickerComponent.prototype, "inputfieldViewChild", void 0);
    __decorate([
        ViewChild('contentWrapper', { static: false })
    ], DatepickerComponent.prototype, "content", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "minDate", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "maxDate", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "disabledDates", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "disabledDays", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "yearRange", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "showTime", null);
    __decorate([
        Input()
    ], DatepickerComponent.prototype, "locale", null);
    DatepickerComponent = __decorate([
        Component({
            selector: 'bmw-datepicker',
            template: "<div\n  class=\"bmw__margin-bottom__xs ui-calendar\"\n  [ngClass]=\"{\n    'ui-calendar-timeonly': timeOnly,\n    'ui-calendar-disabled': disabled\n  }\"\n>\n  <ng-template [ngIf]=\"!inline\">\n    <bmw-inputfield\n      [icon]=\"showIcon ? 'iwp-icon-gen_calendar' : ''\"\n      [disabled]=\"disabled\"\n      (click)=\"!disabled && !readonly && onInputFocus($event)\"\n      [id]=\"inputId\"\n      [preventSettingIDAutomatically]=\"true\"\n    >\n      <input\n        #inputfield\n        bmwInput\n        type=\"text\"\n        [attr.id]=\"inputId\"\n        [attr.name]=\"name\"\n        [attr.required]=\"required\"\n        [attr.aria-required]=\"required\"\n        [value]=\"inputFieldValue\"\n        (focus)=\"onInputFocus($event)\"\n        (keydown)=\"onInputKeydown($event)\"\n        (click)=\"onInputClick()\"\n        (blur)=\"onInputBlur($event)\"\n        [readonly]=\"readonly\"\n        (input)=\"onUserInput($event)\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [attr.tabindex]=\"tabIndex || tabindex\"\n        [ngClass]=\"'ui-inputtext ui-widget ui-state-default'\"\n        autocomplete=\"off\"\n        [attr.aria-labelledby]=\"ariaLabelledBy\"\n      />\n    </bmw-inputfield>\n  </ng-template>\n  <div\n    #contentWrapper\n    [ngClass]=\"{\n      'ui-datepicker ui-widget ui-widget-content ui-helper-clearfix': true,\n      'ui-datepicker-inline': inline,\n      'ui-shadow': !inline,\n      'ui-state-disabled': disabled,\n      'ui-datepicker-timeonly': timeOnly,\n      'ui-datepicker-multiple-month': this.numberOfMonths > 1,\n      'ui-datepicker-monthpicker': view === 'month',\n      'ui-datepicker-touch-ui': touchUI\n    }\"\n    *ngIf=\"inline || overlayVisible\"\n  >\n    <!-- <ng-content select=\"p-header\"></ng-content> -->\n    <ng-container *ngIf=\"!timeOnly\">\n      <div class=\"ui-datepicker-group ui-widget-content\" *ngFor=\"let month of months; let i = index\">\n        <div class=\"ui-datepicker-header ui-widget-header ui-helper-clearfix\">\n          <a\n            class=\"ui-datepicker-prev iwp-icon-gen_arrow_left\"\n            (click)=\"onPrevButtonClick($event)\"\n            (keydown.enter)=\"onPrevButtonClick($event)\"\n            *ngIf=\"i === 0\"\n            tabindex=\"0\"\n            (keydown)=\"onInputKeydown($event)\"\n          >\n          </a>\n          <div class=\"ui-datepicker-title\">\n            <span class=\"ui-datepicker-month\" *ngIf=\"!monthNavigator && view !== 'month'\">{{\n              locale.monthNames[month.month]\n            }}</span>\n            <select\n              tabindex=\"0\"\n              class=\"ui-datepicker-month\"\n              *ngIf=\"monthNavigator && view !== 'month' && numberOfMonths === 1\"\n              (change)=\"onMonthDropdownChange($event.target.value)\"\n            >\n              <option\n                [value]=\"i\"\n                *ngFor=\"let monthName of locale.monthNames; let i = index\"\n                [selected]=\"i === month.month\"\n                >{{ monthName }}</option\n              >\n            </select>\n            <select\n              tabindex=\"0\"\n              class=\"ui-datepicker-year\"\n              *ngIf=\"yearNavigator && numberOfMonths === 1\"\n              (change)=\"onYearDropdownChange($event.target.value)\"\n            >\n              <option [value]=\"year\" *ngFor=\"let year of yearOptions\" [selected]=\"year === currentYear\">{{\n                year\n              }}</option>\n            </select>\n            <span class=\"ui-datepicker-year\" *ngIf=\"!yearNavigator\">{{\n              view === 'month' ? currentYear : month.year\n            }}</span>\n          </div>\n          <a\n            class=\"ui-datepicker-next iwp-icon-gen_arrow_right\"\n            (click)=\"onNextButtonClick($event)\"\n            (keydown.enter)=\"onNextButtonClick($event)\"\n            *ngIf=\"numberOfMonths === 1 ? true : i === numberOfMonths - 1\"\n            tabindex=\"0\"\n            (keydown)=\"onInputKeydown($event)\"\n          >\n          </a>\n        </div>\n        <div class=\"ui-datepicker-calendar-container\" *ngIf=\"view === 'date'\">\n          <table class=\"ui-datepicker-calendar\">\n            <thead>\n              <tr>\n                <th *ngIf=\"showWeek\" class=\"ui-datepicker-weekheader\">\n                  <span>{{ locale['weekHeader'] }}</span>\n                </th>\n                <th scope=\"col\" *ngFor=\"let weekDay of weekDays; let begin = first; let end = last\">\n                  <span>{{ weekDay }}</span>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let week of month.dates; let j = index\">\n                <td *ngIf=\"showWeek\" class=\"ui-datepicker-weeknumber ui-state-disabled\">\n                  <span>\n                    {{ month.weekNumbers[j] }}\n                  </span>\n                </td>\n                <td\n                  *ngFor=\"let date of week\"\n                  [ngClass]=\"{\n                    'ui-datepicker-other-month': date.otherMonth,\n                    'ui-datepicker-current-day': isSelected(date),\n                    'ui-datepicker-today': date.today\n                  }\"\n                >\n                  <ng-container *ngIf=\"date.otherMonth ? showOtherMonths : true\">\n                    <a\n                      class=\"ui-state-default\"\n                      *ngIf=\"date.selectable\"\n                      [ngClass]=\"{ 'ui-state-active': isSelected(date), 'ui-state-highlight': date.today }\"\n                      (click)=\"onDateSelect($event, date)\"\n                      draggable=\"false\"\n                      (keydown)=\"onDateCellKeydown($event, date, i)\"\n                    >\n                      <ng-container *ngIf=\"!dateTemplate\">{{ date.day }}</ng-container>\n                      <ng-container *ngTemplateOutlet=\"dateTemplate; context: { $implicit: date }\"></ng-container>\n                    </a>\n                    <span\n                      class=\"ui-state-default ui-state-disabled\"\n                      [ngClass]=\"{ 'ui-state-active': isSelected(date), 'ui-state-highlight': date.today }\"\n                      *ngIf=\"!date.selectable\"\n                    >\n                      <ng-container *ngIf=\"!disabledDateTemplate\">{{ date.day }}</ng-container>\n                      <ng-container\n                        *ngTemplateOutlet=\"disabledDateTemplate; context: { $implicit: date }\"\n                      ></ng-container>\n                    </span>\n                  </ng-container>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <div class=\"ui-monthpicker\" *ngIf=\"view === 'month'\">\n        <a\n          *ngFor=\"let m of monthPickerValues; let i = index\"\n          (click)=\"onMonthSelect($event, i)\"\n          (keydown)=\"onMonthCellKeydown($event, i)\"\n          class=\"ui-monthpicker-month\"\n          [ngClass]=\"{\n            'ui-state-active': isMonthSelected(i),\n            'ui-state-disabled': !isSelectable(1, i, this.currentYear, false)\n          }\"\n        >\n          {{ m }}\n        </a>\n      </div>\n    </ng-container>\n    <div class=\"ui-timepicker ui-widget-header\" *ngIf=\"showTime || timeOnly\">\n      <div class=\"ui-hour-picker\">\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (keydown.enter)=\"incrementHour($event)\"\n          (mousedown)=\"onTimePickerElementMouseDown($event, 0, 1)\"\n          (mouseup)=\"onTimePickerElementMouseUp($event)\"\n          (mouseout)=\"onTimePickerElementMouseOut($event)\"\n        >\n          <span class=\"pi pi-chevron-up\"></span>\n        </a>\n        <span [ngStyle]=\"{ display: currentHour < 10 ? 'inline' : 'none' }\">0</span><span>{{ currentHour }}</span>\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (keydown.enter)=\"decrementHour($event)\"\n          (mousedown)=\"onTimePickerElementMouseDown($event, 0, -1)\"\n          (mouseup)=\"onTimePickerElementMouseUp($event)\"\n          (mouseout)=\"onTimePickerElementMouseOut($event)\"\n        >\n          <span class=\"pi pi-chevron-down\"></span>\n        </a>\n      </div>\n      <div class=\"ui-separator\">\n        <a>\n          <span class=\"pi pi-chevron-up\"></span>\n        </a>\n        <span>{{ timeSeparator }}</span>\n        <a>\n          <span class=\"pi pi-chevron-down\"></span>\n        </a>\n      </div>\n      <div class=\"ui-minute-picker\">\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (keydown.enter)=\"incrementMinute($event)\"\n          (mousedown)=\"onTimePickerElementMouseDown($event, 1, 1)\"\n          (mouseup)=\"onTimePickerElementMouseUp($event)\"\n          (mouseout)=\"onTimePickerElementMouseOut($event)\"\n        >\n          <span class=\"pi pi-chevron-up\"></span>\n        </a>\n        <span [ngStyle]=\"{ display: currentMinute < 10 ? 'inline' : 'none' }\">0</span><span>{{ currentMinute }}</span>\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (keydown.enter)=\"decrementMinute($event)\"\n          (mousedown)=\"onTimePickerElementMouseDown($event, 1, -1)\"\n          (mouseup)=\"onTimePickerElementMouseUp($event)\"\n          (mouseout)=\"onTimePickerElementMouseOut($event)\"\n        >\n          <span class=\"pi pi-chevron-down\"></span>\n        </a>\n      </div>\n      <div class=\"ui-separator\" *ngIf=\"showSeconds\">\n        <a>\n          <span class=\"pi pi-chevron-up\"></span>\n        </a>\n        <span>{{ timeSeparator }}</span>\n        <a>\n          <span class=\"pi pi-chevron-down\"></span>\n        </a>\n      </div>\n      <div class=\"ui-second-picker\" *ngIf=\"showSeconds\">\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (keydown.enter)=\"incrementSecond($event)\"\n          (mousedown)=\"onTimePickerElementMouseDown($event, 2, 1)\"\n          (mouseup)=\"onTimePickerElementMouseUp($event)\"\n          (mouseout)=\"onTimePickerElementMouseOut($event)\"\n        >\n          <span class=\"pi pi-chevron-up\"></span>\n        </a>\n        <span [ngStyle]=\"{ display: currentSecond < 10 ? 'inline' : 'none' }\">0</span><span>{{ currentSecond }}</span>\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (keydown.enter)=\"decrementSecond($event)\"\n          (mousedown)=\"onTimePickerElementMouseDown($event, 2, -1)\"\n          (mouseup)=\"onTimePickerElementMouseUp($event)\"\n          (mouseout)=\"onTimePickerElementMouseOut($event)\"\n        >\n          <span class=\"pi pi-chevron-down\"></span>\n        </a>\n      </div>\n      <div class=\"ui-ampm-picker\" *ngIf=\"hourFormat == '12'\">\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (click)=\"toggleAMPM($event)\"\n          (keydown.enter)=\"toggleAMPM($event)\"\n        >\n          <span class=\"pi pi-chevron-up\"></span>\n        </a>\n        <span>{{ pm ? 'PM' : 'AM' }}</span>\n        <a\n          tabindex=\"0\"\n          (keydown)=\"onContainerButtonKeydown($event)\"\n          (click)=\"toggleAMPM($event)\"\n          (keydown.enter)=\"toggleAMPM($event)\"\n        >\n          <span class=\"pi pi-chevron-down\"></span>\n        </a>\n      </div>\n    </div>\n    <div class=\"ui-datepicker-buttonbar\" *ngIf=\"showButtonBar\">\n      <bmw-button\n        button=\"small secondary\"\n        type=\"button\"\n        (click)=\"onTodayButtonClick($event)\"\n        (keydown)=\"onBMWButtonKeydown($event)\"\n      >\n        {{ _locale.today }}\n      </bmw-button>\n      <bmw-button\n        button=\"small secondary\"\n        type=\"button\"\n        (click)=\"onClearButtonClick($event)\"\n        (keydown)=\"onBMWButtonKeydown($event)\"\n      >\n        {{ _locale.clear }}\n      </bmw-button>\n    </div>\n    <!-- <ng-content select=\"p-footer\"></ng-content> -->\n  </div>\n</div>\n<div>\n  <ng-content select=\"bmw-error-message\" ngProjectAs=\"bmw-error-message\"></ng-content>\n</div>\n",
            host: {
                '[class.ui-inputwrapper-filled]': 'filled',
                '[class.ui-inputwrapper-focus]': 'focus'
            },
            providers: [CALENDAR_VALUE_ACCESSOR],
            changeDetection: ChangeDetectionStrategy.Default,
            styles: [".ui-calendar{position:relative;display:inline-block;width:100%;line-height:var(--typography__regular-text__line-height);--inputfield__default__margin-bottom:0px}.ui-calendar :focus{outline:solid 1px;outline-color:var(--color-bmw-highlight)}.ui-calendar ::ng-deep i.icon{cursor:pointer}.ui-calendar-disabled ::ng-deep i.icon{pointer-events:none}.ui-calendar .ui-calendar-button{height:100%;border-top-left-radius:0;border-bottom-left-radius:0;width:2em;border-left:0}.ui-calendar .ui-calendar-button:enabled:hover,.ui-calendar .ui-calendar-button:focus{border-left:0}.ui-calendar .ui-datepicker{box-sizing:border-box;border:1px solid var(--datepicker__border-color);background-color:var(--color-bmw-basic1-shade3)}.ui-fluid .ui-calendar{width:100%}.ui-fluid .ui-calendar-button{width:2em}.ui-fluid .ui-datepicker-buttonbar button{width:auto}.ui-datepicker{width:auto;padding:0;position:absolute;z-index:var(--z-index__tooltip-popup)}.ui-datepicker.ui-datepicker-inline{display:inline-block;position:static}.ui-datepicker .ui-datepicker-group{border-width:0}.ui-datepicker-header{position:relative;background-color:var(--color-bmw-basic1-shade3);text-align:center;padding:var(--spacing-bmw-s) 0;font-family:bmwgroup;font-size:var(--typography__component-headline-text__font-size);line-height:var(--typography__component-headline-text__line-height);color:var(--color-bmw-basic4);font-weight:700}.ui-datepicker-next,.ui-datepicker-prev{position:absolute;top:50%;transform:translateY(-50%);display:flex;justify-content:center;align-items:center;width:24px;height:24px;color:#000;font-weight:700;cursor:pointer}.ui-datepicker-prev{left:0}.ui-datepicker-next{right:0}.ui-datepicker .ui-datepicker-title select{background-color:transparent;border:0;border-bottom:1px solid var(--color-bmw-accent2-shade1);font-family:Arial;font-weight:400;height:24px;cursor:pointer}.ui-datepicker-month{margin-right:var(--spacing-bmw-xxs)}.ui-datepicker select.ui-datepicker-month{margin-right:10px;text-align:right}.ui-datepicker-multiple-month .ui-datepicker-group{display:table-cell;border-width:0 1px 0 0}.ui-datepicker table{width:100%;font-size:var(--typography__regular-text__font-size);font-size:var(--typography__component-text__font-size);border-collapse:collapse;color:var(--color-bmw-basic4)}.ui-datepicker th{text-align:center;font-weight:400;border:0;background-color:var(--color-bmw-basic1-shade3);cursor:default}.ui-datepicker th:first-of-type{color:var(--color-bmw-basic3-shade2)}.ui-datepicker td{border:0;padding:0}.ui-datepicker td:first-of-type{background-color:var(--color-bmw-accent9-shade3);color:var(--color-bmw-basic3-shade2);cursor:default}.ui-datepicker td:not(.ui-datepicker-weeknumber),.ui-datepicker td:not(:first-of-type),.ui-datepicker-group{background-color:#fff}.ui-datepicker td>a,.ui-datepicker td>span{display:block;padding:.5em;text-decoration:none;border:0;text-align:center;line-height:var(--typography__component-text__line-height);width:var(--typography__component-text__line-height);padding:var(--spacing-bmw-xs)}.ui-datepicker .ui-datepicker-buttonbar{display:flex;flex-direction:row;justify-content:flex-start;border-left:0;border-right:0;border-bottom:0;padding:var(--spacing-bmw-xs);background-color:#fff;border-top:1px solid var(--datepicker__border-color)}.ui-datepicker .ui-datepicker-buttonbar>*{margin-right:var(--spacing-bmw-xs)}.ui-datepicker .ui-datepicker-buttonbar>:last-child{margin-right:0}.ui-calendar.ui-calendar-w-btn input{border-top-right-radius:0;border-bottom-right-radius:0}.ui-monthpicker{background-color:#fff;box-sizing:border-box}.ui-monthpicker .ui-monthpicker-month{box-sizing:border-box;width:33.3%;display:inline-block;text-align:center;padding:var(--spacing-bmw-xxs);font-size:var(--typography__regular-text__font-size);line-height:var(--typography__regular-text__line-height);cursor:pointer}.ui-datepicker .ui-state-default{color:var(--color-bmw-basic4);cursor:pointer}.ui-datepicker .ui-state-default:not(.ui-state-disabled):not(.ui-state-active):hover{background-color:var(--color-bmw-basic1-shade2)}.ui-datepicker-other-month .ui-state-default{color:var(--color-bmw-basic3-shade1)}.ui-state-highlight:not(.ui-state-disabled):not(.ui-state-active){position:relative;outline:2px solid var(--color-bmw-highlight);outline-offset:-2px}.ui-state-highlight:not(.ui-state-disabled):not(.ui-state-active)::before{content:'';position:absolute;top:0;left:0;width:100%;height:100%;display:block;background-color:var(--color-bmw-highlight);opacity:.1}.ui-state-highlight:not(.ui-state-disabled):not(.ui-state-active).ui-state-active{outline:0}.ui-state-highlight:not(.ui-state-disabled):not(.ui-state-active).ui-state-active::before{opacity:0}.ui-datepicker .ui-state-disabled{color:var(--color-bmw-basic3-shade3);cursor:not-allowed}.ui-datepicker .ui-state-active{background-color:var(--color-bmw-accent10-shade2);color:#fff}.ui-datepicker .ui-state-active:hover{background-color:var(--color-bmw-accent10-shade2)}.ui-monthpicker-month.ui-state-disabled{pointer-events:none}.ui-datepicker-monthpicker select.ui-datepicker-year{width:auto}.ui-timepicker{text-align:center;padding:.5em 0}.ui-timepicker>div{display:inline-block;margin-left:.5em;min-width:1.5em}.ui-timepicker>.ui-minute-picker,.ui-timepicker>.ui-second-picker{margin-left:0}.ui-timepicker>.ui-separator{margin-left:0;min-width:.75em}.ui-timepicker>.ui-separator a{visibility:hidden}.ui-timepicker>div a{display:block;opacity:.7;cursor:pointer}.ui-timepicker>div a:last-child{margin-top:.3em}.ui-timepicker>div a:hover{display:block;opacity:1}input[type=text]::-ms-clear{display:none}.ui-calendar .ui-datepicker-touch-ui,.ui-datepicker-touch-ui{position:fixed;top:50%;left:50%;min-width:80vw}.ui-datepicker-touch-ui.ui-datepicker th{padding:2em 0}.ui-datepicker-touch-ui.ui-datepicker td{padding:0}.ui-datepicker-touch-ui.ui-datepicker td>a,.ui-datepicker-touch-ui.ui-datepicker td>span{padding:2em 0}.ui-datepicker-touch-ui .ui-timepicker{padding:1em 0}.ui-datepicker-touch-ui .ui-timepicker>div a{font-size:2em}.ui-datepicker-touch-ui .ui-monthpicker-month{font-size:var(--typography__h2__font-size);line-height:58px;height:64px}.ui-datepicker-mask{position:fixed;width:100%;height:100%}@media screen and (max-width:40em){.ui-datepicker-multiple-month{width:17em;overflow:auto}.ui-datepicker-touch-ui.ui-datepicker td a,.ui-datepicker-touch-ui.ui-datepicker td span,.ui-datepicker-touch-ui.ui-datepicker th{padding:1em 0}}:host.ng-touched.ng-invalid bmw-inputfield:last-child .bmw-input{background-color:var(--inputfield__error__background-color)!important;border-bottom-color:var(--inputfield__error__color)!important}"]
        })
    ], DatepickerComponent);
    return DatepickerComponent;
}());
export { DatepickerComponent };
//# sourceMappingURL=data:application/json;base64,