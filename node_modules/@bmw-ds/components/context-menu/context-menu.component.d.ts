import { AfterContentInit, EventEmitter, OnDestroy, OnInit, QueryList, ElementRef, ChangeDetectorRef } from '@angular/core';
import { ContextMenuEventProviderService } from './context-menu-event-provider.service';
import * as ɵngcc0 from '@angular/core';
export declare class ContextMenuItemComponent implements OnInit, OnDestroy, AfterContentInit {
    elementRef: ElementRef;
    private eventProviderService;
    isSelected: boolean;
    disabled: boolean;
    icon: string;
    labelText: string;
    wrapper: ElementRef;
    selected: EventEmitter<ContextMenuItemComponent>;
    subMenu: ContextMenuComponent;
    id: string;
    showSelected: boolean;
    constructor(elementRef: ElementRef, eventProviderService: ContextMenuEventProviderService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    itemClick: (event?: MouseEvent) => void;
    unselectSubs(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ContextMenuItemComponent, [null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ContextMenuItemComponent, "bmw-context-menu-item", never, { "id": "id"; "disabled": "disabled"; "icon": "icon"; "labelText": "labelText"; }, { "selected": "selected"; }, ["subMenu"], ["*"]>;
}
export declare class ContextMenuComponent implements OnInit, OnDestroy, AfterContentInit {
    private cdRef;
    elementRef: ElementRef;
    childContextMenuItems: QueryList<ContextMenuItemComponent>;
    private _opened;
    closeOnClickOutside: boolean;
    clickOutsideCallback: (this: Document, ev: MouseEvent) => any;
    closeOnSelected: boolean;
    set opened(state: boolean);
    get opened(): boolean;
    id: string;
    private readonly _destroy;
    /**
     * keeps the previously selected item highlited when reopening the menu (default = false)
     */
    keepItemSelected: boolean;
    /**
     * preserves the opened state of the menu after closing (default = false)
     */
    preserveState: boolean;
    isRootMenu: boolean;
    closeEvent: EventEmitter<boolean>;
    constructor(cdRef: ChangeDetectorRef, elementRef: ElementRef);
    onKeydown(event: KeyboardEvent): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    _register(): void;
    ngOnDestroy(): void;
    _select(selectedItem: any): void;
    activateItem(target: EventTarget): void;
    closeSubmenu(target: EventTarget): void;
    openSubmenu(target: EventTarget): void;
    setPreviousItemAsFocused(target?: EventTarget): void;
    setNextItemAsFocused(target?: EventTarget): void;
    unselectSubs(): void;
    toggle(state?: boolean): void;
    onClickOutside({ target }: {
        target: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ContextMenuComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ContextMenuComponent, "bmw-context-menu", never, { "closeOnClickOutside": "closeOnClickOutside"; "closeOnSelected": "closeOnSelected"; "keepItemSelected": "keepItemSelected"; "preserveState": "preserveState"; "opened": "opened"; "id": "id"; }, { "closeEvent": "closeEvent"; }, ["childContextMenuItems"], ["*"]>;
}

//# sourceMappingURL=context-menu.component.d.ts.map