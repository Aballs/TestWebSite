{"version":3,"file":"context-menu.component.d.ts","sources":["context-menu.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy, OnInit, QueryList, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { ContextMenuEventProviderService } from './context-menu-event-provider.service';\nexport declare class ContextMenuItemComponent implements OnInit, OnDestroy, AfterContentInit {\n    elementRef: ElementRef;\n    private eventProviderService;\n    isSelected: boolean;\n    disabled: boolean;\n    icon: string;\n    labelText: string;\n    wrapper: ElementRef;\n    selected: EventEmitter<ContextMenuItemComponent>;\n    subMenu: ContextMenuComponent;\n    id: string;\n    showSelected: boolean;\n    constructor(elementRef: ElementRef, eventProviderService: ContextMenuEventProviderService);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    itemClick: (event?: MouseEvent) => void;\n    unselectSubs(): void;\n    ngOnDestroy(): void;\n}\nexport declare class ContextMenuComponent implements OnInit, OnDestroy, AfterContentInit {\n    private cdRef;\n    elementRef: ElementRef;\n    childContextMenuItems: QueryList<ContextMenuItemComponent>;\n    private _opened;\n    closeOnClickOutside: boolean;\n    clickOutsideCallback: (this: Document, ev: MouseEvent) => any;\n    closeOnSelected: boolean;\n    set opened(state: boolean);\n    get opened(): boolean;\n    id: string;\n    private readonly _destroy;\n    /**\n     * keeps the previously selected item highlited when reopening the menu (default = false)\n     */\n    keepItemSelected: boolean;\n    /**\n     * preserves the opened state of the menu after closing (default = false)\n     */\n    preserveState: boolean;\n    isRootMenu: boolean;\n    closeEvent: EventEmitter<boolean>;\n    constructor(cdRef: ChangeDetectorRef, elementRef: ElementRef);\n    onKeydown(event: KeyboardEvent): void;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    _register(): void;\n    ngOnDestroy(): void;\n    _select(selectedItem: any): void;\n    activateItem(target: EventTarget): void;\n    closeSubmenu(target: EventTarget): void;\n    openSubmenu(target: EventTarget): void;\n    setPreviousItemAsFocused(target?: EventTarget): void;\n    setNextItemAsFocused(target?: EventTarget): void;\n    unselectSubs(): void;\n    toggle(state?: boolean): void;\n    onClickOutside({ target }: {\n        target: any;\n    }): void;\n}\n"]}