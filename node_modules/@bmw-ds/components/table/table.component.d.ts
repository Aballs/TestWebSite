import { OnInit, AfterContentInit, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare interface ITableHeader {
    field: string;
    headerName?: string;
    sorted?: boolean;
    sortable?: boolean;
    sort?: 'asc' | 'desc';
}
export declare interface ITableRow {
    [key: string]: string | string[] | number;
}
export declare class TableComponent implements OnInit, AfterContentInit, OnChanges {
    columnDefs: ITableHeader[];
    columns: ITableHeader[];
    rowData: ITableRow[];
    data: ITableRow[];
    id: string;
    hideHeader: boolean;
    zebra: boolean;
    stickHeader: boolean;
    tableSorted: EventEmitter<ITableHeader>;
    tableContainer: ElementRef;
    headerContainer: ElementRef;
    isLoading: boolean;
    rowsAfterSort: ITableRow[];
    constructor();
    onScroll(): void;
    shouldHaveStickHeader(): boolean;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    applySortToRows(header: ITableHeader): void;
    private toggleSort;
    sortRowsByProperty(property: string): void;
    private setElementsWidthRecursivelyBecauseHTMLTablesAreHardToDealWith;
    private setElementInlineWidth;
    private isIE;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<TableComponent, "bmw-table", never, { "hideHeader": "hideHeader"; "zebra": "zebra"; "stickHeader": "stickHeader"; "columns": "columns"; "id": "id"; "columnDefs": "columnDefs"; "rowData": "rowData"; "data": "data"; }, { "tableSorted": "tableSorted"; }, never, never>;
}

//# sourceMappingURL=table.component.d.ts.map