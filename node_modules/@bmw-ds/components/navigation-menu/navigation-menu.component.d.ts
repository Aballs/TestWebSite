import { NavigationService } from './navigation.service';
import { AfterContentInit, QueryList, OnDestroy, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';
import { NavigationMenuSubmenuItemComponent } from './navigation-menu-submenu-item.component';
import { NavigationMenuItemComponent } from './navigation-menu-item.component';
import { NavigationMenuSubmenuComponent } from './navigation-menu-submenu.component';
import * as ɵngcc0 from '@angular/core';
export declare class NavigationMenuComponent implements AfterContentInit, OnDestroy {
    private elemRef;
    private cdRef;
    private _navService;
    private onDestroy$;
    private _opened;
    selected: NavigationMenuItemComponent;
    submenuItems: QueryList<NavigationMenuSubmenuItemComponent>;
    submenus: QueryList<NavigationMenuSubmenuComponent>;
    items: QueryList<NavigationMenuItemComponent>;
    id: string;
    set opened(value: boolean);
    get opened(): boolean;
    /**
     * closes menu when user clicks outside (default = false)
     */
    closeOnClickOutside: boolean;
    itemSelectedEvent: EventEmitter<NavigationMenuSubmenuItemComponent | NavigationMenuItemComponent>;
    onFocusIn(event: Event): void;
    clickout(event: any): void;
    onKeydown(event: KeyboardEvent): void;
    constructor(elemRef: ElementRef, cdRef: ChangeDetectorRef, _navService: NavigationService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    focusIntoSubmenu(target: EventTarget): void;
    clickMenuItem(menuItem: NavigationMenuItemComponent): void;
    expandAllSubmenus(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NavigationMenuComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<NavigationMenuComponent, "bmw-navigation-menu", never, { "closeOnClickOutside": "closeOnClickOutside"; "opened": "opened"; "id": "id"; }, { "itemSelectedEvent": "itemSelectedEvent"; }, ["submenuItems", "submenus", "items"], ["bmw-navigation-menu-item"]>;
}

//# sourceMappingURL=navigation-menu.component.d.ts.map