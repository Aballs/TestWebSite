import { ToggleButtonComponent } from './../../toggle-button/toggle-button.component';
import { EventEmitter, TemplateRef, ElementRef, OnInit, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class SegmentedButtonItemComponent implements OnInit {
    private el;
    private cd;
    sample: TemplateRef<any>;
    button: ToggleButtonComponent;
    disabled: boolean;
    checked: boolean;
    value: string;
    id: string;
    buttonClicked: EventEmitter<SegmentedButtonItemComponent>;
    focused: boolean;
    isInDropdown: boolean;
    fromTop: string;
    itemWidth: string;
    isHidden: boolean;
    native: HTMLElement;
    reactiveForm: FormGroup;
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    toggleItemVisibility(state?: boolean): void;
    setChecked(state?: boolean): void;
    setTop(top: number): void;
    setWidth(width: number): void;
    moveToDropdown(): void;
    removeFromDropdown(): void;
    resetVisibility(): void;
    onClick(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SegmentedButtonItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<SegmentedButtonItemComponent, "bmw-segmented-button-item", never, { "id": "id"; "value": "value"; "checked": "checked"; "disabled": "disabled"; }, { "buttonClicked": "buttonClicked"; }, never, ["*"]>;
}

//# sourceMappingURL=segmented-button-item.component.d.ts.map