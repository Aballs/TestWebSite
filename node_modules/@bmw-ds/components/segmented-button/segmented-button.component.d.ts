import { AfterViewInit, OnInit, QueryList, ViewContainerRef, ChangeDetectorRef, EventEmitter, ElementRef, ViewRef, TemplateRef, EmbeddedViewRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subscription } from 'rxjs';
import { SegmentedButtonItemComponent } from './segmented-button-item/segmented-button-item.component';
import * as ɵngcc0 from '@angular/core';
export declare class SegmentedButtonComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {
    private cd;
    private elementRef;
    private onDestroy$;
    labelWrapper: ElementRef;
    segmentButton: ElementRef;
    dropdownButton: TemplateRef<any>;
    visibleItemsContainer: ViewContainerRef;
    childItemsComponent: QueryList<SegmentedButtonItemComponent>;
    id: string;
    name: string;
    disabled: boolean;
    uncheckable: boolean;
    updateEvent: EventEmitter<SegmentedButtonComponent>;
    value: string;
    showDots: boolean;
    isMenuClosed: boolean;
    previousWidth: number;
    dots: ViewRef;
    _componentHeight: number;
    _segmentButtonHeight: number;
    maxElWidthInDropdown: number;
    buttonItemClickSubscriptions: Subscription[];
    visibleElements: {
        view: EmbeddedViewRef<any>;
        order: number;
        item: SegmentedButtonItemComponent;
    }[];
    hiddenElements: {
        view: EmbeddedViewRef<any>;
        order: number;
        item: SegmentedButtonItemComponent;
    }[];
    _onChange: (value: any) => void;
    _onTouched: () => any;
    onResize(): void;
    onKeydown(event: KeyboardEvent): void;
    constructor(cd: ChangeDetectorRef, elementRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    createView(): void;
    destroyView(): void;
    resetFocusedItem(): void;
    setPreviousItemAsFocused(): void;
    setNextItemAsFocused(): void;
    showSelected(value: any): void;
    _showElement(): void;
    _hideElement(): void;
    sortArrays(): void;
    selectButton(buttonItem: SegmentedButtonItemComponent): void;
    toggleMenu(state?: boolean): void;
    getMaxElWidthInDropdown(): void;
    positionOverflowedItems(): void;
    get _isOverflow(): boolean;
    _toggleCheckedChildren(item: SegmentedButtonItemComponent): void;
    clearOtherChildren(item: SegmentedButtonItemComponent): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    writeValue(value: any): void;
    setDisabledState(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SegmentedButtonComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<SegmentedButtonComponent, "bmw-segmented-button", never, { "uncheckable": "uncheckable"; "id": "id"; "name": "name"; "disabled": "disabled"; }, { "updateEvent": "updateEvent"; }, ["childItemsComponent"], never>;
}

//# sourceMappingURL=segmented-button.component.d.ts.map